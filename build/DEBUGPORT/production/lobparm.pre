
# 1 "lobparm.c"

# 8 "types.h"
typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned long ulong;

# 44
typedef union sc {
char c[2];
uchar uc[2];
short s;
ushort us;
} mini_variant;



typedef union ulp {
char c[4];
uchar uc[4];
short s[2];
ushort us[2];
long l;
unsigned long ul;
void *vp;
const void *cvp;
volatile void *vvp;
char *cp;
const char *ccp;
uchar *ucp;
const uchar *cucp;
short *sp;
const short *csp;
ushort *usp;
const ushort *cusp;
long *lp;
const long *clp;
ulong *unlp;
const ulong *culp;
void (*func)();
} variant;

# 90
union parm {

# 96
signed char value[9];



struct {
uchar speed;
uchar elev;



signed char spin;
signed char horiz;


uchar twolnrw;

uchar feed;

# 120
uchar col;
uchar row;

uchar width;
};
};

# 142
struct limit {
signed char minimum;
signed char maximum;
signed char incr;
};



struct motor_status {
unsigned cap1:1;
unsigned cap2:1;
unsigned HaveCmd:1;
unsigned InCmd:1;
unsigned CmdErr:1;
unsigned TickInt:1;
unsigned WaitResp:1;
unsigned a2dStarted:1;
};

# 174
struct persprog {



signed char shot[30];
signed char method[30];



char feed[30];

char reserved;
};

# 4 "C:/Program Files (x86)/Microchip/xc8/v1.33/include\string.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;


extern int errno;

# 22
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 42
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 7 "lob.h"
far void show_lcd(void);
void clear_lcd(char mask);
void DisableSlaveSPI(void);
void EnableSlaveSPI(void);
char SEERead(unsigned int addr);
void SEEWrite(unsigned int addr, char data);


char save_prog(signed char progno, struct persprog* ppers);

# 417
static const unsigned int RPM_NONE = 0x0000;
static const unsigned int RPM_START = 0x0001;
static const unsigned int RPM_SHOTNUM = 0x0002;
static const unsigned int RPM_SHOTLOCN = 0x0004;
static const unsigned int RPM_SHOTSPEED = 0x0008;
static const unsigned int RPM_SHOTSPIN = 0x0010;
static const unsigned int RPM_SHOTFEED = 0x0020;
static const unsigned int RPM_EDITLOCN = 0x0040;
static const unsigned int RPM_EDITSPEED = 0x0080;
static const unsigned int RPM_EDITSPIN = 0x0100;
static const unsigned int RPM_EDITFEED = 0x0200;
static const unsigned int RPM_SHOTTABLES = 0x0400;


static const unsigned int RPM_DWNLDDRL = 0x0800;

# 543
struct t_parm {
const struct limit limits;
const char** prompt;
const char field_size;
const char field_locn;
const char text_size;
const char text_start;
const char line;
};

struct el04_loc {
uchar speed;
ushort top;
ushort bottom;
ushort elev;
signed short sweep;
signed char spin;
};

# 588
struct ee_hdr {
char vers[8];
ushort ops_size;
char npresets;
char parm_size;
char npersprog;
char pers_size;
char num_methods;
char num_locs;
char additional_locs;
char ndrills[3];


ushort elev_correction;
ushort sweep_correction;


char rsrved[9];

};


struct shot {
ushort top;
ushort bot;
ushort y;
ushort x;
ushort yLo;
ushort xLeft;
ushort feedrate;
ushort sweeprate;
};



struct rand_info {
char range;
char incr;
char start;
char max;
};

# 738
struct power_button {
uchar count;
uchar previous;
uchar current;
uchar previous_debounced;
uchar debounced;
};

# 775
struct moterr {
unsigned LoBat:1;
unsigned Reserved1:1;
unsigned Reserved2:1;
unsigned TopPeriod:1;
unsigned BotPeriod:1;
unsigned TopCurSense:1;
unsigned BotCurSense:1;
unsigned FeedCurSense:1;
unsigned SweepCurSense:1;
unsigned ElevCurSense:1;
unsigned TopCnt:1;
unsigned BotCnt:1;
unsigned Reserved:1;
unsigned SweepCnt:1;
unsigned ElevCnt:1;
};

# 8 "diag.h"
void dumprsDIAG(unsigned long ix, const char* cp);

void dumpsDIAG(unsigned long ix,char* cp);


void putrsDIAG(const char *data);

void putsDIAG(char *data);
void dumphex(unsigned char c);
void dump2port(unsigned uc);
void dumphex2port(unsigned char c);
void dumpaddr(unsigned int addr);
void dumplong(unsigned long addr);
void dumpshort(unsigned long addr);
unsigned long atoh(char *cptr);

# 13 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\delays.h"
void Delay1TCYx(unsigned char);

# 19
void Delay10TCYx(unsigned char);

# 25
void Delay100TCYx(unsigned char);

# 31
void Delay1KTCYx(unsigned char);

# 37
void Delay10KTCYx(unsigned char);

# 24 "lobparm.c"
extern union parm preset[16];
extern char man_parm;


extern unsigned char preset_type;

extern uchar play_state;



extern const struct rand_info pre_rand[];
extern void abort_shot(void);


extern long play_mode;
extern uchar lcd_updated;



extern char lcd_line[][17];

# 49
extern const struct el04_loc court_locs[][50];
extern const struct el04_loc court_locs_CLUB[][50];



extern char FirstShot;



extern unsigned char model_type;

# 80
const char *parm_fmt[][2] = {



{ "SPEED:      MPH ", "SPEED: >    MPH<" },

{ "ELEV:           ", "ELEV:  >    <   " },



{ "SPIN:   ", "SPIN>  <" },
{ "ANGLE:  ", "ANGLE>  " },
{ "        ", ">      <" },

{ "FEED:       SEC ", "FEED:  >    SEC<" },

# 101
{ "RND SWEEP:      ", "RND SWEEP>     <" },
{ "RND DEPTH:      ", "RND DEPTH>     <" },
{ "2-LINE:         ", "2-LINE:>       <" },

{ "FULLY RANDOM    ", "FULLY RANDOM  ><" },
{ "GRINDER         ", "GRINDER       ><" },
{ "POWER BASELINER ", "POWER BASELINE><" },
{ "ALL-COURTER     ", "ALL-COURTER   ><" },

{ "APPROACH        ", "APPROACH      ><" },
{ "ATTACK/DEFEND   ", "ATTACK/DEFEND ><" },

{ "FOREHAND PLUS   ", "FOREHAND PLUS ><" },

{ "BEGINNER        ", "BEGINNER      ><" },
{ "INTERMEDIATE    ", "INTERMEDIATE  ><" },
{ "ADVANCED        ", "ADVANCED      ><" },
{ "MOONBALLER      ", "MOONBALLER    ><" },
{ "SLICER          ", "SLICER        ><" },
{ "LEFTY           ", "LEFTY         ><" },

{ "INVALID         ", "INVALID         " },
};



extern const char preparm1base[];

# 134
const char* preset_sub[] = {


"LINE 1","LINE 2","LINE 3","LINE 4","LINE 5","LINE 6",




"ROW A", "RANDOM", "ROW C", "ROW B",


" WIDE ","MEDIUM","NARROW",
"   SPIN -3   ", "   SPIN -2   ", "   SPIN -1   ", "   SPIN 0    ", "   SPIN +1   ", "   SPIN +2   ", "   SPIN +3   ",

# 153
"ROW: A", "RANDOM", "ROW: C", "ROW: B",


};

# 165
const char* preset_sub2[] = {



" LEFT ","","CENTER","","","RIGHT ",

# 175
"DEEP", "RANDOM", "SHORT", "MID",


" WIDE ","MEDIUM","NARROW",
"   SPIN -3   ", "   SPIN -2   ", "   SPIN -1   ", "   SPIN 0    ", "   SPIN +1   ", "   SPIN +2   ", "   SPIN +3   ",

"ROW: A", "RANDOM", "ROW: C", "ROW: B",

};

# 200
struct t_parm parameters[] = {

{ { 25, 70, 5 }, &parm_fmt[0U][0], 2, 9, 16, 0, 0 },
{ { 2, 80, 1 }, &parm_fmt[1U][0], 2, 9, 16, 0, 0 },
{ { -3, 3, 1 }, &parm_fmt[2U][0], -1, 5, 8, 0, 2 },
{ { -3, 3, 1 }, &parm_fmt[3U][0], -1, 14, 8, 8, 2 },



{ { 0, 3, 1 }, &parm_fmt[4U][0],0x10, 9, 8, 8, 2 },


{ { 1, 9, 1 }, &parm_fmt[5U][0], 2, 9, 16, 0, 0 },


{ { 0, 3, 1 }, &parm_fmt[7U][0],0x10,10,16, 0, 0 },
{ { 0, 5, 1 }, &parm_fmt[6U][0],0x10,10,16, 0, 0 },
{ { 0, 2, 1 }, &parm_fmt[8U][0],0x10, 9,16, 0, 0 },
{ { 0, 0, 0 }, &parm_fmt[8][0], 0, 9, 16, 0, 0 },
{ { 0, 0, 0 }, &parm_fmt[9][0], 0, 9, 16, 0, 0 },
{ { 0, 0, 0 }, &parm_fmt[10][0], 0, 9, 16, 0, 0 },
{ { 0, 0, 0 }, &parm_fmt[11][0], 0, 9, 16, 0, 0 },
{ { 0, 0, 0 }, &parm_fmt[12][0], 0, 9, 16, 0, 0 },
{ { 0, 0, 0 }, &parm_fmt[13][0], 0, 9, 16, 0, 0 },
{ { 0, 0, 0 }, &parm_fmt[14][0], 0, 9, 16, 0, 0 },

{ { 0, 0, 0 }, &parm_fmt[15][0], 0, 9, 16, 0, 0 },
{ { 0, 0, 0 }, &parm_fmt[16][0], 0, 9, 16, 0, 0 },
{ { 0, 0, 0 }, &parm_fmt[17][0], 0, 9, 16, 0, 0 },
{ { 0, 0, 0 }, &parm_fmt[18][0], 0, 9, 16, 0, 0 },
{ { 0, 0, 0 }, &parm_fmt[19][0], 0, 9, 16, 0, 0 },
{ { 0, 0, 0 }, &parm_fmt[20][0], 0, 9, 16, 0, 0 },

};



const char speed_trans[] = {




0, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 90
};




char is_available(char locno, uchar spd, signed char spn);
char isLocAvail(char locNo, uchar spd, signed char spn);


char dashes = 0;

# 265
void chartoa(const signed char c, char* cp, signed char ndig)


{



signed char x = c;


if ((ndig > 15) && !(ndig & 0xc0)) {
if ((((ndig) & 0xf0) == ((uchar)0x20)))
x = c + 3;
else


x = c;



if ((model_type != 2U) && (model_type != 5U))

# 292
strncpy(cp,(char*)preset_sub[x],strlen((char*)preset_sub[x]));
else
strncpy(cp,(char*)preset_sub2[x],strlen((char*)preset_sub2[x]));


} else {
if (ndig < 0) {
if (x < 0) {
*cp++ = '-';
x = -x;
} else if (x) {
*cp++ = '+';
} else {
*cp++ = ' ';
}
ndig = -ndig;
}
if (ndig > 3) {
*cp++ = '?';
} else {
cp += ndig - 1;
while (ndig--) {
*cp-- = (x % 10) + '0';
x = x / 10;
}
}
}
}

# 330
char lob_parm(char cmd, uchar *pix, signed char* pparm, unsigned short long mask) {


ushort i;
unsigned short long cmsk, tmsk;
ushort ln,j, k;



signed char newval;


ushort premode;
char botMenu = (mask < (1U << 6U)) ? 5U : (5U+1);

# 352
tmsk = mask;
cmd = cmd & 0x7f;
if (cmd == 0x01) {
if ((mask & 255) == (1U << 5U))
return(0);
dashes = 0;
lcd_updated = 1;
if (*pix >= botMenu) {
*pix = -1;
do {
(*pix)++;

} while (!(tmsk & (1UL << *pix)));
dumphex(*pix);
} else if (tmsk >> (*pix + 1)) {
do {
(*pix)++;

} while (!(tmsk & (1UL << *pix)));
dumphex(*pix);
}
} else if (cmd == 0x2d) {
if ((mask & 255) == (1U << 5U))
return(0);
dashes = 0;
lcd_updated = 1;
if (*pix == 0U) {
*pix = 8U+1;
do {
(*pix)--;

} while (!(mask & (1UL << *pix)));
dumphex(*pix);
} else if (*pix && (tmsk & ((1 << (*pix + 1)) - 1))) {
do {
(*pix)--;

} while (!(tmsk & (1UL << *pix)));
dumphex(*pix);
}
} else if (cmd == 0x2b) {
lcd_updated = 1;
if ((play_mode & 2) && ((*pix == 0U) || (*pix == 2U))) {
newval = pparm[*pix] - parameters[*pix].limits.incr;
if (newval >= parameters[*pix].limits.minimum) {

if (preset_type == 0)
premode = 0;
else if (preset_type == 1U)
premode = 7;
else if (preset_type == 2) {
if (preset[2].twolnrw == 0)
premode = 13;
else if (preset[2].twolnrw == 1)
premode = 16;
else if (preset[2].twolnrw == 2)
premode = 19;
else if (preset[2].twolnrw == 3)
premode = 22;
}
else if (preset_type == 3)
premode = 25;
premode += ((preset_type == 3) ? 0 : preset[preset_type].value[preset_type+6]);
if (is_available(pre_rand[premode].start, (*pix==0U)?newval:pparm[0U], (*pix==2U)?newval:pparm[2U])) {
pparm[*pix] = newval;
dashes = 0;
if (preset_type <= 1U) {
abort_shot();
play_state = 2U;
}
} else {
dashes = 1 << (*pix);
}
}


} else if ((play_mode & 8) && (*pix == 2U) && (pparm[0U] == 70)) {
dashes = 1 << (*pix);


} else {
dec1:

pparm[*pix] -= parameters[*pix].limits.incr;

if ((*pix <= 5U) && (*pix != 4U)) {

# 447
if (pparm[*pix] < parameters[*pix].limits.minimum) {
pparm[*pix] = parameters[*pix].limits.minimum;
}

} else {
if (pparm[*pix] < parameters[*pix].limits.minimum)
pparm[*pix] = parameters[*pix].limits.maximum;
}


if (*pix == 7U && ((model_type == 2U) || (model_type == 5U))) {


if ((pparm[*pix] == 1) || (pparm[*pix] == 3) || (pparm[*pix] == 4)) {

goto dec1;
}
}
}


if (((*pix >= 6U) && (*pix != 8U)) || (*pix == 4U)) {




if (preset_type == 0)
premode = 0;
else if (preset_type == 1U)
premode = 7;
else if (preset_type == 2) {
if (preset[2].twolnrw == 0)
premode = 13;
else if (preset[2].twolnrw == 1)
premode = 16;
else if (preset[2].twolnrw == 2)
premode = 19;
else if (preset[2].twolnrw == 3)
premode = 22;
}
premode += ((preset_type == 3) ? 0 : preset[preset_type].value[preset_type+6]);
if (!(is_available(pre_rand[premode].start, pparm[0U], pparm[2U]))) {

# 516
newval = pparm[0U];
while ((newval >= parameters[0U].limits.minimum)
&& (!(is_available(pre_rand[premode].start, newval, pparm[2U])))) {
newval = newval - parameters[0U].limits.incr;
}
if (newval < parameters[0U].limits.minimum) {
newval = pparm[0U];
while ((newval <= parameters[0U].limits.maximum)
&& (!(is_available(pre_rand[premode].start, newval, pparm[2U])))) {
newval = newval + parameters[0U].limits.incr;
}
}
pparm[0U] = newval;
}

abort_shot();
play_state = 2U;
}
} else if (cmd == 0x04) {
lcd_updated = 1;
if ((play_mode & 2) && ((*pix == 0U) || (*pix == 2U))) {
newval = pparm[*pix] + parameters[*pix].limits.incr;
if (newval <= parameters[*pix].limits.maximum) {

if (preset_type == 0)
premode = 0;
else if (preset_type == 1U)
premode = 7;
else if (preset_type == 2) {
if (preset[2].twolnrw == 0)
premode = 13;
else if (preset[2].twolnrw == 1)
premode = 16;
else if (preset[2].twolnrw == 2)
premode = 19;
else if (preset[2].twolnrw == 3)
premode = 22;
}
else if (preset_type == 3)
premode = 25;
premode += ((preset_type == 3) ? 0 : preset[preset_type].value[preset_type+6]);
if (is_available(pre_rand[premode].start, (*pix==0U)?newval:pparm[0U], (*pix==2U)?newval:pparm[2U])) {


if ((preset_type == 1U || (preset_type == 2 && preset[2].twolnrw == 1))
&& *pix==0U && newval >= parameters[*pix].limits.maximum) {
dashes = 1 << (*pix);
}
else {
pparm[*pix] = newval;
dashes = 0;
if (preset_type <= 1U) {
abort_shot();
play_state = 2U;
}
}
} else {
dashes = 1 << (*pix);
}
}


} else if ((play_mode & 8) && (*pix == 2U) && (pparm[0U] == 70)) {
dashes = 1 << (*pix);

# 585
} else if ((play_mode & 8) && (*pix == 0U)
&& (pparm[*pix] + parameters[*pix].limits.incr == 70) && (pparm[2U] !=0)) {

pparm[*pix] += parameters[*pix].limits.incr;
pparm[2U] = 0;


} else {

inc1:

pparm[*pix] += parameters[*pix].limits.incr;

if ((*pix <= 5U) && (*pix != 4U)) {
if (pparm[*pix] > parameters[*pix].limits.maximum)
pparm[*pix] = parameters[*pix].limits.maximum;
} else {
if (pparm[*pix] > parameters[*pix].limits.maximum)
pparm[*pix] = parameters[*pix].limits.minimum;
}


if (*pix == 7U && ((model_type == 2U) || (model_type == 5U))){


if ((pparm[*pix] == 1) || (pparm[*pix] == 3) || (pparm[*pix] == 4)) {

goto inc1;
}
}
}

# 626
if (((*pix >= 6U) && (*pix != 8U)) || (*pix == 4U)) {




if (preset_type == 0)
premode = 0;
else if (preset_type == 1U)
premode = 7;
else if (preset_type == 2) {
if (preset[2].twolnrw == 0)
premode = 13;
else if (preset[2].twolnrw == 1)
premode = 16;
else if (preset[2].twolnrw == 2)
premode = 19;
else if (preset[2].twolnrw == 3)
premode = 22;
}
premode += ((preset_type == 3) ? 0 : preset[preset_type].value[preset_type+6]);
if (!(is_available(pre_rand[premode].start, pparm[0U], pparm[2U]))) {

# 674
newval = pparm[0U];
while ((newval <= parameters[0U].limits.maximum)
&& (!(is_available(pre_rand[premode].start, newval, pparm[2U])))) {
newval = newval + parameters[0U].limits.incr;
}
if (newval > parameters[0U].limits.maximum) {
newval = pparm[0U];
while ((newval >= parameters[0U].limits.minimum)
&& (!(is_available(pre_rand[premode].start, newval, pparm[2U])))) {
newval = newval - parameters[0U].limits.incr;
}
}
pparm[0U] = newval;
}
abort_shot();
play_state = 2U;
}
}
if (mask & (((1U << 6U)|(1U << 7U)|0x100|0x200)|(0x400|0x800|0x1000|0x2000|0x4000|0x8000|0x10000|0x20000|0x40000|0x80000|0x100000|0x200000))) {
ln = 1;
if ((mask & (0x200|(0x400|0x800|0x1000|0x2000|0x4000|0x8000|0x10000|0x20000|0x40000|0x80000|0x100000|0x200000))) && lcd_updated) {
clear_lcd(0xf);
}
} else {
ln = 0;
}

for (i=0,cmsk=1; i<=(ushort)(16+5); i++) {
if (tmsk & cmsk) {
if (cmsk & (0x200|(0x400|0x800|0x1000|0x2000|0x4000|0x8000|0x10000|0x20000|0x40000|0x80000|0x100000|0x200000))) {
ln = 0;
}

# 711
if ((play_mode & 8) || ((play_mode & 2) && (preset_type == 2))) {
if (i == 5U)
k = 3;
else
k = (parameters[i].line != 0) ? parameters[i].line : ln & 3;
if ((play_mode & 2) && (preset_type == 2)) {
if (i == 8U)
k = 0;
}
} else {
k = ln & 3;
}
strncpy(&lcd_line[k][parameters[i].text_start],



(char*)parm_fmt[i][(*pix == i) ? 1 : 0],parameters[i].text_size);


ln++;
if (!(play_mode & 8) && (i == 2U)) {
strcpy(&lcd_line[k][8],"        ");
}
if (i == 4U) {
chartoa(preparm1base[11]+pparm[i],&lcd_line[k][parameters[i].field_locn],parameters[i].field_size);
} else if (i > 5U) {

chartoa(preparm1base[i-5U]+pparm[i],&lcd_line[k][parameters[i].field_locn],parameters[i].field_size);
} else if (parameters[i].field_size) {
if (dashes & (1<<i)) {
strncpy(&lcd_line[k][parameters[i].field_locn],"--",2);
} else {
if (i == 0U) {



chartoa(speed_trans[pparm[i]/5],&lcd_line[k][parameters[i].field_locn],parameters[i].field_size);
} else {


if ((i == 5U) && (pparm[i] == 1)) {
strncpy(&lcd_line[k][parameters[i].field_locn-1],"Random ",7);
}
else

{
chartoa(pparm[i],&lcd_line[k][parameters[i].field_locn],parameters[i].field_size);
}
}
}
}
}
cmsk <<= 1;
}
return(0);
}

# 776
char is_available(char locno, uchar spd, signed char spn)


{
char rc = 0;

rc = isLocAvail(locno, spd, spn);
if (preset_type == 1U) {
if (!rc)
rc = isLocAvail(locno+6, spd, spn);
if (!rc)
rc = isLocAvail(locno+12, spd, spn);
}
return rc;
}

# 798
char isLocAvail(char locNo, uchar spd, signed char spn)

{



const struct el04_loc* locp;


signed char method;

for (method=0; method<50; method++) {

# 816
locp = &court_locs[locNo][method];

# 831
if ((spn == locp->spin) && (spd == locp->speed)) {
break;
}
}




return ((method < 50) ? 1 : 0);
}

# 850
char getLocAvail(char locNo, uchar spd, signed char spn, char* pmeth)


{



const struct el04_loc* locp;


signed char method;

for (method=0; method<50; method++) {

# 869
locp = &court_locs[locNo][method];

# 874
if ((spn == locp->spin) && (spd == locp->speed)) {
*pmeth = method;
break;
}
}
return ((method < 50) ? 1 : 0);
}
