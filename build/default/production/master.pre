
# 1 "master.c"

# 8 "types.h"
typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned long ulong;

# 44
typedef union sc {
char c[2];
uchar uc[2];
short s;
ushort us;
} mini_variant;



typedef union ulp {
char c[4];
uchar uc[4];
short s[2];
ushort us[2];
long l;
unsigned long ul;
void *vp;
const void *cvp;
volatile void *vvp;
char *cp;
const char *ccp;
uchar *ucp;
const uchar *cucp;
short *sp;
const short *csp;
ushort *usp;
const ushort *cusp;
long *lp;
const long *clp;
ulong *unlp;
const ulong *culp;
void (*func)();
} variant;

# 90
union parm {

# 96
signed char value[9];



struct {
uchar speed;
uchar elev;



signed char spin;
signed char horiz;


uchar twolnrw;

uchar feed;

# 120
uchar col;
uchar row;

uchar width;
};
};

# 142
struct limit {
signed char minimum;
signed char maximum;
signed char incr;
};



struct motor_status {
unsigned cap1:1;
unsigned cap2:1;
unsigned HaveCmd:1;
unsigned InCmd:1;
unsigned CmdErr:1;
unsigned TickInt:1;
unsigned WaitResp:1;
unsigned a2dStarted:1;
};

# 174
struct persprog {



signed char shot[30];
signed char method[30];



char feed[30];

char reserved;
};

# 21 "C:/Program Files (x86)/Microchip/xc8/v1.33/include\htc.h"
extern const char __xc8_OPTIM_SPEED;

#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 47 "C:/Program Files (x86)/Microchip/xc8/v1.33/include\pic18f6722.h"
extern volatile unsigned char SSP2CON2 @ 0xF62;

asm("SSP2CON2 equ 0F62h");


typedef union {
struct {
unsigned SEN :1;
unsigned RSEN :1;
unsigned PEN :1;
unsigned RCEN :1;
unsigned ACKEN :1;
unsigned ACKDT :1;
unsigned ACKSTAT :1;
unsigned GCEN :1;
};
struct {
unsigned SEN2 :1;
unsigned RSEN2 :1;
unsigned PEN2 :1;
unsigned RCEN2 :1;
unsigned ACKEN2 :1;
unsigned ACKDT2 :1;
unsigned ACKSTAT2 :1;
unsigned GCEN2 :1;
};
struct {
unsigned :1;
unsigned ADMSK12 :1;
};
struct {
unsigned :2;
unsigned ADMSK22 :1;
};
struct {
unsigned :3;
unsigned ADMSK32 :1;
};
struct {
unsigned :4;
unsigned ADMSK42 :1;
};
struct {
unsigned :5;
unsigned ADMSK52 :1;
};
} SSP2CON2bits_t;
extern volatile SSP2CON2bits_t SSP2CON2bits @ 0xF62;

# 203
extern volatile unsigned char SSP2CON1 @ 0xF63;

asm("SSP2CON1 equ 0F63h");


typedef union {
struct {
unsigned SSPM :4;
unsigned CKP :1;
unsigned SSPEN :1;
unsigned SSPOV :1;
unsigned WCOL :1;
};
struct {
unsigned SSPM0 :1;
unsigned SSPM1 :1;
unsigned SSPM2 :1;
unsigned SSPM3 :1;
};
struct {
unsigned SSPM02 :1;
unsigned SSPM12 :1;
unsigned SSPM22 :1;
unsigned SSPM32 :1;
unsigned CKP2 :1;
unsigned SSPEN2 :1;
unsigned SSPOV2 :1;
unsigned WCOL2 :1;
};
} SSP2CON1bits_t;
extern volatile SSP2CON1bits_t SSP2CON1bits @ 0xF63;

# 322
extern volatile unsigned char SSP2STAT @ 0xF64;

asm("SSP2STAT equ 0F64h");


typedef union {
struct {
unsigned :2;
unsigned R_NOT_W :1;
};
struct {
unsigned :5;
unsigned D_NOT_A :1;
};
struct {
unsigned BF :1;
unsigned UA :1;
unsigned R_nW :1;
unsigned S :1;
unsigned P :1;
unsigned D_nA :1;
unsigned CKE :1;
unsigned SMP :1;
};
struct {
unsigned :2;
unsigned R_NOT_W :1;
};
struct {
unsigned :5;
unsigned D_NOT_A :1;
};
struct {
unsigned :2;
unsigned R_W :1;
unsigned :2;
unsigned D_A :1;
};
struct {
unsigned :2;
unsigned I2C_READ :1;
unsigned I2C_START :1;
unsigned I2C_STOP :1;
unsigned I2C_DAT :1;
};
struct {
unsigned :2;
unsigned nW :1;
unsigned :2;
unsigned nA :1;
};
struct {
unsigned :2;
unsigned NOT_WRITE :1;
};
struct {
unsigned :5;
unsigned NOT_ADDRESS :1;
};
struct {
unsigned :2;
unsigned nWRITE :1;
unsigned :2;
unsigned nADDRESS :1;
};
struct {
unsigned :2;
unsigned READ_WRITE :1;
unsigned :2;
unsigned DATA_ADDRESS :1;
};
struct {
unsigned :2;
unsigned R :1;
unsigned :2;
unsigned D :1;
};
struct {
unsigned BF2 :1;
unsigned UA2 :1;
unsigned RW2 :1;
unsigned START2 :1;
unsigned STOP2 :1;
unsigned DA2 :1;
unsigned CKE2 :1;
unsigned SMP2 :1;
};
struct {
unsigned :5;
unsigned DATA_ADDRESS2 :1;
};
struct {
unsigned :5;
unsigned D_A2 :1;
};
struct {
unsigned :5;
unsigned D_nA2 :1;
};
struct {
unsigned :5;
unsigned I2C_DAT2 :1;
};
struct {
unsigned :2;
unsigned I2C_READ2 :1;
};
struct {
unsigned :3;
unsigned I2C_START2 :1;
};
struct {
unsigned :4;
unsigned I2C_STOP2 :1;
};
struct {
unsigned :4;
unsigned P2 :1;
};
struct {
unsigned :2;
unsigned READ_WRITE2 :1;
};
struct {
unsigned :2;
unsigned R_W2 :1;
};
struct {
unsigned :2;
unsigned R_nW2 :1;
};
struct {
unsigned :3;
unsigned S2 :1;
};
struct {
unsigned :5;
unsigned nA2 :1;
};
struct {
unsigned :5;
unsigned nADDRESS2 :1;
};
struct {
unsigned :2;
unsigned nW2 :1;
};
struct {
unsigned :2;
unsigned nWRITE2 :1;
};
} SSP2STATbits_t;
extern volatile SSP2STATbits_t SSP2STATbits @ 0xF64;

# 728
extern volatile unsigned char SSP2ADD @ 0xF65;

asm("SSP2ADD equ 0F65h");


typedef union {
struct {
unsigned MSK02 :1;
};
struct {
unsigned :1;
unsigned MSK12 :1;
};
struct {
unsigned :2;
unsigned MSK22 :1;
};
struct {
unsigned :3;
unsigned MSK32 :1;
};
struct {
unsigned :4;
unsigned MSK42 :1;
};
struct {
unsigned :5;
unsigned MSK52 :1;
};
struct {
unsigned :6;
unsigned MSK62 :1;
};
struct {
unsigned :7;
unsigned MSK72 :1;
};
} SSP2ADDbits_t;
extern volatile SSP2ADDbits_t SSP2ADDbits @ 0xF65;

# 810
extern volatile unsigned char SSP2BUF @ 0xF66;

asm("SSP2BUF equ 0F66h");



extern volatile unsigned char ECCP2DEL @ 0xF67;

asm("ECCP2DEL equ 0F67h");


typedef union {
struct {
unsigned P2DC :7;
unsigned P2RSEN :1;
};
struct {
unsigned P2DC0 :1;
unsigned P2DC1 :1;
unsigned P2DC2 :1;
unsigned P2DC3 :1;
unsigned P2DC4 :1;
unsigned P2DC5 :1;
unsigned P2DC6 :1;
};
struct {
unsigned PDC0 :1;
unsigned PDC1 :1;
unsigned PDC2 :1;
unsigned PDC3 :1;
unsigned PDC4 :1;
unsigned PDC5 :1;
unsigned PDC6 :1;
unsigned PRSEN :1;
};
} ECCP2DELbits_t;
extern volatile ECCP2DELbits_t ECCP2DELbits @ 0xF67;

# 935
extern volatile unsigned char ECCP2AS @ 0xF68;

asm("ECCP2AS equ 0F68h");


typedef union {
struct {
unsigned PSS2BD :2;
unsigned PSS2AC :2;
unsigned ECCP2AS :3;
unsigned ECCP2ASE :1;
};
struct {
unsigned PSS2BD0 :1;
unsigned PSS2BD1 :1;
unsigned PSS2AC0 :1;
unsigned PSS2AC1 :1;
unsigned ECCP2AS0 :1;
unsigned ECCP2AS1 :1;
unsigned ECCP2AS2 :1;
};
struct {
unsigned PSSBD0 :1;
unsigned PSSBD1 :1;
unsigned PSSAC0 :1;
unsigned PSSAC1 :1;
unsigned ECCPAS0 :1;
unsigned ECCPAS1 :1;
unsigned ECCPAS2 :1;
unsigned ECCPASE :1;
};
} ECCP2ASbits_t;
extern volatile ECCP2ASbits_t ECCP2ASbits @ 0xF68;

# 1066
extern volatile unsigned char ECCP3DEL @ 0xF69;

asm("ECCP3DEL equ 0F69h");


typedef union {
struct {
unsigned P3DC :7;
unsigned P3RSEN :1;
};
struct {
unsigned P3DC0 :1;
unsigned P3DC1 :1;
unsigned P3DC2 :1;
unsigned P3DC3 :1;
unsigned P3DC4 :1;
unsigned P3DC5 :1;
unsigned P3DC6 :1;
};
struct {
unsigned PDC0 :1;
unsigned PDC1 :1;
unsigned PDC2 :1;
unsigned PDC3 :1;
unsigned PDC4 :1;
unsigned PDC5 :1;
unsigned PDC6 :1;
unsigned PRSEN :1;
};
} ECCP3DELbits_t;
extern volatile ECCP3DELbits_t ECCP3DELbits @ 0xF69;

# 1185
extern volatile unsigned char ECCP3AS @ 0xF6A;

asm("ECCP3AS equ 0F6Ah");


typedef union {
struct {
unsigned PSS3BD :2;
unsigned PSS3AC :2;
unsigned ECCP3AS :3;
unsigned ECCP3ASE :1;
};
struct {
unsigned PSS3BD0 :1;
unsigned PSS3BD1 :1;
unsigned PSS3AC0 :1;
unsigned PSS3AC1 :1;
unsigned ECCP3AS0 :1;
unsigned ECCP3AS1 :1;
unsigned ECCP3AS2 :1;
};
struct {
unsigned PSSBD0 :1;
unsigned PSSBD1 :1;
unsigned PSSAC0 :1;
unsigned PSSAC1 :1;
unsigned ECCPAS0 :1;
unsigned ECCPAS1 :1;
unsigned ECCPAS2 :1;
unsigned ECCPASE :1;
};
} ECCP3ASbits_t;
extern volatile ECCP3ASbits_t ECCP3ASbits @ 0xF6A;

# 1316
extern volatile unsigned char RCSTA2 @ 0xF6B;

asm("RCSTA2 equ 0F6Bh");


typedef union {
struct {
unsigned RX9D :1;
unsigned OERR :1;
unsigned FERR :1;
unsigned ADDEN :1;
unsigned CREN :1;
unsigned SREN :1;
unsigned RX9 :1;
unsigned SPEN :1;
};
struct {
unsigned RCD8 :1;
unsigned :5;
unsigned RC9 :1;
};
struct {
unsigned :6;
unsigned NOT_RC8 :1;
};
struct {
unsigned :6;
unsigned nRC8 :1;
};
struct {
unsigned :6;
unsigned RC8_9 :1;
};
struct {
unsigned RX9D2 :1;
unsigned OERR2 :1;
unsigned FERR2 :1;
unsigned ADDEN2 :1;
unsigned CREN2 :1;
unsigned SREN2 :1;
unsigned RX92 :1;
unsigned SPEN2 :1;
};
struct {
unsigned :6;
unsigned RC8_92 :1;
};
struct {
unsigned :6;
unsigned RC92 :1;
};
struct {
unsigned RCD82 :1;
};
} RCSTA2bits_t;
extern volatile RCSTA2bits_t RCSTA2bits @ 0xF6B;

# 1495
extern volatile unsigned char TXSTA2 @ 0xF6C;

asm("TXSTA2 equ 0F6Ch");


typedef union {
struct {
unsigned TX9D :1;
unsigned TRMT :1;
unsigned BRGH :1;
unsigned SENDB :1;
unsigned SYNC :1;
unsigned TXEN :1;
unsigned TX9 :1;
unsigned CSRC :1;
};
struct {
unsigned TXD8 :1;
unsigned :5;
unsigned TX8_9 :1;
};
struct {
unsigned :6;
unsigned NOT_TX8 :1;
};
struct {
unsigned :6;
unsigned nTX8 :1;
};
struct {
unsigned TX9D2 :1;
unsigned TRMT2 :1;
unsigned BRGH2 :1;
unsigned SENDB2 :1;
unsigned SYNC2 :1;
unsigned TXEN2 :1;
unsigned TX92 :1;
unsigned CSRC2 :1;
};
struct {
unsigned :6;
unsigned TX8_92 :1;
};
struct {
unsigned TXD82 :1;
};
} TXSTA2bits_t;
extern volatile TXSTA2bits_t TXSTA2bits @ 0xF6C;

# 1656
extern volatile unsigned char TXREG2 @ 0xF6D;

asm("TXREG2 equ 0F6Dh");



extern volatile unsigned char RCREG2 @ 0xF6E;

asm("RCREG2 equ 0F6Eh");



extern volatile unsigned char SPBRG2 @ 0xF6F;

asm("SPBRG2 equ 0F6Fh");



extern volatile unsigned char CCP5CON @ 0xF70;

asm("CCP5CON equ 0F70h");


typedef union {
struct {
unsigned CCP5M :4;
unsigned DC5B :2;
};
struct {
unsigned CCP5M0 :1;
unsigned CCP5M1 :1;
unsigned CCP5M2 :1;
unsigned CCP5M3 :1;
unsigned DCCP5Y :1;
unsigned DCCP5X :1;
};
struct {
unsigned :4;
unsigned DC5B0 :1;
unsigned DC5B1 :1;
};
} CCP5CONbits_t;
extern volatile CCP5CONbits_t CCP5CONbits @ 0xF70;

# 1752
extern volatile unsigned short CCPR5 @ 0xF71;

asm("CCPR5 equ 0F71h");



extern volatile unsigned char CCPR5L @ 0xF71;

asm("CCPR5L equ 0F71h");



extern volatile unsigned char CCPR5H @ 0xF72;

asm("CCPR5H equ 0F72h");



extern volatile unsigned char CCP4CON @ 0xF73;

asm("CCP4CON equ 0F73h");


typedef union {
struct {
unsigned CCP4M :4;
unsigned DC4B :2;
};
struct {
unsigned CCP4M0 :1;
unsigned CCP4M1 :1;
unsigned CCP4M2 :1;
unsigned CCP4M3 :1;
unsigned DCCP4Y :1;
unsigned DCCP4X :1;
};
struct {
unsigned :4;
unsigned DC4B0 :1;
unsigned DC4B1 :1;
};
} CCP4CONbits_t;
extern volatile CCP4CONbits_t CCP4CONbits @ 0xF73;

# 1848
extern volatile unsigned short CCPR4 @ 0xF74;

asm("CCPR4 equ 0F74h");



extern volatile unsigned char CCPR4L @ 0xF74;

asm("CCPR4L equ 0F74h");



extern volatile unsigned char CCPR4H @ 0xF75;

asm("CCPR4H equ 0F75h");



extern volatile unsigned char T4CON @ 0xF76;

asm("T4CON equ 0F76h");


typedef union {
struct {
unsigned T4CKPS :2;
unsigned TMR4ON :1;
unsigned TOUTPS :4;
};
struct {
unsigned T4CKPS0 :1;
unsigned T4CKPS1 :1;
unsigned :1;
unsigned T4OUTPS0 :1;
unsigned T4OUTPS1 :1;
unsigned T4OUTPS2 :1;
unsigned T4OUTPS3 :1;
};
} T4CONbits_t;
extern volatile T4CONbits_t T4CONbits @ 0xF76;

# 1936
extern volatile unsigned char PR4 @ 0xF77;

asm("PR4 equ 0F77h");



extern volatile unsigned char TMR4 @ 0xF78;

asm("TMR4 equ 0F78h");



extern volatile unsigned char ECCP1DEL @ 0xF79;

asm("ECCP1DEL equ 0F79h");


typedef union {
struct {
unsigned P1DC :7;
unsigned P1RSEN :1;
};
struct {
unsigned P1DC0 :1;
unsigned P1DC1 :1;
unsigned P1DC2 :1;
unsigned P1DC3 :1;
unsigned P1DC4 :1;
unsigned P1DC5 :1;
unsigned P1DC6 :1;
};
struct {
unsigned PDC0 :1;
unsigned PDC1 :1;
unsigned PDC2 :1;
unsigned PDC3 :1;
unsigned PDC4 :1;
unsigned PDC5 :1;
unsigned PDC6 :1;
unsigned PRSEN :1;
};
} ECCP1DELbits_t;
extern volatile ECCP1DELbits_t ECCP1DELbits @ 0xF79;

# 2067
extern volatile unsigned char BAUDCON2 @ 0xF7C;

asm("BAUDCON2 equ 0F7Ch");


typedef union {
struct {
unsigned ABDEN :1;
unsigned WUE :1;
unsigned :1;
unsigned BRG16 :1;
unsigned SCKP :1;
unsigned :1;
unsigned RCIDL :1;
unsigned ABDOVF :1;
};
struct {
unsigned :6;
unsigned RCMT :1;
};
struct {
unsigned ABDEN2 :1;
unsigned WUE2 :1;
unsigned :1;
unsigned BRG162 :1;
unsigned SCKP2 :1;
unsigned :1;
unsigned RCIDL2 :1;
unsigned ABDOVF2 :1;
};
struct {
unsigned :6;
unsigned RCMT2 :1;
};
struct {
unsigned :4;
unsigned TXCKP2 :1;
};
} BAUDCON2bits_t;
extern volatile BAUDCON2bits_t BAUDCON2bits @ 0xF7C;

# 2185
extern volatile unsigned char SPBRGH2 @ 0xF7D;

asm("SPBRGH2 equ 0F7Dh");



extern volatile unsigned char BAUDCON1 @ 0xF7E;

asm("BAUDCON1 equ 0F7Eh");


extern volatile unsigned char BAUDCON @ 0xF7E;

asm("BAUDCON equ 0F7Eh");

extern volatile unsigned char BAUDCTL @ 0xF7E;

asm("BAUDCTL equ 0F7Eh");


typedef union {
struct {
unsigned ABDEN :1;
unsigned WUE :1;
unsigned :1;
unsigned BRG16 :1;
unsigned SCKP :1;
unsigned :1;
unsigned RCIDL :1;
unsigned ABDOVF :1;
};
struct {
unsigned :6;
unsigned RCMT :1;
};
struct {
unsigned ABDEN1 :1;
unsigned WUE1 :1;
unsigned :1;
unsigned BRG161 :1;
unsigned SCKP1 :1;
unsigned :1;
unsigned RCIDL1 :1;
unsigned ABDOVF1 :1;
};
struct {
unsigned :4;
unsigned CKTXP :1;
};
struct {
unsigned :6;
unsigned RCMT1 :1;
};
struct {
unsigned :4;
unsigned TXCKP :1;
};
struct {
unsigned :4;
unsigned TXCKP1 :1;
};
struct {
unsigned :1;
unsigned W4E :1;
};
} BAUDCON1bits_t;
extern volatile BAUDCON1bits_t BAUDCON1bits @ 0xF7E;

# 2344
typedef union {
struct {
unsigned ABDEN :1;
unsigned WUE :1;
unsigned :1;
unsigned BRG16 :1;
unsigned SCKP :1;
unsigned :1;
unsigned RCIDL :1;
unsigned ABDOVF :1;
};
struct {
unsigned :6;
unsigned RCMT :1;
};
struct {
unsigned ABDEN1 :1;
unsigned WUE1 :1;
unsigned :1;
unsigned BRG161 :1;
unsigned SCKP1 :1;
unsigned :1;
unsigned RCIDL1 :1;
unsigned ABDOVF1 :1;
};
struct {
unsigned :4;
unsigned CKTXP :1;
};
struct {
unsigned :6;
unsigned RCMT1 :1;
};
struct {
unsigned :4;
unsigned TXCKP :1;
};
struct {
unsigned :4;
unsigned TXCKP1 :1;
};
struct {
unsigned :1;
unsigned W4E :1;
};
} BAUDCONbits_t;
extern volatile BAUDCONbits_t BAUDCONbits @ 0xF7E;

# 2482
typedef union {
struct {
unsigned ABDEN :1;
unsigned WUE :1;
unsigned :1;
unsigned BRG16 :1;
unsigned SCKP :1;
unsigned :1;
unsigned RCIDL :1;
unsigned ABDOVF :1;
};
struct {
unsigned :6;
unsigned RCMT :1;
};
struct {
unsigned ABDEN1 :1;
unsigned WUE1 :1;
unsigned :1;
unsigned BRG161 :1;
unsigned SCKP1 :1;
unsigned :1;
unsigned RCIDL1 :1;
unsigned ABDOVF1 :1;
};
struct {
unsigned :4;
unsigned CKTXP :1;
};
struct {
unsigned :6;
unsigned RCMT1 :1;
};
struct {
unsigned :4;
unsigned TXCKP :1;
};
struct {
unsigned :4;
unsigned TXCKP1 :1;
};
struct {
unsigned :1;
unsigned W4E :1;
};
} BAUDCTLbits_t;
extern volatile BAUDCTLbits_t BAUDCTLbits @ 0xF7E;

# 2622
extern volatile unsigned char SPBRGH1 @ 0xF7F;

asm("SPBRGH1 equ 0F7Fh");


extern volatile unsigned char SPBRGH @ 0xF7F;

asm("SPBRGH equ 0F7Fh");



extern volatile unsigned char PORTA @ 0xF80;

asm("PORTA equ 0F80h");


typedef union {
struct {
unsigned RA0 :1;
unsigned RA1 :1;
unsigned RA2 :1;
unsigned RA3 :1;
unsigned RA4 :1;
unsigned RA5 :1;
unsigned RA6 :1;
unsigned RA7 :1;
};
struct {
unsigned :2;
unsigned VREFM :1;
unsigned VREFP :1;
unsigned T0CKI :1;
unsigned LVDIN :1;
};
struct {
unsigned AN0 :1;
unsigned AN1 :1;
unsigned AN2 :1;
unsigned AN3 :1;
unsigned :1;
unsigned AN4 :1;
};
struct {
unsigned :5;
unsigned HLVDIN :1;
};
struct {
unsigned :7;
unsigned RJPU :1;
};
struct {
unsigned ULPWUIN :1;
};
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits @ 0xF80;

# 2780
extern volatile unsigned char PORTB @ 0xF81;

asm("PORTB equ 0F81h");


typedef union {
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
struct {
unsigned INT0 :1;
unsigned INT1 :1;
unsigned INT2 :1;
unsigned INT3 :1;
unsigned KBI0 :1;
unsigned KBI1 :1;
unsigned KBI2 :1;
unsigned KBI3 :1;
};
struct {
unsigned FLT0 :1;
};
struct {
unsigned :3;
unsigned CCP2_PA2 :1;
};
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits @ 0xF81;

# 2908
extern volatile unsigned char PORTC @ 0xF82;

asm("PORTC equ 0F82h");


typedef union {
struct {
unsigned RC0 :1;
unsigned RC1 :1;
unsigned RC2 :1;
unsigned RC3 :1;
unsigned RC4 :1;
unsigned RC5 :1;
unsigned RC6 :1;
unsigned RC7 :1;
};
struct {
unsigned T1OSO :1;
unsigned T1OSI :1;
unsigned ECCP1 :1;
unsigned SCK :1;
unsigned SDI :1;
unsigned SDO :1;
unsigned TX :1;
unsigned RX :1;
};
struct {
unsigned T13CKI :1;
unsigned ECCP2 :1;
unsigned :1;
unsigned SCL :1;
unsigned SDA :1;
unsigned :1;
unsigned CK :1;
unsigned DT :1;
};
struct {
unsigned :1;
unsigned CCP2 :1;
unsigned CCP1 :1;
unsigned SCL1 :1;
unsigned SDA1 :1;
unsigned :1;
unsigned CK1 :1;
unsigned DT1 :1;
};
struct {
unsigned :1;
unsigned P2A :1;
unsigned P1A :1;
unsigned SCK1 :1;
unsigned SDI1 :1;
unsigned SDO1 :1;
unsigned TX1 :1;
unsigned RX1 :1;
};
struct {
unsigned :2;
unsigned PA1 :1;
};
struct {
unsigned :1;
unsigned PA2 :1;
};
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits @ 0xF82;

# 3162
extern volatile unsigned char PORTD @ 0xF83;

asm("PORTD equ 0F83h");


typedef union {
struct {
unsigned RD0 :1;
unsigned RD1 :1;
unsigned RD2 :1;
unsigned RD3 :1;
unsigned RD4 :1;
unsigned RD5 :1;
unsigned RD6 :1;
unsigned RD7 :1;
};
struct {
unsigned PSP0 :1;
unsigned PSP1 :1;
unsigned PSP2 :1;
unsigned PSP3 :1;
unsigned PSP4 :1;
unsigned PSP5 :1;
unsigned PSP6 :1;
unsigned PSP7 :1;
};
struct {
unsigned :5;
unsigned SDA2 :1;
unsigned SCL2 :1;
unsigned SS2 :1;
};
struct {
unsigned :7;
unsigned NOT_SS2 :1;
};
struct {
unsigned :4;
unsigned SDO2 :1;
unsigned SDI2 :1;
unsigned SCK2 :1;
unsigned nSS2 :1;
};
} PORTDbits_t;
extern volatile PORTDbits_t PORTDbits @ 0xF83;

# 3330
extern volatile unsigned char PORTE @ 0xF84;

asm("PORTE equ 0F84h");


typedef union {
struct {
unsigned RE0 :1;
unsigned RE1 :1;
unsigned RE2 :1;
unsigned RE3 :1;
unsigned RE4 :1;
unsigned RE5 :1;
unsigned RE6 :1;
unsigned RE7 :1;
};
struct {
unsigned RD :1;
unsigned WR :1;
unsigned CS :1;
unsigned :4;
unsigned ECCP2 :1;
};
struct {
unsigned NOT_RD :1;
};
struct {
unsigned :1;
unsigned NOT_WR :1;
};
struct {
unsigned :2;
unsigned NOT_CS :1;
};
struct {
unsigned nRD :1;
unsigned nWR :1;
unsigned nCS :1;
unsigned :4;
unsigned CCP2 :1;
};
struct {
unsigned P2D :1;
unsigned P2C :1;
unsigned P2B :1;
unsigned P3C :1;
unsigned P3B :1;
unsigned P1C :1;
unsigned P1B :1;
unsigned P2A :1;
};
struct {
unsigned :2;
unsigned CCP10 :1;
};
struct {
unsigned :7;
unsigned CCP2E :1;
};
struct {
unsigned :6;
unsigned CCP6E :1;
};
struct {
unsigned :5;
unsigned CCP7E :1;
};
struct {
unsigned :4;
unsigned CCP8E :1;
};
struct {
unsigned :3;
unsigned CCP9E :1;
};
struct {
unsigned :7;
unsigned PA2E :1;
};
struct {
unsigned :6;
unsigned PB1E :1;
};
struct {
unsigned :2;
unsigned PB2 :1;
};
struct {
unsigned :4;
unsigned PB3E :1;
};
struct {
unsigned :5;
unsigned PC1E :1;
};
struct {
unsigned :1;
unsigned PC2 :1;
};
struct {
unsigned :3;
unsigned PC3E :1;
};
struct {
unsigned PD2 :1;
};
struct {
unsigned RDE :1;
};
struct {
unsigned :1;
unsigned WRE :1;
};
} PORTEbits_t;
extern volatile PORTEbits_t PORTEbits @ 0xF84;

# 3663
extern volatile unsigned char PORTF @ 0xF85;

asm("PORTF equ 0F85h");


typedef union {
struct {
unsigned RF0 :1;
unsigned RF1 :1;
unsigned RF2 :1;
unsigned RF3 :1;
unsigned RF4 :1;
unsigned RF5 :1;
unsigned RF6 :1;
unsigned RF7 :1;
};
struct {
unsigned AN5 :1;
unsigned AN6 :1;
unsigned AN7 :1;
unsigned AN8 :1;
unsigned AN9 :1;
unsigned AN10 :1;
unsigned AN11 :1;
unsigned SS1 :1;
};
struct {
unsigned :7;
unsigned NOT_SS1 :1;
};
struct {
unsigned :1;
unsigned C2OUT :1;
unsigned C1OUT :1;
unsigned :2;
unsigned CVREF :1;
unsigned :1;
unsigned nSS1 :1;
};
struct {
unsigned :2;
unsigned C1OUTF :1;
};
struct {
unsigned :1;
unsigned C2OUTF :1;
};
} PORTFbits_t;
extern volatile PORTFbits_t PORTFbits @ 0xF85;

# 3830
extern volatile unsigned char PORTG @ 0xF86;

asm("PORTG equ 0F86h");


typedef union {
struct {
unsigned RG0 :1;
unsigned RG1 :1;
unsigned RG2 :1;
unsigned RG3 :1;
unsigned RG4 :1;
unsigned RG5 :1;
};
struct {
unsigned ECCP3 :1;
unsigned TX2 :1;
unsigned RX2 :1;
unsigned CCP4 :1;
unsigned CCP5 :1;
unsigned MCLR :1;
};
struct {
unsigned :5;
unsigned NOT_MCLR :1;
};
struct {
unsigned P3A :1;
unsigned CK2 :1;
unsigned DT2 :1;
unsigned P3D :1;
unsigned P1D :1;
unsigned nMCLR :1;
};
struct {
unsigned CCP3 :1;
};
struct {
unsigned :1;
unsigned C3OUTG :1;
};
struct {
unsigned :6;
unsigned RG6 :1;
};
struct {
unsigned :7;
unsigned RG7 :1;
};
struct {
unsigned :5;
unsigned RJPU :1;
};
} PORTGbits_t;
extern volatile PORTGbits_t PORTGbits @ 0xF86;

# 4008
extern volatile unsigned char LATA @ 0xF89;

asm("LATA equ 0F89h");


typedef union {
struct {
unsigned LATA0 :1;
unsigned LATA1 :1;
unsigned LATA2 :1;
unsigned LATA3 :1;
unsigned LATA4 :1;
unsigned LATA5 :1;
unsigned LATA6 :1;
unsigned LATA7 :1;
};
struct {
unsigned LA0 :1;
};
struct {
unsigned :1;
unsigned LA1 :1;
};
struct {
unsigned :2;
unsigned LA2 :1;
};
struct {
unsigned :3;
unsigned LA3 :1;
};
struct {
unsigned :4;
unsigned LA4 :1;
};
struct {
unsigned :5;
unsigned LA5 :1;
};
struct {
unsigned :6;
unsigned LA6 :1;
};
struct {
unsigned :7;
unsigned LA7 :1;
};
} LATAbits_t;
extern volatile LATAbits_t LATAbits @ 0xF89;

# 4140
extern volatile unsigned char LATB @ 0xF8A;

asm("LATB equ 0F8Ah");


typedef union {
struct {
unsigned LATB0 :1;
unsigned LATB1 :1;
unsigned LATB2 :1;
unsigned LATB3 :1;
unsigned LATB4 :1;
unsigned LATB5 :1;
unsigned LATB6 :1;
unsigned LATB7 :1;
};
struct {
unsigned LB0 :1;
};
struct {
unsigned :1;
unsigned LB1 :1;
};
struct {
unsigned :2;
unsigned LB2 :1;
};
struct {
unsigned :3;
unsigned LB3 :1;
};
struct {
unsigned :4;
unsigned LB4 :1;
};
struct {
unsigned :5;
unsigned LB5 :1;
};
struct {
unsigned :6;
unsigned LB6 :1;
};
struct {
unsigned :7;
unsigned LB7 :1;
};
} LATBbits_t;
extern volatile LATBbits_t LATBbits @ 0xF8A;

# 4272
extern volatile unsigned char LATC @ 0xF8B;

asm("LATC equ 0F8Bh");


typedef union {
struct {
unsigned LATC0 :1;
unsigned LATC1 :1;
unsigned LATC2 :1;
unsigned LATC3 :1;
unsigned LATC4 :1;
unsigned LATC5 :1;
unsigned LATC6 :1;
unsigned LATC7 :1;
};
struct {
unsigned LC0 :1;
};
struct {
unsigned :1;
unsigned LC1 :1;
};
struct {
unsigned :2;
unsigned LC2 :1;
};
struct {
unsigned :3;
unsigned LC3 :1;
};
struct {
unsigned :4;
unsigned LC4 :1;
};
struct {
unsigned :5;
unsigned LC5 :1;
};
struct {
unsigned :6;
unsigned LC6 :1;
};
struct {
unsigned :7;
unsigned LC7 :1;
};
} LATCbits_t;
extern volatile LATCbits_t LATCbits @ 0xF8B;

# 4404
extern volatile unsigned char LATD @ 0xF8C;

asm("LATD equ 0F8Ch");


typedef union {
struct {
unsigned LATD0 :1;
unsigned LATD1 :1;
unsigned LATD2 :1;
unsigned LATD3 :1;
unsigned LATD4 :1;
unsigned LATD5 :1;
unsigned LATD6 :1;
unsigned LATD7 :1;
};
struct {
unsigned LD0 :1;
};
struct {
unsigned :1;
unsigned LD1 :1;
};
struct {
unsigned :2;
unsigned LD2 :1;
};
struct {
unsigned :3;
unsigned LD3 :1;
};
struct {
unsigned :4;
unsigned LD4 :1;
};
struct {
unsigned :5;
unsigned LD5 :1;
};
struct {
unsigned :6;
unsigned LD6 :1;
};
struct {
unsigned :7;
unsigned LD7 :1;
};
} LATDbits_t;
extern volatile LATDbits_t LATDbits @ 0xF8C;

# 4536
extern volatile unsigned char LATE @ 0xF8D;

asm("LATE equ 0F8Dh");


typedef union {
struct {
unsigned LATE0 :1;
unsigned LATE1 :1;
unsigned LATE2 :1;
unsigned LATE3 :1;
unsigned LATE4 :1;
unsigned LATE5 :1;
unsigned LATE6 :1;
unsigned LATE7 :1;
};
struct {
unsigned LE0 :1;
};
struct {
unsigned :1;
unsigned LE1 :1;
};
struct {
unsigned :2;
unsigned LE2 :1;
};
struct {
unsigned :3;
unsigned LE3 :1;
};
struct {
unsigned :4;
unsigned LE4 :1;
};
struct {
unsigned :5;
unsigned LE5 :1;
};
struct {
unsigned :6;
unsigned LE6 :1;
};
struct {
unsigned :7;
unsigned LE7 :1;
};
} LATEbits_t;
extern volatile LATEbits_t LATEbits @ 0xF8D;

# 4668
extern volatile unsigned char LATF @ 0xF8E;

asm("LATF equ 0F8Eh");


typedef union {
struct {
unsigned LATF0 :1;
unsigned LATF1 :1;
unsigned LATF2 :1;
unsigned LATF3 :1;
unsigned LATF4 :1;
unsigned LATF5 :1;
unsigned LATF6 :1;
unsigned LATF7 :1;
};
struct {
unsigned LF0 :1;
};
struct {
unsigned :1;
unsigned LF1 :1;
};
struct {
unsigned :2;
unsigned LF2 :1;
};
struct {
unsigned :3;
unsigned LF3 :1;
};
struct {
unsigned :4;
unsigned LF4 :1;
};
struct {
unsigned :5;
unsigned LF5 :1;
};
struct {
unsigned :6;
unsigned LF6 :1;
};
struct {
unsigned :7;
unsigned LF7 :1;
};
} LATFbits_t;
extern volatile LATFbits_t LATFbits @ 0xF8E;

# 4800
extern volatile unsigned char LATG @ 0xF8F;

asm("LATG equ 0F8Fh");


typedef union {
struct {
unsigned LATG0 :1;
unsigned LATG1 :1;
unsigned LATG2 :1;
unsigned LATG3 :1;
unsigned LATG4 :1;
unsigned LATG5 :1;
};
struct {
unsigned LG0 :1;
};
struct {
unsigned :1;
unsigned LG1 :1;
};
struct {
unsigned :2;
unsigned LG2 :1;
};
struct {
unsigned :3;
unsigned LG3 :1;
};
struct {
unsigned :4;
unsigned LG4 :1;
};
} LATGbits_t;
extern volatile LATGbits_t LATGbits @ 0xF8F;

# 4893
extern volatile unsigned char TRISA @ 0xF92;

asm("TRISA equ 0F92h");


extern volatile unsigned char DDRA @ 0xF92;

asm("DDRA equ 0F92h");


typedef union {
struct {
unsigned TRISA0 :1;
unsigned TRISA1 :1;
unsigned TRISA2 :1;
unsigned TRISA3 :1;
unsigned TRISA4 :1;
unsigned TRISA5 :1;
unsigned TRISA6 :1;
unsigned TRISA7 :1;
};
struct {
unsigned RA0 :1;
unsigned RA1 :1;
unsigned RA2 :1;
unsigned RA3 :1;
unsigned RA4 :1;
unsigned RA5 :1;
unsigned RA6 :1;
unsigned RA7 :1;
};
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits @ 0xF92;

# 5008
typedef union {
struct {
unsigned TRISA0 :1;
unsigned TRISA1 :1;
unsigned TRISA2 :1;
unsigned TRISA3 :1;
unsigned TRISA4 :1;
unsigned TRISA5 :1;
unsigned TRISA6 :1;
unsigned TRISA7 :1;
};
struct {
unsigned RA0 :1;
unsigned RA1 :1;
unsigned RA2 :1;
unsigned RA3 :1;
unsigned RA4 :1;
unsigned RA5 :1;
unsigned RA6 :1;
unsigned RA7 :1;
};
} DDRAbits_t;
extern volatile DDRAbits_t DDRAbits @ 0xF92;

# 5114
extern volatile unsigned char TRISB @ 0xF93;

asm("TRISB equ 0F93h");


extern volatile unsigned char DDRB @ 0xF93;

asm("DDRB equ 0F93h");


typedef union {
struct {
unsigned TRISB0 :1;
unsigned TRISB1 :1;
unsigned TRISB2 :1;
unsigned TRISB3 :1;
unsigned TRISB4 :1;
unsigned TRISB5 :1;
unsigned TRISB6 :1;
unsigned TRISB7 :1;
};
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits @ 0xF93;

# 5229
typedef union {
struct {
unsigned TRISB0 :1;
unsigned TRISB1 :1;
unsigned TRISB2 :1;
unsigned TRISB3 :1;
unsigned TRISB4 :1;
unsigned TRISB5 :1;
unsigned TRISB6 :1;
unsigned TRISB7 :1;
};
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
} DDRBbits_t;
extern volatile DDRBbits_t DDRBbits @ 0xF93;

# 5335
extern volatile unsigned char TRISC @ 0xF94;

asm("TRISC equ 0F94h");


extern volatile unsigned char DDRC @ 0xF94;

asm("DDRC equ 0F94h");


typedef union {
struct {
unsigned TRISC0 :1;
unsigned TRISC1 :1;
unsigned TRISC2 :1;
unsigned TRISC3 :1;
unsigned TRISC4 :1;
unsigned TRISC5 :1;
unsigned TRISC6 :1;
unsigned TRISC7 :1;
};
struct {
unsigned RC0 :1;
unsigned RC1 :1;
unsigned RC2 :1;
unsigned RC3 :1;
unsigned RC4 :1;
unsigned RC5 :1;
unsigned RC6 :1;
unsigned RC7 :1;
};
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits @ 0xF94;

# 5450
typedef union {
struct {
unsigned TRISC0 :1;
unsigned TRISC1 :1;
unsigned TRISC2 :1;
unsigned TRISC3 :1;
unsigned TRISC4 :1;
unsigned TRISC5 :1;
unsigned TRISC6 :1;
unsigned TRISC7 :1;
};
struct {
unsigned RC0 :1;
unsigned RC1 :1;
unsigned RC2 :1;
unsigned RC3 :1;
unsigned RC4 :1;
unsigned RC5 :1;
unsigned RC6 :1;
unsigned RC7 :1;
};
} DDRCbits_t;
extern volatile DDRCbits_t DDRCbits @ 0xF94;

# 5556
extern volatile unsigned char TRISD @ 0xF95;

asm("TRISD equ 0F95h");


extern volatile unsigned char DDRD @ 0xF95;

asm("DDRD equ 0F95h");


typedef union {
struct {
unsigned TRISD0 :1;
unsigned TRISD1 :1;
unsigned TRISD2 :1;
unsigned TRISD3 :1;
unsigned TRISD4 :1;
unsigned TRISD5 :1;
unsigned TRISD6 :1;
unsigned TRISD7 :1;
};
struct {
unsigned RD0 :1;
unsigned RD1 :1;
unsigned RD2 :1;
unsigned RD3 :1;
unsigned RD4 :1;
unsigned RD5 :1;
unsigned RD6 :1;
unsigned RD7 :1;
};
} TRISDbits_t;
extern volatile TRISDbits_t TRISDbits @ 0xF95;

# 5671
typedef union {
struct {
unsigned TRISD0 :1;
unsigned TRISD1 :1;
unsigned TRISD2 :1;
unsigned TRISD3 :1;
unsigned TRISD4 :1;
unsigned TRISD5 :1;
unsigned TRISD6 :1;
unsigned TRISD7 :1;
};
struct {
unsigned RD0 :1;
unsigned RD1 :1;
unsigned RD2 :1;
unsigned RD3 :1;
unsigned RD4 :1;
unsigned RD5 :1;
unsigned RD6 :1;
unsigned RD7 :1;
};
} DDRDbits_t;
extern volatile DDRDbits_t DDRDbits @ 0xF95;

# 5777
extern volatile unsigned char TRISE @ 0xF96;

asm("TRISE equ 0F96h");


extern volatile unsigned char DDRE @ 0xF96;

asm("DDRE equ 0F96h");


typedef union {
struct {
unsigned TRISE0 :1;
unsigned TRISE1 :1;
unsigned TRISE2 :1;
unsigned TRISE3 :1;
unsigned TRISE4 :1;
unsigned TRISE5 :1;
unsigned TRISE6 :1;
unsigned TRISE7 :1;
};
struct {
unsigned RE0 :1;
unsigned RE1 :1;
unsigned RE2 :1;
unsigned RE3 :1;
unsigned RE4 :1;
unsigned RE5 :1;
unsigned RE6 :1;
unsigned RE7 :1;
};
} TRISEbits_t;
extern volatile TRISEbits_t TRISEbits @ 0xF96;

# 5892
typedef union {
struct {
unsigned TRISE0 :1;
unsigned TRISE1 :1;
unsigned TRISE2 :1;
unsigned TRISE3 :1;
unsigned TRISE4 :1;
unsigned TRISE5 :1;
unsigned TRISE6 :1;
unsigned TRISE7 :1;
};
struct {
unsigned RE0 :1;
unsigned RE1 :1;
unsigned RE2 :1;
unsigned RE3 :1;
unsigned RE4 :1;
unsigned RE5 :1;
unsigned RE6 :1;
unsigned RE7 :1;
};
} DDREbits_t;
extern volatile DDREbits_t DDREbits @ 0xF96;

# 5998
extern volatile unsigned char TRISF @ 0xF97;

asm("TRISF equ 0F97h");


extern volatile unsigned char DDRF @ 0xF97;

asm("DDRF equ 0F97h");


typedef union {
struct {
unsigned TRISF0 :1;
unsigned TRISF1 :1;
unsigned TRISF2 :1;
unsigned TRISF3 :1;
unsigned TRISF4 :1;
unsigned TRISF5 :1;
unsigned TRISF6 :1;
unsigned TRISF7 :1;
};
struct {
unsigned RF0 :1;
unsigned RF1 :1;
unsigned RF2 :1;
unsigned RF3 :1;
unsigned RF4 :1;
unsigned RF5 :1;
unsigned RF6 :1;
unsigned RF7 :1;
};
} TRISFbits_t;
extern volatile TRISFbits_t TRISFbits @ 0xF97;

# 6113
typedef union {
struct {
unsigned TRISF0 :1;
unsigned TRISF1 :1;
unsigned TRISF2 :1;
unsigned TRISF3 :1;
unsigned TRISF4 :1;
unsigned TRISF5 :1;
unsigned TRISF6 :1;
unsigned TRISF7 :1;
};
struct {
unsigned RF0 :1;
unsigned RF1 :1;
unsigned RF2 :1;
unsigned RF3 :1;
unsigned RF4 :1;
unsigned RF5 :1;
unsigned RF6 :1;
unsigned RF7 :1;
};
} DDRFbits_t;
extern volatile DDRFbits_t DDRFbits @ 0xF97;

# 6219
extern volatile unsigned char TRISG @ 0xF98;

asm("TRISG equ 0F98h");


extern volatile unsigned char DDRG @ 0xF98;

asm("DDRG equ 0F98h");


typedef union {
struct {
unsigned TRISG0 :1;
unsigned TRISG1 :1;
unsigned TRISG2 :1;
unsigned TRISG3 :1;
unsigned TRISG4 :1;
};
struct {
unsigned RG0 :1;
unsigned RG1 :1;
unsigned RG2 :1;
unsigned RG3 :1;
unsigned RG4 :1;
};
} TRISGbits_t;
extern volatile TRISGbits_t TRISGbits @ 0xF98;

# 6298
typedef union {
struct {
unsigned TRISG0 :1;
unsigned TRISG1 :1;
unsigned TRISG2 :1;
unsigned TRISG3 :1;
unsigned TRISG4 :1;
};
struct {
unsigned RG0 :1;
unsigned RG1 :1;
unsigned RG2 :1;
unsigned RG3 :1;
unsigned RG4 :1;
};
} DDRGbits_t;
extern volatile DDRGbits_t DDRGbits @ 0xF98;

# 6368
extern volatile unsigned char OSCTUNE @ 0xF9B;

asm("OSCTUNE equ 0F9Bh");


typedef union {
struct {
unsigned TUN :5;
unsigned :1;
unsigned PLLEN :1;
unsigned INTSRC :1;
};
struct {
unsigned TUN0 :1;
unsigned TUN1 :1;
unsigned TUN2 :1;
unsigned TUN3 :1;
unsigned TUN4 :1;
};
} OSCTUNEbits_t;
extern volatile OSCTUNEbits_t OSCTUNEbits @ 0xF9B;

# 6432
extern volatile unsigned char PIE1 @ 0xF9D;

asm("PIE1 equ 0F9Dh");


typedef union {
struct {
unsigned TMR1IE :1;
unsigned TMR2IE :1;
unsigned CCP1IE :1;
unsigned SSP1IE :1;
unsigned TX1IE :1;
unsigned RC1IE :1;
unsigned ADIE :1;
unsigned PSPIE :1;
};
struct {
unsigned :3;
unsigned SSPIE :1;
unsigned TXIE :1;
unsigned RCIE :1;
};
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits @ 0xF9D;

# 6514
extern volatile unsigned char PIR1 @ 0xF9E;

asm("PIR1 equ 0F9Eh");


typedef union {
struct {
unsigned TMR1IF :1;
unsigned TMR2IF :1;
unsigned CCP1IF :1;
unsigned SSP1IF :1;
unsigned TX1IF :1;
unsigned RC1IF :1;
unsigned ADIF :1;
unsigned PSPIF :1;
};
struct {
unsigned :3;
unsigned SSPIF :1;
unsigned TXIF :1;
unsigned RCIF :1;
};
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits @ 0xF9E;

# 6596
extern volatile unsigned char IPR1 @ 0xF9F;

asm("IPR1 equ 0F9Fh");


typedef union {
struct {
unsigned TMR1IP :1;
unsigned TMR2IP :1;
unsigned CCP1IP :1;
unsigned SSP1IP :1;
unsigned TX1IP :1;
unsigned RC1IP :1;
unsigned ADIP :1;
unsigned PSPIP :1;
};
struct {
unsigned :3;
unsigned SSPIP :1;
unsigned TXIP :1;
unsigned RCIP :1;
};
} IPR1bits_t;
extern volatile IPR1bits_t IPR1bits @ 0xF9F;

# 6678
extern volatile unsigned char PIE2 @ 0xFA0;

asm("PIE2 equ 0FA0h");


typedef union {
struct {
unsigned CCP2IE :1;
unsigned TMR3IE :1;
unsigned HLVDIE :1;
unsigned BCL1IE :1;
unsigned EEIE :1;
unsigned :1;
unsigned CMIE :1;
unsigned OSCFIE :1;
};
struct {
unsigned :2;
unsigned LVDIE :1;
unsigned BCLIE :1;
};
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits @ 0xFA0;

# 6749
extern volatile unsigned char PIR2 @ 0xFA1;

asm("PIR2 equ 0FA1h");


typedef union {
struct {
unsigned CCP2IF :1;
unsigned TMR3IF :1;
unsigned HLVDIF :1;
unsigned BCL1IF :1;
unsigned EEIF :1;
unsigned :1;
unsigned CMIF :1;
unsigned OSCFIF :1;
};
struct {
unsigned :2;
unsigned LVDIF :1;
unsigned BCLIF :1;
};
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits @ 0xFA1;

# 6820
extern volatile unsigned char IPR2 @ 0xFA2;

asm("IPR2 equ 0FA2h");


typedef union {
struct {
unsigned CCP2IP :1;
unsigned TMR3IP :1;
unsigned HLVDIP :1;
unsigned BCL1IP :1;
unsigned EEIP :1;
unsigned :1;
unsigned CMIP :1;
unsigned OSCFIP :1;
};
struct {
unsigned :2;
unsigned LVDIP :1;
unsigned BCLIP :1;
};
} IPR2bits_t;
extern volatile IPR2bits_t IPR2bits @ 0xFA2;

# 6891
extern volatile unsigned char PIE3 @ 0xFA3;

asm("PIE3 equ 0FA3h");


typedef union {
struct {
unsigned CCP3IE :1;
unsigned CCP4IE :1;
unsigned CCP5IE :1;
unsigned TMR4IE :1;
unsigned TX2IE :1;
unsigned RC2IE :1;
unsigned BCL2IE :1;
unsigned SSP2IE :1;
};
struct {
unsigned RXB0IE :1;
};
struct {
unsigned :1;
unsigned RXB1IE :1;
};
struct {
unsigned :1;
unsigned RXBNIE :1;
};
struct {
unsigned :2;
unsigned TXB0IE :1;
};
struct {
unsigned :3;
unsigned TXB1IE :1;
};
struct {
unsigned :4;
unsigned TXB2IE :1;
};
struct {
unsigned :4;
unsigned TXBNIE :1;
};
} PIE3bits_t;
extern volatile PIE3bits_t PIE3bits @ 0xFA3;

# 7014
extern volatile unsigned char PIR3 @ 0xFA4;

asm("PIR3 equ 0FA4h");


typedef union {
struct {
unsigned CCP3IF :1;
unsigned CCP4IF :1;
unsigned CCP5IF :1;
unsigned TMR4IF :1;
unsigned TX2IF :1;
unsigned RC2IF :1;
unsigned BCL2IF :1;
unsigned SSP2IF :1;
};
struct {
unsigned :1;
unsigned RXBNIF :1;
};
struct {
unsigned :4;
unsigned TXBNIF :1;
};
} PIR3bits_t;
extern volatile PIR3bits_t PIR3bits @ 0xFA4;

# 7093
extern volatile unsigned char IPR3 @ 0xFA5;

asm("IPR3 equ 0FA5h");


typedef union {
struct {
unsigned CCP3IP :1;
unsigned CCP4IP :1;
unsigned CCP5IP :1;
unsigned TMR4IP :1;
unsigned TX2IP :1;
unsigned RC2IP :1;
unsigned BCL2IP :1;
unsigned SSP2IP :1;
};
struct {
unsigned :1;
unsigned RXBNIP :1;
};
struct {
unsigned :4;
unsigned TXBNIP :1;
};
} IPR3bits_t;
extern volatile IPR3bits_t IPR3bits @ 0xFA5;

# 7172
extern volatile unsigned char EECON1 @ 0xFA6;

asm("EECON1 equ 0FA6h");


typedef union {
struct {
unsigned RD :1;
unsigned WR :1;
unsigned WREN :1;
unsigned WRERR :1;
unsigned FREE :1;
unsigned :1;
unsigned CFGS :1;
unsigned EEPGD :1;
};
struct {
unsigned :6;
unsigned EEFS :1;
};
} EECON1bits_t;
extern volatile EECON1bits_t EECON1bits @ 0xFA6;

# 7237
extern volatile unsigned char EECON2 @ 0xFA7;

asm("EECON2 equ 0FA7h");



extern volatile unsigned char EEDATA @ 0xFA8;

asm("EEDATA equ 0FA8h");



extern volatile unsigned char EEADR @ 0xFA9;

asm("EEADR equ 0FA9h");



extern volatile unsigned char EEADRH @ 0xFAA;

asm("EEADRH equ 0FAAh");



extern volatile unsigned char RCSTA1 @ 0xFAB;

asm("RCSTA1 equ 0FABh");


extern volatile unsigned char RCSTA @ 0xFAB;

asm("RCSTA equ 0FABh");


typedef union {
struct {
unsigned RX9D :1;
unsigned OERR :1;
unsigned FERR :1;
unsigned ADDEN :1;
unsigned CREN :1;
unsigned SREN :1;
unsigned RX9 :1;
unsigned SPEN :1;
};
struct {
unsigned RCD8 :1;
unsigned :5;
unsigned RC9 :1;
};
struct {
unsigned :6;
unsigned NOT_RC8 :1;
};
struct {
unsigned :6;
unsigned nRC8 :1;
};
struct {
unsigned :6;
unsigned RC8_9 :1;
};
struct {
unsigned RX9D1 :1;
unsigned OERR1 :1;
unsigned FERR1 :1;
unsigned ADDEN1 :1;
unsigned CREN1 :1;
unsigned SREN1 :1;
unsigned RX91 :1;
unsigned SPEN1 :1;
};
struct {
unsigned :5;
unsigned SRENA :1;
};
} RCSTA1bits_t;
extern volatile RCSTA1bits_t RCSTA1bits @ 0xFAB;

# 7427
typedef union {
struct {
unsigned RX9D :1;
unsigned OERR :1;
unsigned FERR :1;
unsigned ADDEN :1;
unsigned CREN :1;
unsigned SREN :1;
unsigned RX9 :1;
unsigned SPEN :1;
};
struct {
unsigned RCD8 :1;
unsigned :5;
unsigned RC9 :1;
};
struct {
unsigned :6;
unsigned NOT_RC8 :1;
};
struct {
unsigned :6;
unsigned nRC8 :1;
};
struct {
unsigned :6;
unsigned RC8_9 :1;
};
struct {
unsigned RX9D1 :1;
unsigned OERR1 :1;
unsigned FERR1 :1;
unsigned ADDEN1 :1;
unsigned CREN1 :1;
unsigned SREN1 :1;
unsigned RX91 :1;
unsigned SPEN1 :1;
};
struct {
unsigned :5;
unsigned SRENA :1;
};
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits @ 0xFAB;

# 7584
extern volatile unsigned char TXSTA1 @ 0xFAC;

asm("TXSTA1 equ 0FACh");


extern volatile unsigned char TXSTA @ 0xFAC;

asm("TXSTA equ 0FACh");


typedef union {
struct {
unsigned TX9D :1;
unsigned TRMT :1;
unsigned BRGH :1;
unsigned SENDB :1;
unsigned SYNC :1;
unsigned TXEN :1;
unsigned TX9 :1;
unsigned CSRC :1;
};
struct {
unsigned TXD8 :1;
unsigned :5;
unsigned TX8_9 :1;
};
struct {
unsigned :6;
unsigned NOT_TX8 :1;
};
struct {
unsigned :6;
unsigned nTX8 :1;
};
struct {
unsigned TX9D1 :1;
unsigned TRMT1 :1;
unsigned BRGH1 :1;
unsigned SENDB1 :1;
unsigned SYNC1 :1;
unsigned TXEN1 :1;
unsigned TX91 :1;
unsigned CSRC1 :1;
};
} TXSTA1bits_t;
extern volatile TXSTA1bits_t TXSTA1bits @ 0xFAC;

# 7732
typedef union {
struct {
unsigned TX9D :1;
unsigned TRMT :1;
unsigned BRGH :1;
unsigned SENDB :1;
unsigned SYNC :1;
unsigned TXEN :1;
unsigned TX9 :1;
unsigned CSRC :1;
};
struct {
unsigned TXD8 :1;
unsigned :5;
unsigned TX8_9 :1;
};
struct {
unsigned :6;
unsigned NOT_TX8 :1;
};
struct {
unsigned :6;
unsigned nTX8 :1;
};
struct {
unsigned TX9D1 :1;
unsigned TRMT1 :1;
unsigned BRGH1 :1;
unsigned SENDB1 :1;
unsigned SYNC1 :1;
unsigned TXEN1 :1;
unsigned TX91 :1;
unsigned CSRC1 :1;
};
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits @ 0xFAC;

# 7871
extern volatile unsigned char TXREG1 @ 0xFAD;

asm("TXREG1 equ 0FADh");


extern volatile unsigned char TXREG @ 0xFAD;

asm("TXREG equ 0FADh");



extern volatile unsigned char RCREG1 @ 0xFAE;

asm("RCREG1 equ 0FAEh");


extern volatile unsigned char RCREG @ 0xFAE;

asm("RCREG equ 0FAEh");



extern volatile unsigned char SPBRG1 @ 0xFAF;

asm("SPBRG1 equ 0FAFh");


extern volatile unsigned char SPBRG @ 0xFAF;

asm("SPBRG equ 0FAFh");



extern volatile unsigned char PSPCON @ 0xFB0;

asm("PSPCON equ 0FB0h");


typedef union {
struct {
unsigned :4;
unsigned PSPMODE :1;
unsigned IBOV :1;
unsigned OBF :1;
unsigned IBF :1;
};
} PSPCONbits_t;
extern volatile PSPCONbits_t PSPCONbits @ 0xFB0;

# 7942
extern volatile unsigned char T3CON @ 0xFB1;

asm("T3CON equ 0FB1h");


typedef union {
struct {
unsigned :2;
unsigned NOT_T3SYNC :1;
};
struct {
unsigned TMR3ON :1;
unsigned TMR3CS :1;
unsigned nT3SYNC :1;
unsigned T3CCP1 :1;
unsigned T3CKPS :2;
unsigned T3CCP2 :1;
unsigned RD16 :1;
};
struct {
unsigned :2;
unsigned T3SYNC :1;
unsigned :1;
unsigned T3CKPS0 :1;
unsigned T3CKPS1 :1;
};
struct {
unsigned :2;
unsigned T3INSYNC :1;
};
struct {
unsigned :7;
unsigned RD163 :1;
};
struct {
unsigned :3;
unsigned SOSCEN3 :1;
};
struct {
unsigned :7;
unsigned T3RD16 :1;
};
} T3CONbits_t;
extern volatile T3CONbits_t T3CONbits @ 0xFB1;

# 8064
extern volatile unsigned short TMR3 @ 0xFB2;

asm("TMR3 equ 0FB2h");



extern volatile unsigned char TMR3L @ 0xFB2;

asm("TMR3L equ 0FB2h");



extern volatile unsigned char TMR3H @ 0xFB3;

asm("TMR3H equ 0FB3h");



extern volatile unsigned char CMCON @ 0xFB4;

asm("CMCON equ 0FB4h");


typedef union {
struct {
unsigned CM :3;
unsigned CIS :1;
unsigned C1INV :1;
unsigned C2INV :1;
unsigned C1OUT :1;
unsigned C2OUT :1;
};
struct {
unsigned CM0 :1;
unsigned CM1 :1;
unsigned CM2 :1;
};
struct {
unsigned CMEN0 :1;
};
struct {
unsigned :1;
unsigned CMEN1 :1;
};
struct {
unsigned :2;
unsigned CMEN2 :1;
};
} CMCONbits_t;
extern volatile CMCONbits_t CMCONbits @ 0xFB4;

# 8177
extern volatile unsigned char CVRCON @ 0xFB5;

asm("CVRCON equ 0FB5h");


typedef union {
struct {
unsigned CVR :4;
unsigned CVRSS :1;
unsigned CVRR :1;
unsigned CVROE :1;
unsigned CVREN :1;
};
struct {
unsigned CVR0 :1;
unsigned CVR1 :1;
unsigned CVR2 :1;
unsigned CVR3 :1;
};
struct {
unsigned :6;
unsigned CVROEN :1;
};
} CVRCONbits_t;
extern volatile CVRCONbits_t CVRCONbits @ 0xFB5;

# 8255
extern volatile unsigned char ECCP1AS @ 0xFB6;

asm("ECCP1AS equ 0FB6h");


typedef union {
struct {
unsigned PSS1BD :2;
unsigned PSS1AC :2;
unsigned ECCP1AS :3;
unsigned ECCP1ASE :1;
};
struct {
unsigned PSS1BD0 :1;
unsigned PSS1BD1 :1;
unsigned PSS1AC0 :1;
unsigned PSS1AC1 :1;
unsigned ECCP1AS0 :1;
unsigned ECCP1AS1 :1;
unsigned ECCP1AS2 :1;
};
struct {
unsigned PSSBD0 :1;
unsigned PSSBD1 :1;
unsigned PSSAC0 :1;
unsigned PSSAC1 :1;
unsigned ECCPAS0 :1;
unsigned ECCPAS1 :1;
unsigned ECCPAS2 :1;
unsigned ECCPASE :1;
};
} ECCP1ASbits_t;
extern volatile ECCP1ASbits_t ECCP1ASbits @ 0xFB6;

# 8386
extern volatile unsigned char CCP3CON @ 0xFB7;

asm("CCP3CON equ 0FB7h");


extern volatile unsigned char ECCP3CON @ 0xFB7;

asm("ECCP3CON equ 0FB7h");


typedef union {
struct {
unsigned CCP3M :4;
unsigned DC3B :2;
unsigned P3M :2;
};
struct {
unsigned CCP3M0 :1;
unsigned CCP3M1 :1;
unsigned CCP3M2 :1;
unsigned CCP3M3 :1;
unsigned DC3B0 :1;
unsigned DC3B1 :1;
unsigned P3M0 :1;
unsigned P3M1 :1;
};
struct {
unsigned :4;
unsigned CCP3Y :1;
unsigned CCP3X :1;
};
} CCP3CONbits_t;
extern volatile CCP3CONbits_t CCP3CONbits @ 0xFB7;

# 8486
typedef union {
struct {
unsigned CCP3M :4;
unsigned DC3B :2;
unsigned P3M :2;
};
struct {
unsigned CCP3M0 :1;
unsigned CCP3M1 :1;
unsigned CCP3M2 :1;
unsigned CCP3M3 :1;
unsigned DC3B0 :1;
unsigned DC3B1 :1;
unsigned P3M0 :1;
unsigned P3M1 :1;
};
struct {
unsigned :4;
unsigned CCP3Y :1;
unsigned CCP3X :1;
};
} ECCP3CONbits_t;
extern volatile ECCP3CONbits_t ECCP3CONbits @ 0xFB7;

# 8577
extern volatile unsigned short CCPR3 @ 0xFB8;

asm("CCPR3 equ 0FB8h");



extern volatile unsigned char CCPR3L @ 0xFB8;

asm("CCPR3L equ 0FB8h");



extern volatile unsigned char CCPR3H @ 0xFB9;

asm("CCPR3H equ 0FB9h");



extern volatile unsigned char CCP2CON @ 0xFBA;

asm("CCP2CON equ 0FBAh");


extern volatile unsigned char ECCP2CON @ 0xFBA;

asm("ECCP2CON equ 0FBAh");


typedef union {
struct {
unsigned CCP2M :4;
unsigned DC2B :2;
unsigned P2M :2;
};
struct {
unsigned CCP2M0 :1;
unsigned CCP2M1 :1;
unsigned CCP2M2 :1;
unsigned CCP2M3 :1;
unsigned DC2B0 :1;
unsigned DC2B1 :1;
unsigned P2M0 :1;
unsigned P2M1 :1;
};
struct {
unsigned :4;
unsigned CCP2Y :1;
unsigned CCP2X :1;
};
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits @ 0xFBA;

# 8695
typedef union {
struct {
unsigned CCP2M :4;
unsigned DC2B :2;
unsigned P2M :2;
};
struct {
unsigned CCP2M0 :1;
unsigned CCP2M1 :1;
unsigned CCP2M2 :1;
unsigned CCP2M3 :1;
unsigned DC2B0 :1;
unsigned DC2B1 :1;
unsigned P2M0 :1;
unsigned P2M1 :1;
};
struct {
unsigned :4;
unsigned CCP2Y :1;
unsigned CCP2X :1;
};
} ECCP2CONbits_t;
extern volatile ECCP2CONbits_t ECCP2CONbits @ 0xFBA;

# 8786
extern volatile unsigned short CCPR2 @ 0xFBB;

asm("CCPR2 equ 0FBBh");



extern volatile unsigned char CCPR2L @ 0xFBB;

asm("CCPR2L equ 0FBBh");



extern volatile unsigned char CCPR2H @ 0xFBC;

asm("CCPR2H equ 0FBCh");



extern volatile unsigned char CCP1CON @ 0xFBD;

asm("CCP1CON equ 0FBDh");


extern volatile unsigned char ECCP1CON @ 0xFBD;

asm("ECCP1CON equ 0FBDh");


typedef union {
struct {
unsigned CCP1M :4;
unsigned DC1B :2;
unsigned P1M :2;
};
struct {
unsigned CCP1M0 :1;
unsigned CCP1M1 :1;
unsigned CCP1M2 :1;
unsigned CCP1M3 :1;
unsigned DC1B0 :1;
unsigned DC1B1 :1;
unsigned P1M0 :1;
unsigned P1M1 :1;
};
struct {
unsigned :4;
unsigned CCP1Y :1;
unsigned CCP1X :1;
};
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits @ 0xFBD;

# 8904
typedef union {
struct {
unsigned CCP1M :4;
unsigned DC1B :2;
unsigned P1M :2;
};
struct {
unsigned CCP1M0 :1;
unsigned CCP1M1 :1;
unsigned CCP1M2 :1;
unsigned CCP1M3 :1;
unsigned DC1B0 :1;
unsigned DC1B1 :1;
unsigned P1M0 :1;
unsigned P1M1 :1;
};
struct {
unsigned :4;
unsigned CCP1Y :1;
unsigned CCP1X :1;
};
} ECCP1CONbits_t;
extern volatile ECCP1CONbits_t ECCP1CONbits @ 0xFBD;

# 8995
extern volatile unsigned short CCPR1 @ 0xFBE;

asm("CCPR1 equ 0FBEh");



extern volatile unsigned char CCPR1L @ 0xFBE;

asm("CCPR1L equ 0FBEh");



extern volatile unsigned char CCPR1H @ 0xFBF;

asm("CCPR1H equ 0FBFh");



extern volatile unsigned char ADCON2 @ 0xFC0;

asm("ADCON2 equ 0FC0h");


typedef union {
struct {
unsigned ADCS :3;
unsigned ACQT :3;
unsigned :1;
unsigned ADFM :1;
};
struct {
unsigned ADCS0 :1;
unsigned ADCS1 :1;
unsigned ADCS2 :1;
unsigned ACQT0 :1;
unsigned ACQT1 :1;
unsigned ACQT2 :1;
};
} ADCON2bits_t;
extern volatile ADCON2bits_t ADCON2bits @ 0xFC0;

# 9083
extern volatile unsigned char ADCON1 @ 0xFC1;

asm("ADCON1 equ 0FC1h");


typedef union {
struct {
unsigned PCFG :4;
unsigned VCFG :2;
};
struct {
unsigned PCFG0 :1;
unsigned PCFG1 :1;
unsigned PCFG2 :1;
unsigned PCFG3 :1;
unsigned VCFG0 :1;
unsigned VCFG1 :1;
};
struct {
unsigned :3;
unsigned CHSN3 :1;
};
struct {
unsigned :4;
unsigned VCFG01 :1;
};
struct {
unsigned :5;
unsigned VCFG11 :1;
};
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits @ 0xFC1;

# 9173
extern volatile unsigned char ADCON0 @ 0xFC2;

asm("ADCON0 equ 0FC2h");


typedef union {
struct {
unsigned :1;
unsigned GO_NOT_DONE :1;
};
struct {
unsigned ADON :1;
unsigned GO_nDONE :1;
unsigned CHS :4;
};
struct {
unsigned :1;
unsigned GO_NOT_DONE :1;
};
struct {
unsigned :1;
unsigned DONE :1;
};
struct {
unsigned :1;
unsigned GO_DONE :1;
unsigned CHS0 :1;
unsigned CHS1 :1;
unsigned CHS2 :1;
unsigned CHS3 :1;
};
struct {
unsigned :1;
unsigned GO :1;
};
struct {
unsigned :1;
unsigned NOT_DONE :1;
};
struct {
unsigned :1;
unsigned nDONE :1;
};
struct {
unsigned :1;
unsigned GODONE :1;
};
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits @ 0xFC2;

# 9295
extern volatile unsigned short ADRES @ 0xFC3;

asm("ADRES equ 0FC3h");



extern volatile unsigned char ADRESL @ 0xFC3;

asm("ADRESL equ 0FC3h");



extern volatile unsigned char ADRESH @ 0xFC4;

asm("ADRESH equ 0FC4h");



extern volatile unsigned char SSP1CON2 @ 0xFC5;

asm("SSP1CON2 equ 0FC5h");


extern volatile unsigned char SSPCON2 @ 0xFC5;

asm("SSPCON2 equ 0FC5h");


typedef union {
struct {
unsigned SEN :1;
unsigned RSEN :1;
unsigned PEN :1;
unsigned RCEN :1;
unsigned ACKEN :1;
unsigned ACKDT :1;
unsigned ACKSTAT :1;
unsigned GCEN :1;
};
struct {
unsigned :5;
unsigned ACKDT1 :1;
};
struct {
unsigned :4;
unsigned ACKEN1 :1;
};
struct {
unsigned :6;
unsigned ACKSTAT1 :1;
};
struct {
unsigned :1;
unsigned ADMSK1 :1;
};
struct {
unsigned :1;
unsigned ADMSK11 :1;
};
struct {
unsigned :2;
unsigned ADMSK2 :1;
};
struct {
unsigned :2;
unsigned ADMSK21 :1;
};
struct {
unsigned :3;
unsigned ADMSK3 :1;
};
struct {
unsigned :3;
unsigned ADMSK31 :1;
};
struct {
unsigned :4;
unsigned ADMSK4 :1;
};
struct {
unsigned :4;
unsigned ADMSK41 :1;
};
struct {
unsigned :5;
unsigned ADMSK5 :1;
};
struct {
unsigned :5;
unsigned ADMSK51 :1;
};
struct {
unsigned :7;
unsigned GCEN1 :1;
};
struct {
unsigned :2;
unsigned PEN1 :1;
};
struct {
unsigned :3;
unsigned RCEN1 :1;
};
struct {
unsigned :1;
unsigned RSEN1 :1;
};
struct {
unsigned SEN1 :1;
};
} SSP1CON2bits_t;
extern volatile SSP1CON2bits_t SSP1CON2bits @ 0xFC5;

# 9539
typedef union {
struct {
unsigned SEN :1;
unsigned RSEN :1;
unsigned PEN :1;
unsigned RCEN :1;
unsigned ACKEN :1;
unsigned ACKDT :1;
unsigned ACKSTAT :1;
unsigned GCEN :1;
};
struct {
unsigned :5;
unsigned ACKDT1 :1;
};
struct {
unsigned :4;
unsigned ACKEN1 :1;
};
struct {
unsigned :6;
unsigned ACKSTAT1 :1;
};
struct {
unsigned :1;
unsigned ADMSK1 :1;
};
struct {
unsigned :1;
unsigned ADMSK11 :1;
};
struct {
unsigned :2;
unsigned ADMSK2 :1;
};
struct {
unsigned :2;
unsigned ADMSK21 :1;
};
struct {
unsigned :3;
unsigned ADMSK3 :1;
};
struct {
unsigned :3;
unsigned ADMSK31 :1;
};
struct {
unsigned :4;
unsigned ADMSK4 :1;
};
struct {
unsigned :4;
unsigned ADMSK41 :1;
};
struct {
unsigned :5;
unsigned ADMSK5 :1;
};
struct {
unsigned :5;
unsigned ADMSK51 :1;
};
struct {
unsigned :7;
unsigned GCEN1 :1;
};
struct {
unsigned :2;
unsigned PEN1 :1;
};
struct {
unsigned :3;
unsigned RCEN1 :1;
};
struct {
unsigned :1;
unsigned RSEN1 :1;
};
struct {
unsigned SEN1 :1;
};
} SSPCON2bits_t;
extern volatile SSPCON2bits_t SSPCON2bits @ 0xFC5;

# 9756
extern volatile unsigned char SSP1CON1 @ 0xFC6;

asm("SSP1CON1 equ 0FC6h");


extern volatile unsigned char SSPCON1 @ 0xFC6;

asm("SSPCON1 equ 0FC6h");


typedef union {
struct {
unsigned SSPM :4;
unsigned CKP :1;
unsigned SSPEN :1;
unsigned SSPOV :1;
unsigned WCOL :1;
};
struct {
unsigned SSPM0 :1;
unsigned SSPM1 :1;
unsigned SSPM2 :1;
unsigned SSPM3 :1;
};
struct {
unsigned :4;
unsigned CKP1 :1;
};
struct {
unsigned :5;
unsigned SSPEN1 :1;
};
struct {
unsigned SSPM01 :1;
};
struct {
unsigned :1;
unsigned SSPM11 :1;
};
struct {
unsigned :2;
unsigned SSPM21 :1;
};
struct {
unsigned :3;
unsigned SSPM31 :1;
};
struct {
unsigned :6;
unsigned SSPOV1 :1;
};
struct {
unsigned :7;
unsigned WCOL1 :1;
};
} SSP1CON1bits_t;
extern volatile SSP1CON1bits_t SSP1CON1bits @ 0xFC6;

# 9900
typedef union {
struct {
unsigned SSPM :4;
unsigned CKP :1;
unsigned SSPEN :1;
unsigned SSPOV :1;
unsigned WCOL :1;
};
struct {
unsigned SSPM0 :1;
unsigned SSPM1 :1;
unsigned SSPM2 :1;
unsigned SSPM3 :1;
};
struct {
unsigned :4;
unsigned CKP1 :1;
};
struct {
unsigned :5;
unsigned SSPEN1 :1;
};
struct {
unsigned SSPM01 :1;
};
struct {
unsigned :1;
unsigned SSPM11 :1;
};
struct {
unsigned :2;
unsigned SSPM21 :1;
};
struct {
unsigned :3;
unsigned SSPM31 :1;
};
struct {
unsigned :6;
unsigned SSPOV1 :1;
};
struct {
unsigned :7;
unsigned WCOL1 :1;
};
} SSPCON1bits_t;
extern volatile SSPCON1bits_t SSPCON1bits @ 0xFC6;

# 10035
extern volatile unsigned char SSP1STAT @ 0xFC7;

asm("SSP1STAT equ 0FC7h");


extern volatile unsigned char SSPSTAT @ 0xFC7;

asm("SSPSTAT equ 0FC7h");


typedef union {
struct {
unsigned :2;
unsigned R_NOT_W :1;
};
struct {
unsigned :5;
unsigned D_NOT_A :1;
};
struct {
unsigned BF :1;
unsigned UA :1;
unsigned R_nW :1;
unsigned S :1;
unsigned P :1;
unsigned D_nA :1;
unsigned CKE :1;
unsigned SMP :1;
};
struct {
unsigned :2;
unsigned R_NOT_W :1;
};
struct {
unsigned :5;
unsigned D_NOT_A :1;
};
struct {
unsigned :2;
unsigned R_W :1;
unsigned :2;
unsigned D_A :1;
};
struct {
unsigned :2;
unsigned I2C_READ :1;
unsigned I2C_START :1;
unsigned I2C_STOP :1;
unsigned I2C_DAT :1;
};
struct {
unsigned :2;
unsigned nW :1;
unsigned :2;
unsigned nA :1;
};
struct {
unsigned :2;
unsigned NOT_WRITE :1;
};
struct {
unsigned :5;
unsigned NOT_ADDRESS :1;
};
struct {
unsigned :2;
unsigned nWRITE :1;
unsigned :2;
unsigned nADDRESS :1;
};
struct {
unsigned :2;
unsigned READ_WRITE :1;
unsigned :2;
unsigned DATA_ADDRESS :1;
};
struct {
unsigned :2;
unsigned R :1;
unsigned :2;
unsigned D :1;
};
struct {
unsigned BF1 :1;
};
struct {
unsigned :6;
unsigned CKE1 :1;
};
struct {
unsigned :5;
unsigned DA :1;
};
struct {
unsigned :5;
unsigned DA1 :1;
};
struct {
unsigned :2;
unsigned RW :1;
};
struct {
unsigned :2;
unsigned RW1 :1;
};
struct {
unsigned :7;
unsigned SMP1 :1;
};
struct {
unsigned :3;
unsigned START :1;
};
struct {
unsigned :3;
unsigned START1 :1;
};
struct {
unsigned :4;
unsigned STOP :1;
};
struct {
unsigned :4;
unsigned STOP1 :1;
};
struct {
unsigned :1;
unsigned UA1 :1;
};
struct {
unsigned :2;
unsigned NOT_W :1;
};
struct {
unsigned :5;
unsigned NOT_A :1;
};
} SSP1STATbits_t;
extern volatile SSP1STATbits_t SSP1STATbits @ 0xFC7;

# 10376
typedef union {
struct {
unsigned :2;
unsigned R_NOT_W :1;
};
struct {
unsigned :5;
unsigned D_NOT_A :1;
};
struct {
unsigned BF :1;
unsigned UA :1;
unsigned R_nW :1;
unsigned S :1;
unsigned P :1;
unsigned D_nA :1;
unsigned CKE :1;
unsigned SMP :1;
};
struct {
unsigned :2;
unsigned R_NOT_W :1;
};
struct {
unsigned :5;
unsigned D_NOT_A :1;
};
struct {
unsigned :2;
unsigned R_W :1;
unsigned :2;
unsigned D_A :1;
};
struct {
unsigned :2;
unsigned I2C_READ :1;
unsigned I2C_START :1;
unsigned I2C_STOP :1;
unsigned I2C_DAT :1;
};
struct {
unsigned :2;
unsigned nW :1;
unsigned :2;
unsigned nA :1;
};
struct {
unsigned :2;
unsigned NOT_WRITE :1;
};
struct {
unsigned :5;
unsigned NOT_ADDRESS :1;
};
struct {
unsigned :2;
unsigned nWRITE :1;
unsigned :2;
unsigned nADDRESS :1;
};
struct {
unsigned :2;
unsigned READ_WRITE :1;
unsigned :2;
unsigned DATA_ADDRESS :1;
};
struct {
unsigned :2;
unsigned R :1;
unsigned :2;
unsigned D :1;
};
struct {
unsigned BF1 :1;
};
struct {
unsigned :6;
unsigned CKE1 :1;
};
struct {
unsigned :5;
unsigned DA :1;
};
struct {
unsigned :5;
unsigned DA1 :1;
};
struct {
unsigned :2;
unsigned RW :1;
};
struct {
unsigned :2;
unsigned RW1 :1;
};
struct {
unsigned :7;
unsigned SMP1 :1;
};
struct {
unsigned :3;
unsigned START :1;
};
struct {
unsigned :3;
unsigned START1 :1;
};
struct {
unsigned :4;
unsigned STOP :1;
};
struct {
unsigned :4;
unsigned STOP1 :1;
};
struct {
unsigned :1;
unsigned UA1 :1;
};
struct {
unsigned :2;
unsigned NOT_W :1;
};
struct {
unsigned :5;
unsigned NOT_A :1;
};
} SSPSTATbits_t;
extern volatile SSPSTATbits_t SSPSTATbits @ 0xFC7;

# 10708
extern volatile unsigned char SSP1ADD @ 0xFC8;

asm("SSP1ADD equ 0FC8h");


extern volatile unsigned char SSPADD @ 0xFC8;

asm("SSPADD equ 0FC8h");


typedef union {
struct {
unsigned MSK0 :1;
};
struct {
unsigned MSK01 :1;
};
struct {
unsigned :1;
unsigned MSK1 :1;
};
struct {
unsigned :1;
unsigned MSK11 :1;
};
struct {
unsigned :2;
unsigned MSK2 :1;
};
struct {
unsigned :2;
unsigned MSK21 :1;
};
struct {
unsigned :3;
unsigned MSK3 :1;
};
struct {
unsigned :3;
unsigned MSK31 :1;
};
struct {
unsigned :4;
unsigned MSK4 :1;
};
struct {
unsigned :4;
unsigned MSK41 :1;
};
struct {
unsigned :5;
unsigned MSK5 :1;
};
struct {
unsigned :5;
unsigned MSK51 :1;
};
struct {
unsigned :6;
unsigned MSK6 :1;
};
struct {
unsigned :6;
unsigned MSK61 :1;
};
struct {
unsigned :7;
unsigned MSK7 :1;
};
struct {
unsigned :7;
unsigned MSK71 :1;
};
} SSP1ADDbits_t;
extern volatile SSP1ADDbits_t SSP1ADDbits @ 0xFC8;

# 10865
typedef union {
struct {
unsigned MSK0 :1;
};
struct {
unsigned MSK01 :1;
};
struct {
unsigned :1;
unsigned MSK1 :1;
};
struct {
unsigned :1;
unsigned MSK11 :1;
};
struct {
unsigned :2;
unsigned MSK2 :1;
};
struct {
unsigned :2;
unsigned MSK21 :1;
};
struct {
unsigned :3;
unsigned MSK3 :1;
};
struct {
unsigned :3;
unsigned MSK31 :1;
};
struct {
unsigned :4;
unsigned MSK4 :1;
};
struct {
unsigned :4;
unsigned MSK41 :1;
};
struct {
unsigned :5;
unsigned MSK5 :1;
};
struct {
unsigned :5;
unsigned MSK51 :1;
};
struct {
unsigned :6;
unsigned MSK6 :1;
};
struct {
unsigned :6;
unsigned MSK61 :1;
};
struct {
unsigned :7;
unsigned MSK7 :1;
};
struct {
unsigned :7;
unsigned MSK71 :1;
};
} SSPADDbits_t;
extern volatile SSPADDbits_t SSPADDbits @ 0xFC8;

# 11013
extern volatile unsigned char SSP1BUF @ 0xFC9;

asm("SSP1BUF equ 0FC9h");


extern volatile unsigned char SSPBUF @ 0xFC9;

asm("SSPBUF equ 0FC9h");



extern volatile unsigned char T2CON @ 0xFCA;

asm("T2CON equ 0FCAh");


typedef union {
struct {
unsigned T2CKPS :2;
unsigned TMR2ON :1;
unsigned TOUTPS :4;
};
struct {
unsigned T2CKPS0 :1;
unsigned T2CKPS1 :1;
unsigned :1;
unsigned T2OUTPS0 :1;
unsigned T2OUTPS1 :1;
unsigned T2OUTPS2 :1;
unsigned T2OUTPS3 :1;
};
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits @ 0xFCA;

# 11094
extern volatile unsigned char PR2 @ 0xFCB;

asm("PR2 equ 0FCBh");


extern volatile unsigned char MEMCON @ 0xFCB;

asm("MEMCON equ 0FCBh");


typedef union {
struct {
unsigned :7;
unsigned EBDIS :1;
};
struct {
unsigned :4;
unsigned WAIT0 :1;
};
struct {
unsigned :5;
unsigned WAIT1 :1;
};
struct {
unsigned WM0 :1;
};
struct {
unsigned :1;
unsigned WM1 :1;
};
} PR2bits_t;
extern volatile PR2bits_t PR2bits @ 0xFCB;

# 11153
typedef union {
struct {
unsigned :7;
unsigned EBDIS :1;
};
struct {
unsigned :4;
unsigned WAIT0 :1;
};
struct {
unsigned :5;
unsigned WAIT1 :1;
};
struct {
unsigned WM0 :1;
};
struct {
unsigned :1;
unsigned WM1 :1;
};
} MEMCONbits_t;
extern volatile MEMCONbits_t MEMCONbits @ 0xFCB;

# 11203
extern volatile unsigned char TMR2 @ 0xFCC;

asm("TMR2 equ 0FCCh");



extern volatile unsigned char T1CON @ 0xFCD;

asm("T1CON equ 0FCDh");


typedef union {
struct {
unsigned :2;
unsigned NOT_T1SYNC :1;
};
struct {
unsigned TMR1ON :1;
unsigned TMR1CS :1;
unsigned nT1SYNC :1;
unsigned T1OSCEN :1;
unsigned T1CKPS :2;
unsigned T1RUN :1;
unsigned RD16 :1;
};
struct {
unsigned :2;
unsigned T1SYNC :1;
unsigned :1;
unsigned T1CKPS0 :1;
unsigned T1CKPS1 :1;
};
struct {
unsigned :2;
unsigned T1INSYNC :1;
};
struct {
unsigned :3;
unsigned SOSCEN :1;
};
struct {
unsigned :7;
unsigned T1RD16 :1;
};
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits @ 0xFCD;

# 11322
extern volatile unsigned short TMR1 @ 0xFCE;

asm("TMR1 equ 0FCEh");



extern volatile unsigned char TMR1L @ 0xFCE;

asm("TMR1L equ 0FCEh");



extern volatile unsigned char TMR1H @ 0xFCF;

asm("TMR1H equ 0FCFh");



extern volatile unsigned char RCON @ 0xFD0;

asm("RCON equ 0FD0h");


typedef union {
struct {
unsigned NOT_BOR :1;
};
struct {
unsigned :1;
unsigned NOT_POR :1;
};
struct {
unsigned :2;
unsigned NOT_PD :1;
};
struct {
unsigned :3;
unsigned NOT_TO :1;
};
struct {
unsigned :4;
unsigned NOT_RI :1;
};
struct {
unsigned nBOR :1;
unsigned nPOR :1;
unsigned nPD :1;
unsigned nTO :1;
unsigned nRI :1;
unsigned :1;
unsigned SBOREN :1;
unsigned IPEN :1;
};
struct {
unsigned BOR :1;
unsigned POR :1;
unsigned PD :1;
unsigned TO :1;
unsigned RI :1;
};
} RCONbits_t;
extern volatile RCONbits_t RCONbits @ 0xFD0;

# 11472
extern volatile unsigned char WDTCON @ 0xFD1;

asm("WDTCON equ 0FD1h");


typedef union {
struct {
unsigned SWDTEN :1;
};
struct {
unsigned SWDTE :1;
};
} WDTCONbits_t;
extern volatile WDTCONbits_t WDTCONbits @ 0xFD1;

# 11499
extern volatile unsigned char HLVDCON @ 0xFD2;

asm("HLVDCON equ 0FD2h");


extern volatile unsigned char LVDCON @ 0xFD2;

asm("LVDCON equ 0FD2h");


typedef union {
struct {
unsigned HLVDL :4;
unsigned HLVDEN :1;
unsigned IRVST :1;
unsigned :1;
unsigned VDIRMAG :1;
};
struct {
unsigned HLVDL0 :1;
unsigned HLVDL1 :1;
unsigned HLVDL2 :1;
unsigned HLVDL3 :1;
unsigned :1;
unsigned IVRST :1;
};
struct {
unsigned LVV0 :1;
unsigned LVV1 :1;
unsigned LVV2 :1;
unsigned LVV3 :1;
unsigned :1;
unsigned BGST :1;
};
struct {
unsigned LVDL0 :1;
unsigned LVDL1 :1;
unsigned LVDL2 :1;
unsigned LVDL3 :1;
unsigned LVDEN :1;
};
} HLVDCONbits_t;
extern volatile HLVDCONbits_t HLVDCONbits @ 0xFD2;

# 11639
typedef union {
struct {
unsigned HLVDL :4;
unsigned HLVDEN :1;
unsigned IRVST :1;
unsigned :1;
unsigned VDIRMAG :1;
};
struct {
unsigned HLVDL0 :1;
unsigned HLVDL1 :1;
unsigned HLVDL2 :1;
unsigned HLVDL3 :1;
unsigned :1;
unsigned IVRST :1;
};
struct {
unsigned LVV0 :1;
unsigned LVV1 :1;
unsigned LVV2 :1;
unsigned LVV3 :1;
unsigned :1;
unsigned BGST :1;
};
struct {
unsigned LVDL0 :1;
unsigned LVDL1 :1;
unsigned LVDL2 :1;
unsigned LVDL3 :1;
unsigned LVDEN :1;
};
} LVDCONbits_t;
extern volatile LVDCONbits_t LVDCONbits @ 0xFD2;

# 11770
extern volatile unsigned char OSCCON @ 0xFD3;

asm("OSCCON equ 0FD3h");


typedef union {
struct {
unsigned SCS :2;
unsigned IOFS :1;
unsigned OSTS :1;
unsigned IRCF :3;
unsigned IDLEN :1;
};
struct {
unsigned SCS0 :1;
unsigned SCS1 :1;
unsigned FLTS :1;
unsigned :1;
unsigned IRCF0 :1;
unsigned IRCF1 :1;
unsigned IRCF2 :1;
};
} OSCCONbits_t;
extern volatile OSCCONbits_t OSCCONbits @ 0xFD3;

# 11852
extern volatile unsigned char T0CON @ 0xFD5;

asm("T0CON equ 0FD5h");


typedef union {
struct {
unsigned T0PS :3;
unsigned PSA :1;
unsigned T0SE :1;
unsigned T0CS :1;
unsigned T08BIT :1;
unsigned TMR0ON :1;
};
struct {
unsigned T0PS0 :1;
unsigned T0PS1 :1;
unsigned T0PS2 :1;
unsigned T0PS3 :1;
};
} T0CONbits_t;
extern volatile T0CONbits_t T0CONbits @ 0xFD5;

# 11927
extern volatile unsigned short TMR0 @ 0xFD6;

asm("TMR0 equ 0FD6h");



extern volatile unsigned char TMR0L @ 0xFD6;

asm("TMR0L equ 0FD6h");



extern volatile unsigned char TMR0H @ 0xFD7;

asm("TMR0H equ 0FD7h");



extern volatile unsigned char STATUS @ 0xFD8;

asm("STATUS equ 0FD8h");


typedef union {
struct {
unsigned C :1;
unsigned DC :1;
unsigned Z :1;
unsigned OV :1;
unsigned N :1;
};
struct {
unsigned CARRY :1;
};
struct {
unsigned :4;
unsigned NEGATIVE :1;
};
struct {
unsigned :3;
unsigned OVERFLOW :1;
};
struct {
unsigned :2;
unsigned ZERO :1;
};
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits @ 0xFD8;

# 12023
extern volatile unsigned short FSR2 @ 0xFD9;

asm("FSR2 equ 0FD9h");



extern volatile unsigned char FSR2L @ 0xFD9;

asm("FSR2L equ 0FD9h");



extern volatile unsigned char FSR2H @ 0xFDA;

asm("FSR2H equ 0FDAh");



extern volatile unsigned char PLUSW2 @ 0xFDB;

asm("PLUSW2 equ 0FDBh");



extern volatile unsigned char PREINC2 @ 0xFDC;

asm("PREINC2 equ 0FDCh");



extern volatile unsigned char POSTDEC2 @ 0xFDD;

asm("POSTDEC2 equ 0FDDh");



extern volatile unsigned char POSTINC2 @ 0xFDE;

asm("POSTINC2 equ 0FDEh");



extern volatile unsigned char INDF2 @ 0xFDF;

asm("INDF2 equ 0FDFh");



extern volatile unsigned char BSR @ 0xFE0;

asm("BSR equ 0FE0h");



extern volatile unsigned short FSR1 @ 0xFE1;

asm("FSR1 equ 0FE1h");



extern volatile unsigned char FSR1L @ 0xFE1;

asm("FSR1L equ 0FE1h");



extern volatile unsigned char FSR1H @ 0xFE2;

asm("FSR1H equ 0FE2h");



extern volatile unsigned char PLUSW1 @ 0xFE3;

asm("PLUSW1 equ 0FE3h");



extern volatile unsigned char PREINC1 @ 0xFE4;

asm("PREINC1 equ 0FE4h");



extern volatile unsigned char POSTDEC1 @ 0xFE5;

asm("POSTDEC1 equ 0FE5h");



extern volatile unsigned char POSTINC1 @ 0xFE6;

asm("POSTINC1 equ 0FE6h");



extern volatile unsigned char INDF1 @ 0xFE7;

asm("INDF1 equ 0FE7h");



extern volatile unsigned char WREG @ 0xFE8;

asm("WREG equ 0FE8h");



extern volatile unsigned short FSR0 @ 0xFE9;

asm("FSR0 equ 0FE9h");



extern volatile unsigned char FSR0L @ 0xFE9;

asm("FSR0L equ 0FE9h");



extern volatile unsigned char FSR0H @ 0xFEA;

asm("FSR0H equ 0FEAh");



extern volatile unsigned char PLUSW0 @ 0xFEB;

asm("PLUSW0 equ 0FEBh");



extern volatile unsigned char PREINC0 @ 0xFEC;

asm("PREINC0 equ 0FECh");



extern volatile unsigned char POSTDEC0 @ 0xFED;

asm("POSTDEC0 equ 0FEDh");



extern volatile unsigned char POSTINC0 @ 0xFEE;

asm("POSTINC0 equ 0FEEh");



extern volatile unsigned char INDF0 @ 0xFEF;

asm("INDF0 equ 0FEFh");



extern volatile unsigned char INTCON3 @ 0xFF0;

asm("INTCON3 equ 0FF0h");


typedef union {
struct {
unsigned INT1IF :1;
unsigned INT2IF :1;
unsigned INT3IF :1;
unsigned INT1IE :1;
unsigned INT2IE :1;
unsigned INT3IE :1;
unsigned INT1IP :1;
unsigned INT2IP :1;
};
struct {
unsigned INT1F :1;
unsigned INT2F :1;
unsigned INT3F :1;
unsigned INT1E :1;
unsigned INT2E :1;
unsigned INT3E :1;
unsigned INT1P :1;
unsigned INT2P :1;
};
} INTCON3bits_t;
extern volatile INTCON3bits_t INTCON3bits @ 0xFF0;

# 12290
extern volatile unsigned char INTCON2 @ 0xFF1;

asm("INTCON2 equ 0FF1h");


typedef union {
struct {
unsigned :7;
unsigned NOT_RBPU :1;
};
struct {
unsigned RBIP :1;
unsigned INT3IP :1;
unsigned TMR0IP :1;
unsigned INTEDG3 :1;
unsigned INTEDG2 :1;
unsigned INTEDG1 :1;
unsigned INTEDG0 :1;
unsigned nRBPU :1;
};
struct {
unsigned :1;
unsigned INT3P :1;
unsigned T0IP :1;
unsigned :4;
unsigned RBPU :1;
};
} INTCON2bits_t;
extern volatile INTCON2bits_t INTCON2bits @ 0xFF1;

# 12382
extern volatile unsigned char INTCON @ 0xFF2;

asm("INTCON equ 0FF2h");


typedef union {
struct {
unsigned RBIF :1;
unsigned INT0IF :1;
unsigned TMR0IF :1;
unsigned RBIE :1;
unsigned INT0IE :1;
unsigned TMR0IE :1;
unsigned PEIE_GIEL :1;
unsigned GIE_GIEH :1;
};
struct {
unsigned RBIF :1;
unsigned INT0IF :1;
unsigned TMR0IF :1;
unsigned RBIE :1;
unsigned INT0IE :1;
unsigned TMR0IE :1;
unsigned PEIE :1;
unsigned GIE :1;
};
struct {
unsigned RBIF :1;
unsigned INT0IF :1;
unsigned TMR0IF :1;
unsigned RBIE :1;
unsigned INT0IE :1;
unsigned TMR0IE :1;
unsigned GIEL :1;
unsigned GIEH :1;
};
struct {
unsigned :1;
unsigned INT0F :1;
unsigned T0IF :1;
unsigned :1;
unsigned INT0E :1;
unsigned T0IE :1;
unsigned PEIE :1;
unsigned GIE :1;
};
struct {
unsigned :6;
unsigned GIEL :1;
unsigned GIEH :1;
};
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits @ 0xFF2;

# 12518
extern volatile unsigned short PROD @ 0xFF3;

asm("PROD equ 0FF3h");



extern volatile unsigned char PRODL @ 0xFF3;

asm("PRODL equ 0FF3h");



extern volatile unsigned char PRODH @ 0xFF4;

asm("PRODH equ 0FF4h");



extern volatile unsigned char TABLAT @ 0xFF5;

asm("TABLAT equ 0FF5h");




extern volatile unsigned short long TBLPTR @ 0xFF6;


asm("TBLPTR equ 0FF6h");



extern volatile unsigned char TBLPTRL @ 0xFF6;

asm("TBLPTRL equ 0FF6h");



extern volatile unsigned char TBLPTRH @ 0xFF7;

asm("TBLPTRH equ 0FF7h");



extern volatile unsigned char TBLPTRU @ 0xFF8;

asm("TBLPTRU equ 0FF8h");




extern volatile unsigned short long PCLAT @ 0xFF9;


asm("PCLAT equ 0FF9h");



extern volatile unsigned short long PC @ 0xFF9;


asm("PC equ 0FF9h");



extern volatile unsigned char PCL @ 0xFF9;

asm("PCL equ 0FF9h");



extern volatile unsigned char PCLATH @ 0xFFA;

asm("PCLATH equ 0FFAh");



extern volatile unsigned char PCLATU @ 0xFFB;

asm("PCLATU equ 0FFBh");



extern volatile unsigned char STKPTR @ 0xFFC;

asm("STKPTR equ 0FFCh");


typedef union {
struct {
unsigned STKPTR :5;
unsigned :1;
unsigned STKUNF :1;
unsigned STKFUL :1;
};
struct {
unsigned STKPTR0 :1;
unsigned STKPTR1 :1;
unsigned STKPTR2 :1;
unsigned STKPTR3 :1;
unsigned STKPTR4 :1;
unsigned :2;
unsigned STKOVF :1;
};
struct {
unsigned SP0 :1;
unsigned SP1 :1;
unsigned SP2 :1;
unsigned SP3 :1;
unsigned SP4 :1;
};
} STKPTRbits_t;
extern volatile STKPTRbits_t STKPTRbits @ 0xFFC;

# 12705
extern volatile unsigned short long TOS @ 0xFFD;


asm("TOS equ 0FFDh");



extern volatile unsigned char TOSL @ 0xFFD;

asm("TOSL equ 0FFDh");



extern volatile unsigned char TOSH @ 0xFFE;

asm("TOSH equ 0FFEh");



extern volatile unsigned char TOSU @ 0xFFF;

asm("TOSU equ 0FFFh");

# 12736
extern volatile __bit ABDEN1 @ (((unsigned) &BAUDCON1)*8) + 0;

extern volatile __bit ABDEN2 @ (((unsigned) &BAUDCON2)*8) + 0;

extern volatile __bit ABDOVF1 @ (((unsigned) &BAUDCON1)*8) + 7;

extern volatile __bit ABDOVF2 @ (((unsigned) &BAUDCON2)*8) + 7;

extern volatile __bit __attribute__((__deprecated__)) ACKDT @ (((unsigned) &SSP1CON2)*8) + 5;

extern volatile __bit ACKDT1 @ (((unsigned) &SSP1CON2)*8) + 5;

extern volatile __bit ACKDT2 @ (((unsigned) &SSP2CON2)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) ACKEN @ (((unsigned) &SSP1CON2)*8) + 4;

extern volatile __bit ACKEN1 @ (((unsigned) &SSP1CON2)*8) + 4;

extern volatile __bit ACKEN2 @ (((unsigned) &SSP2CON2)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) ACKSTAT @ (((unsigned) &SSP1CON2)*8) + 6;

extern volatile __bit ACKSTAT1 @ (((unsigned) &SSP1CON2)*8) + 6;

extern volatile __bit ACKSTAT2 @ (((unsigned) &SSP2CON2)*8) + 6;

extern volatile __bit ACQT0 @ (((unsigned) &ADCON2)*8) + 3;

extern volatile __bit ACQT1 @ (((unsigned) &ADCON2)*8) + 4;

extern volatile __bit ACQT2 @ (((unsigned) &ADCON2)*8) + 5;

extern volatile __bit ADCS0 @ (((unsigned) &ADCON2)*8) + 0;

extern volatile __bit ADCS1 @ (((unsigned) &ADCON2)*8) + 1;

extern volatile __bit ADCS2 @ (((unsigned) &ADCON2)*8) + 2;

extern volatile __bit __attribute__((__deprecated__)) ADDEN @ (((unsigned) &RCSTA1)*8) + 3;

extern volatile __bit ADDEN1 @ (((unsigned) &RCSTA1)*8) + 3;

extern volatile __bit ADDEN2 @ (((unsigned) &RCSTA2)*8) + 3;

extern volatile __bit ADFM @ (((unsigned) &ADCON2)*8) + 7;

extern volatile __bit ADIE @ (((unsigned) &PIE1)*8) + 6;

extern volatile __bit ADIF @ (((unsigned) &PIR1)*8) + 6;

extern volatile __bit ADIP @ (((unsigned) &IPR1)*8) + 6;

extern volatile __bit ADMSK1 @ (((unsigned) &SSP1CON2)*8) + 1;

extern volatile __bit ADMSK11 @ (((unsigned) &SSP1CON2)*8) + 1;

extern volatile __bit ADMSK12 @ (((unsigned) &SSP2CON2)*8) + 1;

extern volatile __bit ADMSK2 @ (((unsigned) &SSP1CON2)*8) + 2;

extern volatile __bit ADMSK21 @ (((unsigned) &SSP1CON2)*8) + 2;

extern volatile __bit ADMSK22 @ (((unsigned) &SSP2CON2)*8) + 2;

extern volatile __bit ADMSK3 @ (((unsigned) &SSP1CON2)*8) + 3;

extern volatile __bit ADMSK31 @ (((unsigned) &SSP1CON2)*8) + 3;

extern volatile __bit ADMSK32 @ (((unsigned) &SSP2CON2)*8) + 3;

extern volatile __bit ADMSK4 @ (((unsigned) &SSP1CON2)*8) + 4;

extern volatile __bit ADMSK41 @ (((unsigned) &SSP1CON2)*8) + 4;

extern volatile __bit ADMSK42 @ (((unsigned) &SSP2CON2)*8) + 4;

extern volatile __bit ADMSK5 @ (((unsigned) &SSP1CON2)*8) + 5;

extern volatile __bit ADMSK51 @ (((unsigned) &SSP1CON2)*8) + 5;

extern volatile __bit ADMSK52 @ (((unsigned) &SSP2CON2)*8) + 5;

extern volatile __bit ADON @ (((unsigned) &ADCON0)*8) + 0;

extern volatile __bit AN0 @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit AN1 @ (((unsigned) &PORTA)*8) + 1;

extern volatile __bit AN10 @ (((unsigned) &PORTF)*8) + 5;

extern volatile __bit AN11 @ (((unsigned) &PORTF)*8) + 6;

extern volatile __bit AN2 @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit AN3 @ (((unsigned) &PORTA)*8) + 3;

extern volatile __bit AN4 @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit AN5 @ (((unsigned) &PORTF)*8) + 0;

extern volatile __bit AN6 @ (((unsigned) &PORTF)*8) + 1;

extern volatile __bit AN7 @ (((unsigned) &PORTF)*8) + 2;

extern volatile __bit AN8 @ (((unsigned) &PORTF)*8) + 3;

extern volatile __bit AN9 @ (((unsigned) &PORTF)*8) + 4;

extern volatile __bit BCL1IE @ (((unsigned) &PIE2)*8) + 3;

extern volatile __bit BCL1IF @ (((unsigned) &PIR2)*8) + 3;

extern volatile __bit BCL1IP @ (((unsigned) &IPR2)*8) + 3;

extern volatile __bit BCL2IE @ (((unsigned) &PIE3)*8) + 6;

extern volatile __bit BCL2IF @ (((unsigned) &PIR3)*8) + 6;

extern volatile __bit BCL2IP @ (((unsigned) &IPR3)*8) + 6;

extern volatile __bit BCLIE @ (((unsigned) &PIE2)*8) + 3;

extern volatile __bit BCLIF @ (((unsigned) &PIR2)*8) + 3;

extern volatile __bit BCLIP @ (((unsigned) &IPR2)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) BF @ (((unsigned) &SSP1STAT)*8) + 0;

extern volatile __bit BF1 @ (((unsigned) &SSP1STAT)*8) + 0;

extern volatile __bit BF2 @ (((unsigned) &SSP2STAT)*8) + 0;

extern volatile __bit BGST @ (((unsigned) &HLVDCON)*8) + 5;

extern volatile __bit BOR @ (((unsigned) &RCON)*8) + 0;

extern volatile __bit BRG161 @ (((unsigned) &BAUDCON1)*8) + 3;

extern volatile __bit BRG162 @ (((unsigned) &BAUDCON2)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) BRGH @ (((unsigned) &TXSTA1)*8) + 2;

extern volatile __bit BRGH1 @ (((unsigned) &TXSTA1)*8) + 2;

extern volatile __bit BRGH2 @ (((unsigned) &TXSTA2)*8) + 2;

extern volatile __bit C1INV @ (((unsigned) &CMCON)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) C1OUT @ (((unsigned) &CMCON)*8) + 6;

extern volatile __bit C1OUTF @ (((unsigned) &PORTF)*8) + 2;

extern volatile __bit C2INV @ (((unsigned) &CMCON)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) C2OUT @ (((unsigned) &CMCON)*8) + 7;

extern volatile __bit C2OUTF @ (((unsigned) &PORTF)*8) + 1;

extern volatile __bit C3OUTG @ (((unsigned) &PORTG)*8) + 1;

extern volatile __bit CARRY @ (((unsigned) &STATUS)*8) + 0;

extern volatile __bit CCP1 @ (((unsigned) &PORTC)*8) + 2;

extern volatile __bit CCP10 @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit CCP1IE @ (((unsigned) &PIE1)*8) + 2;

extern volatile __bit CCP1IF @ (((unsigned) &PIR1)*8) + 2;

extern volatile __bit CCP1IP @ (((unsigned) &IPR1)*8) + 2;

extern volatile __bit CCP1M0 @ (((unsigned) &CCP1CON)*8) + 0;

extern volatile __bit CCP1M1 @ (((unsigned) &CCP1CON)*8) + 1;

extern volatile __bit CCP1M2 @ (((unsigned) &CCP1CON)*8) + 2;

extern volatile __bit CCP1M3 @ (((unsigned) &CCP1CON)*8) + 3;

extern volatile __bit CCP1X @ (((unsigned) &CCP1CON)*8) + 5;

extern volatile __bit CCP1Y @ (((unsigned) &CCP1CON)*8) + 4;

extern volatile __bit CCP2E @ (((unsigned) &PORTE)*8) + 7;

extern volatile __bit CCP2IE @ (((unsigned) &PIE2)*8) + 0;

extern volatile __bit CCP2IF @ (((unsigned) &PIR2)*8) + 0;

extern volatile __bit CCP2IP @ (((unsigned) &IPR2)*8) + 0;

extern volatile __bit CCP2M0 @ (((unsigned) &CCP2CON)*8) + 0;

extern volatile __bit CCP2M1 @ (((unsigned) &CCP2CON)*8) + 1;

extern volatile __bit CCP2M2 @ (((unsigned) &CCP2CON)*8) + 2;

extern volatile __bit CCP2M3 @ (((unsigned) &CCP2CON)*8) + 3;

extern volatile __bit CCP2X @ (((unsigned) &CCP2CON)*8) + 5;

extern volatile __bit CCP2Y @ (((unsigned) &CCP2CON)*8) + 4;

extern volatile __bit CCP2_PA2 @ (((unsigned) &PORTB)*8) + 3;

extern volatile __bit CCP3 @ (((unsigned) &PORTG)*8) + 0;

extern volatile __bit CCP3IE @ (((unsigned) &PIE3)*8) + 0;

extern volatile __bit CCP3IF @ (((unsigned) &PIR3)*8) + 0;

extern volatile __bit CCP3IP @ (((unsigned) &IPR3)*8) + 0;

extern volatile __bit CCP3M0 @ (((unsigned) &CCP3CON)*8) + 0;

extern volatile __bit CCP3M1 @ (((unsigned) &CCP3CON)*8) + 1;

extern volatile __bit CCP3M2 @ (((unsigned) &CCP3CON)*8) + 2;

extern volatile __bit CCP3M3 @ (((unsigned) &CCP3CON)*8) + 3;

extern volatile __bit CCP3X @ (((unsigned) &CCP3CON)*8) + 5;

extern volatile __bit CCP3Y @ (((unsigned) &CCP3CON)*8) + 4;

extern volatile __bit CCP4 @ (((unsigned) &PORTG)*8) + 3;

extern volatile __bit CCP4IE @ (((unsigned) &PIE3)*8) + 1;

extern volatile __bit CCP4IF @ (((unsigned) &PIR3)*8) + 1;

extern volatile __bit CCP4IP @ (((unsigned) &IPR3)*8) + 1;

extern volatile __bit CCP4M0 @ (((unsigned) &CCP4CON)*8) + 0;

extern volatile __bit CCP4M1 @ (((unsigned) &CCP4CON)*8) + 1;

extern volatile __bit CCP4M2 @ (((unsigned) &CCP4CON)*8) + 2;

extern volatile __bit CCP4M3 @ (((unsigned) &CCP4CON)*8) + 3;

extern volatile __bit CCP5 @ (((unsigned) &PORTG)*8) + 4;

extern volatile __bit CCP5IE @ (((unsigned) &PIE3)*8) + 2;

extern volatile __bit CCP5IF @ (((unsigned) &PIR3)*8) + 2;

extern volatile __bit CCP5IP @ (((unsigned) &IPR3)*8) + 2;

extern volatile __bit CCP5M0 @ (((unsigned) &CCP5CON)*8) + 0;

extern volatile __bit CCP5M1 @ (((unsigned) &CCP5CON)*8) + 1;

extern volatile __bit CCP5M2 @ (((unsigned) &CCP5CON)*8) + 2;

extern volatile __bit CCP5M3 @ (((unsigned) &CCP5CON)*8) + 3;

extern volatile __bit CCP6E @ (((unsigned) &PORTE)*8) + 6;

extern volatile __bit CCP7E @ (((unsigned) &PORTE)*8) + 5;

extern volatile __bit CCP8E @ (((unsigned) &PORTE)*8) + 4;

extern volatile __bit CCP9E @ (((unsigned) &PORTE)*8) + 3;

extern volatile __bit CFGS @ (((unsigned) &EECON1)*8) + 6;

extern volatile __bit CHS0 @ (((unsigned) &ADCON0)*8) + 2;

extern volatile __bit CHS1 @ (((unsigned) &ADCON0)*8) + 3;

extern volatile __bit CHS2 @ (((unsigned) &ADCON0)*8) + 4;

extern volatile __bit CHS3 @ (((unsigned) &ADCON0)*8) + 5;

extern volatile __bit CHSN3 @ (((unsigned) &ADCON1)*8) + 3;

extern volatile __bit CIS @ (((unsigned) &CMCON)*8) + 3;

extern volatile __bit CK @ (((unsigned) &PORTC)*8) + 6;

extern volatile __bit CK1 @ (((unsigned) &PORTC)*8) + 6;

extern volatile __bit CK2 @ (((unsigned) &PORTG)*8) + 1;

extern volatile __bit __attribute__((__deprecated__)) CKE @ (((unsigned) &SSP1STAT)*8) + 6;

extern volatile __bit CKE1 @ (((unsigned) &SSP1STAT)*8) + 6;

extern volatile __bit CKE2 @ (((unsigned) &SSP2STAT)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) CKP @ (((unsigned) &SSP1CON1)*8) + 4;

extern volatile __bit CKP1 @ (((unsigned) &SSP1CON1)*8) + 4;

extern volatile __bit CKP2 @ (((unsigned) &SSP2CON1)*8) + 4;

extern volatile __bit CKTXP @ (((unsigned) &BAUDCON1)*8) + 4;

extern volatile __bit CM0 @ (((unsigned) &CMCON)*8) + 0;

extern volatile __bit CM1 @ (((unsigned) &CMCON)*8) + 1;

extern volatile __bit CM2 @ (((unsigned) &CMCON)*8) + 2;

extern volatile __bit CMEN0 @ (((unsigned) &CMCON)*8) + 0;

extern volatile __bit CMEN1 @ (((unsigned) &CMCON)*8) + 1;

extern volatile __bit CMEN2 @ (((unsigned) &CMCON)*8) + 2;

extern volatile __bit CMIE @ (((unsigned) &PIE2)*8) + 6;

extern volatile __bit CMIF @ (((unsigned) &PIR2)*8) + 6;

extern volatile __bit CMIP @ (((unsigned) &IPR2)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) CREN @ (((unsigned) &RCSTA1)*8) + 4;

extern volatile __bit CREN1 @ (((unsigned) &RCSTA1)*8) + 4;

extern volatile __bit CREN2 @ (((unsigned) &RCSTA2)*8) + 4;

extern volatile __bit CS @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit __attribute__((__deprecated__)) CSRC @ (((unsigned) &TXSTA1)*8) + 7;

extern volatile __bit CSRC1 @ (((unsigned) &TXSTA1)*8) + 7;

extern volatile __bit CSRC2 @ (((unsigned) &TXSTA2)*8) + 7;

extern volatile __bit CVR0 @ (((unsigned) &CVRCON)*8) + 0;

extern volatile __bit CVR1 @ (((unsigned) &CVRCON)*8) + 1;

extern volatile __bit CVR2 @ (((unsigned) &CVRCON)*8) + 2;

extern volatile __bit CVR3 @ (((unsigned) &CVRCON)*8) + 3;

extern volatile __bit CVREF @ (((unsigned) &PORTF)*8) + 5;

extern volatile __bit CVREN @ (((unsigned) &CVRCON)*8) + 7;

extern volatile __bit CVROE @ (((unsigned) &CVRCON)*8) + 6;

extern volatile __bit CVROEN @ (((unsigned) &CVRCON)*8) + 6;

extern volatile __bit CVRR @ (((unsigned) &CVRCON)*8) + 5;

extern volatile __bit CVRSS @ (((unsigned) &CVRCON)*8) + 4;

extern volatile __bit DA @ (((unsigned) &SSP1STAT)*8) + 5;

extern volatile __bit DA1 @ (((unsigned) &SSP1STAT)*8) + 5;

extern volatile __bit DA2 @ (((unsigned) &SSP2STAT)*8) + 5;

extern volatile __bit DATA_ADDRESS2 @ (((unsigned) &SSP2STAT)*8) + 5;

extern volatile __bit DC @ (((unsigned) &STATUS)*8) + 1;

extern volatile __bit DC1B0 @ (((unsigned) &CCP1CON)*8) + 4;

extern volatile __bit DC1B1 @ (((unsigned) &CCP1CON)*8) + 5;

extern volatile __bit DC2B0 @ (((unsigned) &CCP2CON)*8) + 4;

extern volatile __bit DC2B1 @ (((unsigned) &CCP2CON)*8) + 5;

extern volatile __bit DC3B0 @ (((unsigned) &CCP3CON)*8) + 4;

extern volatile __bit DC3B1 @ (((unsigned) &CCP3CON)*8) + 5;

extern volatile __bit DC4B0 @ (((unsigned) &CCP4CON)*8) + 4;

extern volatile __bit DC4B1 @ (((unsigned) &CCP4CON)*8) + 5;

extern volatile __bit DC5B0 @ (((unsigned) &CCP5CON)*8) + 4;

extern volatile __bit DC5B1 @ (((unsigned) &CCP5CON)*8) + 5;

extern volatile __bit DCCP4X @ (((unsigned) &CCP4CON)*8) + 5;

extern volatile __bit DCCP4Y @ (((unsigned) &CCP4CON)*8) + 4;

extern volatile __bit DCCP5X @ (((unsigned) &CCP5CON)*8) + 5;

extern volatile __bit DCCP5Y @ (((unsigned) &CCP5CON)*8) + 4;

extern volatile __bit DONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit DT @ (((unsigned) &PORTC)*8) + 7;

extern volatile __bit DT1 @ (((unsigned) &PORTC)*8) + 7;

extern volatile __bit DT2 @ (((unsigned) &PORTG)*8) + 2;

extern volatile __bit D_A2 @ (((unsigned) &SSP2STAT)*8) + 5;

extern volatile __bit D_nA2 @ (((unsigned) &SSP2STAT)*8) + 5;

extern volatile __bit EBDIS @ (((unsigned) &PR2)*8) + 7;

extern volatile __bit ECCP1 @ (((unsigned) &PORTC)*8) + 2;

extern volatile __bit ECCP1AS0 @ (((unsigned) &ECCP1AS)*8) + 4;

extern volatile __bit ECCP1AS1 @ (((unsigned) &ECCP1AS)*8) + 5;

extern volatile __bit ECCP1AS2 @ (((unsigned) &ECCP1AS)*8) + 6;

extern volatile __bit ECCP1ASE @ (((unsigned) &ECCP1AS)*8) + 7;

extern volatile __bit ECCP2AS0 @ (((unsigned) &ECCP2AS)*8) + 4;

extern volatile __bit ECCP2AS1 @ (((unsigned) &ECCP2AS)*8) + 5;

extern volatile __bit ECCP2AS2 @ (((unsigned) &ECCP2AS)*8) + 6;

extern volatile __bit ECCP2ASE @ (((unsigned) &ECCP2AS)*8) + 7;

extern volatile __bit ECCP3 @ (((unsigned) &PORTG)*8) + 0;

extern volatile __bit ECCP3AS0 @ (((unsigned) &ECCP3AS)*8) + 4;

extern volatile __bit ECCP3AS1 @ (((unsigned) &ECCP3AS)*8) + 5;

extern volatile __bit ECCP3AS2 @ (((unsigned) &ECCP3AS)*8) + 6;

extern volatile __bit ECCP3ASE @ (((unsigned) &ECCP3AS)*8) + 7;

extern volatile __bit EEFS @ (((unsigned) &EECON1)*8) + 6;

extern volatile __bit EEIE @ (((unsigned) &PIE2)*8) + 4;

extern volatile __bit EEIF @ (((unsigned) &PIR2)*8) + 4;

extern volatile __bit EEIP @ (((unsigned) &IPR2)*8) + 4;

extern volatile __bit EEPGD @ (((unsigned) &EECON1)*8) + 7;

extern volatile __bit __attribute__((__deprecated__)) FERR @ (((unsigned) &RCSTA1)*8) + 2;

extern volatile __bit FERR1 @ (((unsigned) &RCSTA1)*8) + 2;

extern volatile __bit FERR2 @ (((unsigned) &RCSTA2)*8) + 2;

extern volatile __bit FLT0 @ (((unsigned) &PORTB)*8) + 0;

extern volatile __bit FLTS @ (((unsigned) &OSCCON)*8) + 2;

extern volatile __bit FREE @ (((unsigned) &EECON1)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) GCEN @ (((unsigned) &SSP1CON2)*8) + 7;

extern volatile __bit GCEN1 @ (((unsigned) &SSP1CON2)*8) + 7;

extern volatile __bit GCEN2 @ (((unsigned) &SSP2CON2)*8) + 7;

extern volatile __bit GIE @ (((unsigned) &INTCON)*8) + 7;

extern volatile __bit GIEH @ (((unsigned) &INTCON)*8) + 7;

extern volatile __bit GIEL @ (((unsigned) &INTCON)*8) + 6;

extern volatile __bit GIE_GIEH @ (((unsigned) &INTCON)*8) + 7;

extern volatile __bit GO @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit GODONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit GO_DONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit GO_NOT_DONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit GO_nDONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit HLVDEN @ (((unsigned) &HLVDCON)*8) + 4;

extern volatile __bit HLVDIE @ (((unsigned) &PIE2)*8) + 2;

extern volatile __bit HLVDIF @ (((unsigned) &PIR2)*8) + 2;

extern volatile __bit HLVDIN @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit HLVDIP @ (((unsigned) &IPR2)*8) + 2;

extern volatile __bit HLVDL0 @ (((unsigned) &HLVDCON)*8) + 0;

extern volatile __bit HLVDL1 @ (((unsigned) &HLVDCON)*8) + 1;

extern volatile __bit HLVDL2 @ (((unsigned) &HLVDCON)*8) + 2;

extern volatile __bit HLVDL3 @ (((unsigned) &HLVDCON)*8) + 3;

extern volatile __bit I2C_DAT2 @ (((unsigned) &SSP2STAT)*8) + 5;

extern volatile __bit I2C_READ2 @ (((unsigned) &SSP2STAT)*8) + 2;

extern volatile __bit I2C_START2 @ (((unsigned) &SSP2STAT)*8) + 3;

extern volatile __bit I2C_STOP2 @ (((unsigned) &SSP2STAT)*8) + 4;

extern volatile __bit IBF @ (((unsigned) &PSPCON)*8) + 7;

extern volatile __bit IBOV @ (((unsigned) &PSPCON)*8) + 5;

extern volatile __bit IDLEN @ (((unsigned) &OSCCON)*8) + 7;

extern volatile __bit INT0 @ (((unsigned) &PORTB)*8) + 0;

extern volatile __bit INT0E @ (((unsigned) &INTCON)*8) + 4;

extern volatile __bit INT0F @ (((unsigned) &INTCON)*8) + 1;

extern volatile __bit INT0IE @ (((unsigned) &INTCON)*8) + 4;

extern volatile __bit INT0IF @ (((unsigned) &INTCON)*8) + 1;

extern volatile __bit INT1 @ (((unsigned) &PORTB)*8) + 1;

extern volatile __bit INT1E @ (((unsigned) &INTCON3)*8) + 3;

extern volatile __bit INT1F @ (((unsigned) &INTCON3)*8) + 0;

extern volatile __bit INT1IE @ (((unsigned) &INTCON3)*8) + 3;

extern volatile __bit INT1IF @ (((unsigned) &INTCON3)*8) + 0;

extern volatile __bit INT1IP @ (((unsigned) &INTCON3)*8) + 6;

extern volatile __bit INT1P @ (((unsigned) &INTCON3)*8) + 6;

extern volatile __bit INT2 @ (((unsigned) &PORTB)*8) + 2;

extern volatile __bit INT2E @ (((unsigned) &INTCON3)*8) + 4;

extern volatile __bit INT2F @ (((unsigned) &INTCON3)*8) + 1;

extern volatile __bit INT2IE @ (((unsigned) &INTCON3)*8) + 4;

extern volatile __bit INT2IF @ (((unsigned) &INTCON3)*8) + 1;

extern volatile __bit INT2IP @ (((unsigned) &INTCON3)*8) + 7;

extern volatile __bit INT2P @ (((unsigned) &INTCON3)*8) + 7;

extern volatile __bit INT3 @ (((unsigned) &PORTB)*8) + 3;

extern volatile __bit INT3E @ (((unsigned) &INTCON3)*8) + 5;

extern volatile __bit INT3F @ (((unsigned) &INTCON3)*8) + 2;

extern volatile __bit INT3IE @ (((unsigned) &INTCON3)*8) + 5;

extern volatile __bit INT3IF @ (((unsigned) &INTCON3)*8) + 2;

extern volatile __bit INT3IP @ (((unsigned) &INTCON2)*8) + 1;

extern volatile __bit INT3P @ (((unsigned) &INTCON2)*8) + 1;

extern volatile __bit INTEDG0 @ (((unsigned) &INTCON2)*8) + 6;

extern volatile __bit INTEDG1 @ (((unsigned) &INTCON2)*8) + 5;

extern volatile __bit INTEDG2 @ (((unsigned) &INTCON2)*8) + 4;

extern volatile __bit INTEDG3 @ (((unsigned) &INTCON2)*8) + 3;

extern volatile __bit INTSRC @ (((unsigned) &OSCTUNE)*8) + 7;

extern volatile __bit IOFS @ (((unsigned) &OSCCON)*8) + 2;

extern volatile __bit IPEN @ (((unsigned) &RCON)*8) + 7;

extern volatile __bit IRCF0 @ (((unsigned) &OSCCON)*8) + 4;

extern volatile __bit IRCF1 @ (((unsigned) &OSCCON)*8) + 5;

extern volatile __bit IRCF2 @ (((unsigned) &OSCCON)*8) + 6;

extern volatile __bit IRVST @ (((unsigned) &HLVDCON)*8) + 5;

extern volatile __bit IVRST @ (((unsigned) &HLVDCON)*8) + 5;

extern volatile __bit KBI0 @ (((unsigned) &PORTB)*8) + 4;

extern volatile __bit KBI1 @ (((unsigned) &PORTB)*8) + 5;

extern volatile __bit KBI2 @ (((unsigned) &PORTB)*8) + 6;

extern volatile __bit KBI3 @ (((unsigned) &PORTB)*8) + 7;

extern volatile __bit LA0 @ (((unsigned) &LATA)*8) + 0;

extern volatile __bit LA1 @ (((unsigned) &LATA)*8) + 1;

extern volatile __bit LA2 @ (((unsigned) &LATA)*8) + 2;

extern volatile __bit LA3 @ (((unsigned) &LATA)*8) + 3;

extern volatile __bit LA4 @ (((unsigned) &LATA)*8) + 4;

extern volatile __bit LA5 @ (((unsigned) &LATA)*8) + 5;

extern volatile __bit LA6 @ (((unsigned) &LATA)*8) + 6;

extern volatile __bit LA7 @ (((unsigned) &LATA)*8) + 7;

extern volatile __bit LATA0 @ (((unsigned) &LATA)*8) + 0;

extern volatile __bit LATA1 @ (((unsigned) &LATA)*8) + 1;

extern volatile __bit LATA2 @ (((unsigned) &LATA)*8) + 2;

extern volatile __bit LATA3 @ (((unsigned) &LATA)*8) + 3;

extern volatile __bit LATA4 @ (((unsigned) &LATA)*8) + 4;

extern volatile __bit LATA5 @ (((unsigned) &LATA)*8) + 5;

extern volatile __bit LATA6 @ (((unsigned) &LATA)*8) + 6;

extern volatile __bit LATA7 @ (((unsigned) &LATA)*8) + 7;

extern volatile __bit LATB0 @ (((unsigned) &LATB)*8) + 0;

extern volatile __bit LATB1 @ (((unsigned) &LATB)*8) + 1;

extern volatile __bit LATB2 @ (((unsigned) &LATB)*8) + 2;

extern volatile __bit LATB3 @ (((unsigned) &LATB)*8) + 3;

extern volatile __bit LATB4 @ (((unsigned) &LATB)*8) + 4;

extern volatile __bit LATB5 @ (((unsigned) &LATB)*8) + 5;

extern volatile __bit LATB6 @ (((unsigned) &LATB)*8) + 6;

extern volatile __bit LATB7 @ (((unsigned) &LATB)*8) + 7;

extern volatile __bit LATC0 @ (((unsigned) &LATC)*8) + 0;

extern volatile __bit LATC1 @ (((unsigned) &LATC)*8) + 1;

extern volatile __bit LATC2 @ (((unsigned) &LATC)*8) + 2;

extern volatile __bit LATC3 @ (((unsigned) &LATC)*8) + 3;

extern volatile __bit LATC4 @ (((unsigned) &LATC)*8) + 4;

extern volatile __bit LATC5 @ (((unsigned) &LATC)*8) + 5;

extern volatile __bit LATC6 @ (((unsigned) &LATC)*8) + 6;

extern volatile __bit LATC7 @ (((unsigned) &LATC)*8) + 7;

extern volatile __bit LATD0 @ (((unsigned) &LATD)*8) + 0;

extern volatile __bit LATD1 @ (((unsigned) &LATD)*8) + 1;

extern volatile __bit LATD2 @ (((unsigned) &LATD)*8) + 2;

extern volatile __bit LATD3 @ (((unsigned) &LATD)*8) + 3;

extern volatile __bit LATD4 @ (((unsigned) &LATD)*8) + 4;

extern volatile __bit LATD5 @ (((unsigned) &LATD)*8) + 5;

extern volatile __bit LATD6 @ (((unsigned) &LATD)*8) + 6;

extern volatile __bit LATD7 @ (((unsigned) &LATD)*8) + 7;

extern volatile __bit LATE0 @ (((unsigned) &LATE)*8) + 0;

extern volatile __bit LATE1 @ (((unsigned) &LATE)*8) + 1;

extern volatile __bit LATE2 @ (((unsigned) &LATE)*8) + 2;

extern volatile __bit LATE3 @ (((unsigned) &LATE)*8) + 3;

extern volatile __bit LATE4 @ (((unsigned) &LATE)*8) + 4;

extern volatile __bit LATE5 @ (((unsigned) &LATE)*8) + 5;

extern volatile __bit LATE6 @ (((unsigned) &LATE)*8) + 6;

extern volatile __bit LATE7 @ (((unsigned) &LATE)*8) + 7;

extern volatile __bit LATF0 @ (((unsigned) &LATF)*8) + 0;

extern volatile __bit LATF1 @ (((unsigned) &LATF)*8) + 1;

extern volatile __bit LATF2 @ (((unsigned) &LATF)*8) + 2;

extern volatile __bit LATF3 @ (((unsigned) &LATF)*8) + 3;

extern volatile __bit LATF4 @ (((unsigned) &LATF)*8) + 4;

extern volatile __bit LATF5 @ (((unsigned) &LATF)*8) + 5;

extern volatile __bit LATF6 @ (((unsigned) &LATF)*8) + 6;

extern volatile __bit LATF7 @ (((unsigned) &LATF)*8) + 7;

extern volatile __bit LATG0 @ (((unsigned) &LATG)*8) + 0;

extern volatile __bit LATG1 @ (((unsigned) &LATG)*8) + 1;

extern volatile __bit LATG2 @ (((unsigned) &LATG)*8) + 2;

extern volatile __bit LATG3 @ (((unsigned) &LATG)*8) + 3;

extern volatile __bit LATG4 @ (((unsigned) &LATG)*8) + 4;

extern volatile __bit LATG5 @ (((unsigned) &LATG)*8) + 5;

extern volatile __bit LB0 @ (((unsigned) &LATB)*8) + 0;

extern volatile __bit LB1 @ (((unsigned) &LATB)*8) + 1;

extern volatile __bit LB2 @ (((unsigned) &LATB)*8) + 2;

extern volatile __bit LB3 @ (((unsigned) &LATB)*8) + 3;

extern volatile __bit LB4 @ (((unsigned) &LATB)*8) + 4;

extern volatile __bit LB5 @ (((unsigned) &LATB)*8) + 5;

extern volatile __bit LB6 @ (((unsigned) &LATB)*8) + 6;

extern volatile __bit LB7 @ (((unsigned) &LATB)*8) + 7;

extern volatile __bit LC0 @ (((unsigned) &LATC)*8) + 0;

extern volatile __bit LC1 @ (((unsigned) &LATC)*8) + 1;

extern volatile __bit LC2 @ (((unsigned) &LATC)*8) + 2;

extern volatile __bit LC3 @ (((unsigned) &LATC)*8) + 3;

extern volatile __bit LC4 @ (((unsigned) &LATC)*8) + 4;

extern volatile __bit LC5 @ (((unsigned) &LATC)*8) + 5;

extern volatile __bit LC6 @ (((unsigned) &LATC)*8) + 6;

extern volatile __bit LC7 @ (((unsigned) &LATC)*8) + 7;

extern volatile __bit LD0 @ (((unsigned) &LATD)*8) + 0;

extern volatile __bit LD1 @ (((unsigned) &LATD)*8) + 1;

extern volatile __bit LD2 @ (((unsigned) &LATD)*8) + 2;

extern volatile __bit LD3 @ (((unsigned) &LATD)*8) + 3;

extern volatile __bit LD4 @ (((unsigned) &LATD)*8) + 4;

extern volatile __bit LD5 @ (((unsigned) &LATD)*8) + 5;

extern volatile __bit LD6 @ (((unsigned) &LATD)*8) + 6;

extern volatile __bit LD7 @ (((unsigned) &LATD)*8) + 7;

extern volatile __bit LE0 @ (((unsigned) &LATE)*8) + 0;

extern volatile __bit LE1 @ (((unsigned) &LATE)*8) + 1;

extern volatile __bit LE2 @ (((unsigned) &LATE)*8) + 2;

extern volatile __bit LE3 @ (((unsigned) &LATE)*8) + 3;

extern volatile __bit LE4 @ (((unsigned) &LATE)*8) + 4;

extern volatile __bit LE5 @ (((unsigned) &LATE)*8) + 5;

extern volatile __bit LE6 @ (((unsigned) &LATE)*8) + 6;

extern volatile __bit LE7 @ (((unsigned) &LATE)*8) + 7;

extern volatile __bit LF0 @ (((unsigned) &LATF)*8) + 0;

extern volatile __bit LF1 @ (((unsigned) &LATF)*8) + 1;

extern volatile __bit LF2 @ (((unsigned) &LATF)*8) + 2;

extern volatile __bit LF3 @ (((unsigned) &LATF)*8) + 3;

extern volatile __bit LF4 @ (((unsigned) &LATF)*8) + 4;

extern volatile __bit LF5 @ (((unsigned) &LATF)*8) + 5;

extern volatile __bit LF6 @ (((unsigned) &LATF)*8) + 6;

extern volatile __bit LF7 @ (((unsigned) &LATF)*8) + 7;

extern volatile __bit LG0 @ (((unsigned) &LATG)*8) + 0;

extern volatile __bit LG1 @ (((unsigned) &LATG)*8) + 1;

extern volatile __bit LG2 @ (((unsigned) &LATG)*8) + 2;

extern volatile __bit LG3 @ (((unsigned) &LATG)*8) + 3;

extern volatile __bit LG4 @ (((unsigned) &LATG)*8) + 4;

extern volatile __bit LVDEN @ (((unsigned) &HLVDCON)*8) + 4;

extern volatile __bit LVDIE @ (((unsigned) &PIE2)*8) + 2;

extern volatile __bit LVDIF @ (((unsigned) &PIR2)*8) + 2;

extern volatile __bit LVDIN @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit LVDIP @ (((unsigned) &IPR2)*8) + 2;

extern volatile __bit LVDL0 @ (((unsigned) &HLVDCON)*8) + 0;

extern volatile __bit LVDL1 @ (((unsigned) &HLVDCON)*8) + 1;

extern volatile __bit LVDL2 @ (((unsigned) &HLVDCON)*8) + 2;

extern volatile __bit LVDL3 @ (((unsigned) &HLVDCON)*8) + 3;

extern volatile __bit LVV0 @ (((unsigned) &HLVDCON)*8) + 0;

extern volatile __bit LVV1 @ (((unsigned) &HLVDCON)*8) + 1;

extern volatile __bit LVV2 @ (((unsigned) &HLVDCON)*8) + 2;

extern volatile __bit LVV3 @ (((unsigned) &HLVDCON)*8) + 3;

extern volatile __bit MCLR @ (((unsigned) &PORTG)*8) + 5;

extern volatile __bit MSK0 @ (((unsigned) &SSP1ADD)*8) + 0;

extern volatile __bit MSK01 @ (((unsigned) &SSP1ADD)*8) + 0;

extern volatile __bit MSK02 @ (((unsigned) &SSP2ADD)*8) + 0;

extern volatile __bit MSK1 @ (((unsigned) &SSP1ADD)*8) + 1;

extern volatile __bit MSK11 @ (((unsigned) &SSP1ADD)*8) + 1;

extern volatile __bit MSK12 @ (((unsigned) &SSP2ADD)*8) + 1;

extern volatile __bit MSK2 @ (((unsigned) &SSP1ADD)*8) + 2;

extern volatile __bit MSK21 @ (((unsigned) &SSP1ADD)*8) + 2;

extern volatile __bit MSK22 @ (((unsigned) &SSP2ADD)*8) + 2;

extern volatile __bit MSK3 @ (((unsigned) &SSP1ADD)*8) + 3;

extern volatile __bit MSK31 @ (((unsigned) &SSP1ADD)*8) + 3;

extern volatile __bit MSK32 @ (((unsigned) &SSP2ADD)*8) + 3;

extern volatile __bit MSK4 @ (((unsigned) &SSP1ADD)*8) + 4;

extern volatile __bit MSK41 @ (((unsigned) &SSP1ADD)*8) + 4;

extern volatile __bit MSK42 @ (((unsigned) &SSP2ADD)*8) + 4;

extern volatile __bit MSK5 @ (((unsigned) &SSP1ADD)*8) + 5;

extern volatile __bit MSK51 @ (((unsigned) &SSP1ADD)*8) + 5;

extern volatile __bit MSK52 @ (((unsigned) &SSP2ADD)*8) + 5;

extern volatile __bit MSK6 @ (((unsigned) &SSP1ADD)*8) + 6;

extern volatile __bit MSK61 @ (((unsigned) &SSP1ADD)*8) + 6;

extern volatile __bit MSK62 @ (((unsigned) &SSP2ADD)*8) + 6;

extern volatile __bit MSK7 @ (((unsigned) &SSP1ADD)*8) + 7;

extern volatile __bit MSK71 @ (((unsigned) &SSP1ADD)*8) + 7;

extern volatile __bit MSK72 @ (((unsigned) &SSP2ADD)*8) + 7;

extern volatile __bit NEGATIVE @ (((unsigned) &STATUS)*8) + 4;

extern volatile __bit NOT_A @ (((unsigned) &SSP1STAT)*8) + 5;

extern volatile __bit NOT_BOR @ (((unsigned) &RCON)*8) + 0;

extern volatile __bit NOT_CS @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit NOT_DONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit NOT_MCLR @ (((unsigned) &PORTG)*8) + 5;

extern volatile __bit NOT_PD @ (((unsigned) &RCON)*8) + 2;

extern volatile __bit NOT_POR @ (((unsigned) &RCON)*8) + 1;

extern volatile __bit NOT_RBPU @ (((unsigned) &INTCON2)*8) + 7;

extern volatile __bit NOT_RD @ (((unsigned) &PORTE)*8) + 0;

extern volatile __bit NOT_RI @ (((unsigned) &RCON)*8) + 4;

extern volatile __bit NOT_SS1 @ (((unsigned) &PORTF)*8) + 7;

extern volatile __bit NOT_SS2 @ (((unsigned) &PORTD)*8) + 7;

extern volatile __bit NOT_T1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit NOT_T3SYNC @ (((unsigned) &T3CON)*8) + 2;

extern volatile __bit NOT_TO @ (((unsigned) &RCON)*8) + 3;

extern volatile __bit NOT_W @ (((unsigned) &SSP1STAT)*8) + 2;

extern volatile __bit NOT_WR @ (((unsigned) &PORTE)*8) + 1;

extern volatile __bit OBF @ (((unsigned) &PSPCON)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) OERR @ (((unsigned) &RCSTA1)*8) + 1;

extern volatile __bit OERR1 @ (((unsigned) &RCSTA1)*8) + 1;

extern volatile __bit OERR2 @ (((unsigned) &RCSTA2)*8) + 1;

extern volatile __bit OSCFIE @ (((unsigned) &PIE2)*8) + 7;

extern volatile __bit OSCFIF @ (((unsigned) &PIR2)*8) + 7;

extern volatile __bit OSCFIP @ (((unsigned) &IPR2)*8) + 7;

extern volatile __bit OSTS @ (((unsigned) &OSCCON)*8) + 3;

extern volatile __bit OV @ (((unsigned) &STATUS)*8) + 3;

extern volatile __bit OVERFLOW @ (((unsigned) &STATUS)*8) + 3;

extern volatile __bit P1A @ (((unsigned) &PORTC)*8) + 2;

extern volatile __bit P1B @ (((unsigned) &PORTE)*8) + 6;

extern volatile __bit P1C @ (((unsigned) &PORTE)*8) + 5;

extern volatile __bit P1D @ (((unsigned) &PORTG)*8) + 4;

extern volatile __bit P1DC0 @ (((unsigned) &ECCP1DEL)*8) + 0;

extern volatile __bit P1DC1 @ (((unsigned) &ECCP1DEL)*8) + 1;

extern volatile __bit P1DC2 @ (((unsigned) &ECCP1DEL)*8) + 2;

extern volatile __bit P1DC3 @ (((unsigned) &ECCP1DEL)*8) + 3;

extern volatile __bit P1DC4 @ (((unsigned) &ECCP1DEL)*8) + 4;

extern volatile __bit P1DC5 @ (((unsigned) &ECCP1DEL)*8) + 5;

extern volatile __bit P1DC6 @ (((unsigned) &ECCP1DEL)*8) + 6;

extern volatile __bit P1M0 @ (((unsigned) &CCP1CON)*8) + 6;

extern volatile __bit P1M1 @ (((unsigned) &CCP1CON)*8) + 7;

extern volatile __bit P1RSEN @ (((unsigned) &ECCP1DEL)*8) + 7;

extern volatile __bit P2 @ (((unsigned) &SSP2STAT)*8) + 4;

extern volatile __bit P2B @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit P2C @ (((unsigned) &PORTE)*8) + 1;

extern volatile __bit P2D @ (((unsigned) &PORTE)*8) + 0;

extern volatile __bit P2DC0 @ (((unsigned) &ECCP2DEL)*8) + 0;

extern volatile __bit P2DC1 @ (((unsigned) &ECCP2DEL)*8) + 1;

extern volatile __bit P2DC2 @ (((unsigned) &ECCP2DEL)*8) + 2;

extern volatile __bit P2DC3 @ (((unsigned) &ECCP2DEL)*8) + 3;

extern volatile __bit P2DC4 @ (((unsigned) &ECCP2DEL)*8) + 4;

extern volatile __bit P2DC5 @ (((unsigned) &ECCP2DEL)*8) + 5;

extern volatile __bit P2DC6 @ (((unsigned) &ECCP2DEL)*8) + 6;

extern volatile __bit P2M0 @ (((unsigned) &CCP2CON)*8) + 6;

extern volatile __bit P2M1 @ (((unsigned) &CCP2CON)*8) + 7;

extern volatile __bit P2RSEN @ (((unsigned) &ECCP2DEL)*8) + 7;

extern volatile __bit P3A @ (((unsigned) &PORTG)*8) + 0;

extern volatile __bit P3B @ (((unsigned) &PORTE)*8) + 4;

extern volatile __bit P3C @ (((unsigned) &PORTE)*8) + 3;

extern volatile __bit P3D @ (((unsigned) &PORTG)*8) + 3;

extern volatile __bit P3DC0 @ (((unsigned) &ECCP3DEL)*8) + 0;

extern volatile __bit P3DC1 @ (((unsigned) &ECCP3DEL)*8) + 1;

extern volatile __bit P3DC2 @ (((unsigned) &ECCP3DEL)*8) + 2;

extern volatile __bit P3DC3 @ (((unsigned) &ECCP3DEL)*8) + 3;

extern volatile __bit P3DC4 @ (((unsigned) &ECCP3DEL)*8) + 4;

extern volatile __bit P3DC5 @ (((unsigned) &ECCP3DEL)*8) + 5;

extern volatile __bit P3DC6 @ (((unsigned) &ECCP3DEL)*8) + 6;

extern volatile __bit P3M0 @ (((unsigned) &CCP3CON)*8) + 6;

extern volatile __bit P3M1 @ (((unsigned) &CCP3CON)*8) + 7;

extern volatile __bit P3RSEN @ (((unsigned) &ECCP3DEL)*8) + 7;

extern volatile __bit PA1 @ (((unsigned) &PORTC)*8) + 2;

extern volatile __bit PA2 @ (((unsigned) &PORTC)*8) + 1;

extern volatile __bit PA2E @ (((unsigned) &PORTE)*8) + 7;

extern volatile __bit PB1E @ (((unsigned) &PORTE)*8) + 6;

extern volatile __bit PB2 @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit PB3E @ (((unsigned) &PORTE)*8) + 4;

extern volatile __bit PC1E @ (((unsigned) &PORTE)*8) + 5;

extern volatile __bit PC2 @ (((unsigned) &PORTE)*8) + 1;

extern volatile __bit PC3E @ (((unsigned) &PORTE)*8) + 3;

extern volatile __bit PCFG0 @ (((unsigned) &ADCON1)*8) + 0;

extern volatile __bit PCFG1 @ (((unsigned) &ADCON1)*8) + 1;

extern volatile __bit PCFG2 @ (((unsigned) &ADCON1)*8) + 2;

extern volatile __bit PCFG3 @ (((unsigned) &ADCON1)*8) + 3;

extern volatile __bit PD @ (((unsigned) &RCON)*8) + 2;

extern volatile __bit PD2 @ (((unsigned) &PORTE)*8) + 0;

extern volatile __bit PEIE @ (((unsigned) &INTCON)*8) + 6;

extern volatile __bit PEIE_GIEL @ (((unsigned) &INTCON)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) PEN @ (((unsigned) &SSP1CON2)*8) + 2;

extern volatile __bit PEN1 @ (((unsigned) &SSP1CON2)*8) + 2;

extern volatile __bit PEN2 @ (((unsigned) &SSP2CON2)*8) + 2;

extern volatile __bit PLLEN @ (((unsigned) &OSCTUNE)*8) + 6;

extern volatile __bit POR @ (((unsigned) &RCON)*8) + 1;

extern volatile __bit PSA @ (((unsigned) &T0CON)*8) + 3;

extern volatile __bit PSP0 @ (((unsigned) &PORTD)*8) + 0;

extern volatile __bit PSP1 @ (((unsigned) &PORTD)*8) + 1;

extern volatile __bit PSP2 @ (((unsigned) &PORTD)*8) + 2;

extern volatile __bit PSP3 @ (((unsigned) &PORTD)*8) + 3;

extern volatile __bit PSP4 @ (((unsigned) &PORTD)*8) + 4;

extern volatile __bit PSP5 @ (((unsigned) &PORTD)*8) + 5;

extern volatile __bit PSP6 @ (((unsigned) &PORTD)*8) + 6;

extern volatile __bit PSP7 @ (((unsigned) &PORTD)*8) + 7;

extern volatile __bit PSPIE @ (((unsigned) &PIE1)*8) + 7;

extern volatile __bit PSPIF @ (((unsigned) &PIR1)*8) + 7;

extern volatile __bit PSPIP @ (((unsigned) &IPR1)*8) + 7;

extern volatile __bit PSPMODE @ (((unsigned) &PSPCON)*8) + 4;

extern volatile __bit PSS1AC0 @ (((unsigned) &ECCP1AS)*8) + 2;

extern volatile __bit PSS1AC1 @ (((unsigned) &ECCP1AS)*8) + 3;

extern volatile __bit PSS1BD0 @ (((unsigned) &ECCP1AS)*8) + 0;

extern volatile __bit PSS1BD1 @ (((unsigned) &ECCP1AS)*8) + 1;

extern volatile __bit PSS2AC0 @ (((unsigned) &ECCP2AS)*8) + 2;

extern volatile __bit PSS2AC1 @ (((unsigned) &ECCP2AS)*8) + 3;

extern volatile __bit PSS2BD0 @ (((unsigned) &ECCP2AS)*8) + 0;

extern volatile __bit PSS2BD1 @ (((unsigned) &ECCP2AS)*8) + 1;

extern volatile __bit PSS3AC0 @ (((unsigned) &ECCP3AS)*8) + 2;

extern volatile __bit PSS3AC1 @ (((unsigned) &ECCP3AS)*8) + 3;

extern volatile __bit PSS3BD0 @ (((unsigned) &ECCP3AS)*8) + 0;

extern volatile __bit PSS3BD1 @ (((unsigned) &ECCP3AS)*8) + 1;

extern volatile __bit __attribute__((__deprecated__)) RA0 @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RA1 @ (((unsigned) &PORTA)*8) + 1;

extern volatile __bit __attribute__((__deprecated__)) RA2 @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit __attribute__((__deprecated__)) RA3 @ (((unsigned) &PORTA)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) RA4 @ (((unsigned) &PORTA)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) RA5 @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) RA6 @ (((unsigned) &PORTA)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) RA7 @ (((unsigned) &PORTA)*8) + 7;

extern volatile __bit __attribute__((__deprecated__)) RB0 @ (((unsigned) &PORTB)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RB1 @ (((unsigned) &PORTB)*8) + 1;

extern volatile __bit __attribute__((__deprecated__)) RB2 @ (((unsigned) &PORTB)*8) + 2;

extern volatile __bit __attribute__((__deprecated__)) RB3 @ (((unsigned) &PORTB)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) RB4 @ (((unsigned) &PORTB)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) RB5 @ (((unsigned) &PORTB)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) RB6 @ (((unsigned) &PORTB)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) RB7 @ (((unsigned) &PORTB)*8) + 7;

extern volatile __bit RBIE @ (((unsigned) &INTCON)*8) + 3;

extern volatile __bit RBIF @ (((unsigned) &INTCON)*8) + 0;

extern volatile __bit RBIP @ (((unsigned) &INTCON2)*8) + 0;

extern volatile __bit RBPU @ (((unsigned) &INTCON2)*8) + 7;

extern volatile __bit __attribute__((__deprecated__)) RC0 @ (((unsigned) &PORTC)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RC1 @ (((unsigned) &PORTC)*8) + 1;

extern volatile __bit RC1IE @ (((unsigned) &PIE1)*8) + 5;

extern volatile __bit RC1IF @ (((unsigned) &PIR1)*8) + 5;

extern volatile __bit RC1IP @ (((unsigned) &IPR1)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) RC2 @ (((unsigned) &PORTC)*8) + 2;

extern volatile __bit RC2IE @ (((unsigned) &PIE3)*8) + 5;

extern volatile __bit RC2IF @ (((unsigned) &PIR3)*8) + 5;

extern volatile __bit RC2IP @ (((unsigned) &IPR3)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) RC3 @ (((unsigned) &PORTC)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) RC4 @ (((unsigned) &PORTC)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) RC5 @ (((unsigned) &PORTC)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) RC6 @ (((unsigned) &PORTC)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) RC7 @ (((unsigned) &PORTC)*8) + 7;

extern volatile __bit RC8_92 @ (((unsigned) &RCSTA2)*8) + 6;

extern volatile __bit RC92 @ (((unsigned) &RCSTA2)*8) + 6;

extern volatile __bit RCD82 @ (((unsigned) &RCSTA2)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RCEN @ (((unsigned) &SSP1CON2)*8) + 3;

extern volatile __bit RCEN1 @ (((unsigned) &SSP1CON2)*8) + 3;

extern volatile __bit RCEN2 @ (((unsigned) &SSP2CON2)*8) + 3;

extern volatile __bit RCIDL1 @ (((unsigned) &BAUDCON1)*8) + 6;

extern volatile __bit RCIDL2 @ (((unsigned) &BAUDCON2)*8) + 6;

extern volatile __bit RCIE @ (((unsigned) &PIE1)*8) + 5;

extern volatile __bit RCIF @ (((unsigned) &PIR1)*8) + 5;

extern volatile __bit RCIP @ (((unsigned) &IPR1)*8) + 5;

extern volatile __bit RCMT1 @ (((unsigned) &BAUDCON1)*8) + 6;

extern volatile __bit RCMT2 @ (((unsigned) &BAUDCON2)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) RD @ (((unsigned) &EECON1)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RD0 @ (((unsigned) &PORTD)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RD1 @ (((unsigned) &PORTD)*8) + 1;

extern volatile __bit RD163 @ (((unsigned) &T3CON)*8) + 7;

extern volatile __bit __attribute__((__deprecated__)) RD2 @ (((unsigned) &PORTD)*8) + 2;

extern volatile __bit __attribute__((__deprecated__)) RD3 @ (((unsigned) &PORTD)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) RD4 @ (((unsigned) &PORTD)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) RD5 @ (((unsigned) &PORTD)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) RD6 @ (((unsigned) &PORTD)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) RD7 @ (((unsigned) &PORTD)*8) + 7;

extern volatile __bit RDE @ (((unsigned) &PORTE)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RE0 @ (((unsigned) &PORTE)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RE1 @ (((unsigned) &PORTE)*8) + 1;

extern volatile __bit __attribute__((__deprecated__)) RE2 @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit __attribute__((__deprecated__)) RE3 @ (((unsigned) &PORTE)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) RE4 @ (((unsigned) &PORTE)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) RE5 @ (((unsigned) &PORTE)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) RE6 @ (((unsigned) &PORTE)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) RE7 @ (((unsigned) &PORTE)*8) + 7;

extern volatile __bit READ_WRITE2 @ (((unsigned) &SSP2STAT)*8) + 2;

extern volatile __bit __attribute__((__deprecated__)) RF0 @ (((unsigned) &PORTF)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RF1 @ (((unsigned) &PORTF)*8) + 1;

extern volatile __bit __attribute__((__deprecated__)) RF2 @ (((unsigned) &PORTF)*8) + 2;

extern volatile __bit __attribute__((__deprecated__)) RF3 @ (((unsigned) &PORTF)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) RF4 @ (((unsigned) &PORTF)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) RF5 @ (((unsigned) &PORTF)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) RF6 @ (((unsigned) &PORTF)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) RF7 @ (((unsigned) &PORTF)*8) + 7;

extern volatile __bit __attribute__((__deprecated__)) RG0 @ (((unsigned) &PORTG)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RG1 @ (((unsigned) &PORTG)*8) + 1;

extern volatile __bit __attribute__((__deprecated__)) RG2 @ (((unsigned) &PORTG)*8) + 2;

extern volatile __bit __attribute__((__deprecated__)) RG3 @ (((unsigned) &PORTG)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) RG4 @ (((unsigned) &PORTG)*8) + 4;

extern volatile __bit RG5 @ (((unsigned) &PORTG)*8) + 5;

extern volatile __bit RG6 @ (((unsigned) &PORTG)*8) + 6;

extern volatile __bit RG7 @ (((unsigned) &PORTG)*8) + 7;

extern volatile __bit RI @ (((unsigned) &RCON)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) RSEN @ (((unsigned) &SSP1CON2)*8) + 1;

extern volatile __bit RSEN1 @ (((unsigned) &SSP1CON2)*8) + 1;

extern volatile __bit RSEN2 @ (((unsigned) &SSP2CON2)*8) + 1;

extern volatile __bit RW @ (((unsigned) &SSP1STAT)*8) + 2;

extern volatile __bit RW1 @ (((unsigned) &SSP1STAT)*8) + 2;

extern volatile __bit RW2 @ (((unsigned) &SSP2STAT)*8) + 2;

extern volatile __bit RX @ (((unsigned) &PORTC)*8) + 7;

extern volatile __bit RX1 @ (((unsigned) &PORTC)*8) + 7;

extern volatile __bit RX2 @ (((unsigned) &PORTG)*8) + 2;

extern volatile __bit __attribute__((__deprecated__)) RX9 @ (((unsigned) &RCSTA1)*8) + 6;

extern volatile __bit RX91 @ (((unsigned) &RCSTA1)*8) + 6;

extern volatile __bit RX92 @ (((unsigned) &RCSTA2)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) RX9D @ (((unsigned) &RCSTA1)*8) + 0;

extern volatile __bit RX9D1 @ (((unsigned) &RCSTA1)*8) + 0;

extern volatile __bit RX9D2 @ (((unsigned) &RCSTA2)*8) + 0;

extern volatile __bit RXB0IE @ (((unsigned) &PIE3)*8) + 0;

extern volatile __bit RXB1IE @ (((unsigned) &PIE3)*8) + 1;

extern volatile __bit RXBNIE @ (((unsigned) &PIE3)*8) + 1;

extern volatile __bit RXBNIF @ (((unsigned) &PIR3)*8) + 1;

extern volatile __bit RXBNIP @ (((unsigned) &IPR3)*8) + 1;

extern volatile __bit R_W2 @ (((unsigned) &SSP2STAT)*8) + 2;

extern volatile __bit R_nW2 @ (((unsigned) &SSP2STAT)*8) + 2;

extern volatile __bit S2 @ (((unsigned) &SSP2STAT)*8) + 3;

extern volatile __bit SBOREN @ (((unsigned) &RCON)*8) + 6;

extern volatile __bit SCK @ (((unsigned) &PORTC)*8) + 3;

extern volatile __bit SCK1 @ (((unsigned) &PORTC)*8) + 3;

extern volatile __bit SCK2 @ (((unsigned) &PORTD)*8) + 6;

extern volatile __bit SCKP1 @ (((unsigned) &BAUDCON1)*8) + 4;

extern volatile __bit SCKP2 @ (((unsigned) &BAUDCON2)*8) + 4;

extern volatile __bit SCL @ (((unsigned) &PORTC)*8) + 3;

extern volatile __bit SCL1 @ (((unsigned) &PORTC)*8) + 3;

extern volatile __bit SCL2 @ (((unsigned) &PORTD)*8) + 6;

extern volatile __bit SCS0 @ (((unsigned) &OSCCON)*8) + 0;

extern volatile __bit SCS1 @ (((unsigned) &OSCCON)*8) + 1;

extern volatile __bit SDA @ (((unsigned) &PORTC)*8) + 4;

extern volatile __bit SDA1 @ (((unsigned) &PORTC)*8) + 4;

extern volatile __bit SDA2 @ (((unsigned) &PORTD)*8) + 5;

extern volatile __bit SDI @ (((unsigned) &PORTC)*8) + 4;

extern volatile __bit SDI1 @ (((unsigned) &PORTC)*8) + 4;

extern volatile __bit SDI2 @ (((unsigned) &PORTD)*8) + 5;

extern volatile __bit SDO @ (((unsigned) &PORTC)*8) + 5;

extern volatile __bit SDO1 @ (((unsigned) &PORTC)*8) + 5;

extern volatile __bit SDO2 @ (((unsigned) &PORTD)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) SEN @ (((unsigned) &SSP1CON2)*8) + 0;

extern volatile __bit SEN1 @ (((unsigned) &SSP1CON2)*8) + 0;

extern volatile __bit SEN2 @ (((unsigned) &SSP2CON2)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) SENDB @ (((unsigned) &TXSTA1)*8) + 3;

extern volatile __bit SENDB1 @ (((unsigned) &TXSTA1)*8) + 3;

extern volatile __bit SENDB2 @ (((unsigned) &TXSTA2)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) SMP @ (((unsigned) &SSP1STAT)*8) + 7;

extern volatile __bit SMP1 @ (((unsigned) &SSP1STAT)*8) + 7;

extern volatile __bit SMP2 @ (((unsigned) &SSP2STAT)*8) + 7;

extern volatile __bit SOSCEN @ (((unsigned) &T1CON)*8) + 3;

extern volatile __bit SOSCEN3 @ (((unsigned) &T3CON)*8) + 3;

extern volatile __bit SP0 @ (((unsigned) &STKPTR)*8) + 0;

extern volatile __bit SP1 @ (((unsigned) &STKPTR)*8) + 1;

extern volatile __bit SP2 @ (((unsigned) &STKPTR)*8) + 2;

extern volatile __bit SP3 @ (((unsigned) &STKPTR)*8) + 3;

extern volatile __bit SP4 @ (((unsigned) &STKPTR)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) SPEN @ (((unsigned) &RCSTA1)*8) + 7;

extern volatile __bit SPEN1 @ (((unsigned) &RCSTA1)*8) + 7;

extern volatile __bit SPEN2 @ (((unsigned) &RCSTA2)*8) + 7;

extern volatile __bit __attribute__((__deprecated__)) SREN @ (((unsigned) &RCSTA1)*8) + 5;

extern volatile __bit SREN1 @ (((unsigned) &RCSTA1)*8) + 5;

extern volatile __bit SREN2 @ (((unsigned) &RCSTA2)*8) + 5;

extern volatile __bit SRENA @ (((unsigned) &RCSTA1)*8) + 5;

extern volatile __bit SS1 @ (((unsigned) &PORTF)*8) + 7;

extern volatile __bit SS2 @ (((unsigned) &PORTD)*8) + 7;

extern volatile __bit SSP1IE @ (((unsigned) &PIE1)*8) + 3;

extern volatile __bit SSP1IF @ (((unsigned) &PIR1)*8) + 3;

extern volatile __bit SSP1IP @ (((unsigned) &IPR1)*8) + 3;

extern volatile __bit SSP2IE @ (((unsigned) &PIE3)*8) + 7;

extern volatile __bit SSP2IF @ (((unsigned) &PIR3)*8) + 7;

extern volatile __bit SSP2IP @ (((unsigned) &IPR3)*8) + 7;

extern volatile __bit __attribute__((__deprecated__)) SSPEN @ (((unsigned) &SSP1CON1)*8) + 5;

extern volatile __bit SSPEN1 @ (((unsigned) &SSP1CON1)*8) + 5;

extern volatile __bit SSPEN2 @ (((unsigned) &SSP2CON1)*8) + 5;

extern volatile __bit SSPIE @ (((unsigned) &PIE1)*8) + 3;

extern volatile __bit SSPIF @ (((unsigned) &PIR1)*8) + 3;

extern volatile __bit SSPIP @ (((unsigned) &IPR1)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) SSPM0 @ (((unsigned) &SSP1CON1)*8) + 0;

extern volatile __bit SSPM01 @ (((unsigned) &SSP1CON1)*8) + 0;

extern volatile __bit SSPM02 @ (((unsigned) &SSP2CON1)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) SSPM1 @ (((unsigned) &SSP1CON1)*8) + 1;

extern volatile __bit SSPM11 @ (((unsigned) &SSP1CON1)*8) + 1;

extern volatile __bit SSPM12 @ (((unsigned) &SSP2CON1)*8) + 1;

extern volatile __bit __attribute__((__deprecated__)) SSPM2 @ (((unsigned) &SSP1CON1)*8) + 2;

extern volatile __bit SSPM21 @ (((unsigned) &SSP1CON1)*8) + 2;

extern volatile __bit SSPM22 @ (((unsigned) &SSP2CON1)*8) + 2;

extern volatile __bit __attribute__((__deprecated__)) SSPM3 @ (((unsigned) &SSP1CON1)*8) + 3;

extern volatile __bit SSPM31 @ (((unsigned) &SSP1CON1)*8) + 3;

extern volatile __bit SSPM32 @ (((unsigned) &SSP2CON1)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) SSPOV @ (((unsigned) &SSP1CON1)*8) + 6;

extern volatile __bit SSPOV1 @ (((unsigned) &SSP1CON1)*8) + 6;

extern volatile __bit SSPOV2 @ (((unsigned) &SSP2CON1)*8) + 6;

extern volatile __bit START @ (((unsigned) &SSP1STAT)*8) + 3;

extern volatile __bit START1 @ (((unsigned) &SSP1STAT)*8) + 3;

extern volatile __bit START2 @ (((unsigned) &SSP2STAT)*8) + 3;

extern volatile __bit STKFUL @ (((unsigned) &STKPTR)*8) + 7;

extern volatile __bit STKOVF @ (((unsigned) &STKPTR)*8) + 7;

extern volatile __bit STKPTR0 @ (((unsigned) &STKPTR)*8) + 0;

extern volatile __bit STKPTR1 @ (((unsigned) &STKPTR)*8) + 1;

extern volatile __bit STKPTR2 @ (((unsigned) &STKPTR)*8) + 2;

extern volatile __bit STKPTR3 @ (((unsigned) &STKPTR)*8) + 3;

extern volatile __bit STKPTR4 @ (((unsigned) &STKPTR)*8) + 4;

extern volatile __bit STKUNF @ (((unsigned) &STKPTR)*8) + 6;

extern volatile __bit STOP @ (((unsigned) &SSP1STAT)*8) + 4;

extern volatile __bit STOP1 @ (((unsigned) &SSP1STAT)*8) + 4;

extern volatile __bit STOP2 @ (((unsigned) &SSP2STAT)*8) + 4;

extern volatile __bit SWDTE @ (((unsigned) &WDTCON)*8) + 0;

extern volatile __bit SWDTEN @ (((unsigned) &WDTCON)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) SYNC @ (((unsigned) &TXSTA1)*8) + 4;

extern volatile __bit SYNC1 @ (((unsigned) &TXSTA1)*8) + 4;

extern volatile __bit SYNC2 @ (((unsigned) &TXSTA2)*8) + 4;

extern volatile __bit T08BIT @ (((unsigned) &T0CON)*8) + 6;

extern volatile __bit T0CKI @ (((unsigned) &PORTA)*8) + 4;

extern volatile __bit T0CS @ (((unsigned) &T0CON)*8) + 5;

extern volatile __bit T0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit T0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit T0IP @ (((unsigned) &INTCON2)*8) + 2;

extern volatile __bit T0PS0 @ (((unsigned) &T0CON)*8) + 0;

extern volatile __bit T0PS1 @ (((unsigned) &T0CON)*8) + 1;

extern volatile __bit T0PS2 @ (((unsigned) &T0CON)*8) + 2;

extern volatile __bit T0PS3 @ (((unsigned) &T0CON)*8) + 3;

extern volatile __bit T0SE @ (((unsigned) &T0CON)*8) + 4;

extern volatile __bit T13CKI @ (((unsigned) &PORTC)*8) + 0;

extern volatile __bit T1CKPS0 @ (((unsigned) &T1CON)*8) + 4;

extern volatile __bit T1CKPS1 @ (((unsigned) &T1CON)*8) + 5;

extern volatile __bit T1INSYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit T1OSCEN @ (((unsigned) &T1CON)*8) + 3;

extern volatile __bit T1OSI @ (((unsigned) &PORTC)*8) + 1;

extern volatile __bit T1OSO @ (((unsigned) &PORTC)*8) + 0;

extern volatile __bit T1RD16 @ (((unsigned) &T1CON)*8) + 7;

extern volatile __bit T1RUN @ (((unsigned) &T1CON)*8) + 6;

extern volatile __bit T1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit T2CKPS0 @ (((unsigned) &T2CON)*8) + 0;

extern volatile __bit T2CKPS1 @ (((unsigned) &T2CON)*8) + 1;

extern volatile __bit T2OUTPS0 @ (((unsigned) &T2CON)*8) + 3;

extern volatile __bit T2OUTPS1 @ (((unsigned) &T2CON)*8) + 4;

extern volatile __bit T2OUTPS2 @ (((unsigned) &T2CON)*8) + 5;

extern volatile __bit T2OUTPS3 @ (((unsigned) &T2CON)*8) + 6;

extern volatile __bit T3CCP1 @ (((unsigned) &T3CON)*8) + 3;

extern volatile __bit T3CCP2 @ (((unsigned) &T3CON)*8) + 6;

extern volatile __bit T3CKPS0 @ (((unsigned) &T3CON)*8) + 4;

extern volatile __bit T3CKPS1 @ (((unsigned) &T3CON)*8) + 5;

extern volatile __bit T3INSYNC @ (((unsigned) &T3CON)*8) + 2;

extern volatile __bit T3RD16 @ (((unsigned) &T3CON)*8) + 7;

extern volatile __bit T3SYNC @ (((unsigned) &T3CON)*8) + 2;

extern volatile __bit T4CKPS0 @ (((unsigned) &T4CON)*8) + 0;

extern volatile __bit T4CKPS1 @ (((unsigned) &T4CON)*8) + 1;

extern volatile __bit T4OUTPS0 @ (((unsigned) &T4CON)*8) + 3;

extern volatile __bit T4OUTPS1 @ (((unsigned) &T4CON)*8) + 4;

extern volatile __bit T4OUTPS2 @ (((unsigned) &T4CON)*8) + 5;

extern volatile __bit T4OUTPS3 @ (((unsigned) &T4CON)*8) + 6;

extern volatile __bit TMR0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit TMR0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit TMR0IP @ (((unsigned) &INTCON2)*8) + 2;

extern volatile __bit TMR0ON @ (((unsigned) &T0CON)*8) + 7;

extern volatile __bit TMR1CS @ (((unsigned) &T1CON)*8) + 1;

extern volatile __bit TMR1IE @ (((unsigned) &PIE1)*8) + 0;

extern volatile __bit TMR1IF @ (((unsigned) &PIR1)*8) + 0;

extern volatile __bit TMR1IP @ (((unsigned) &IPR1)*8) + 0;

extern volatile __bit TMR1ON @ (((unsigned) &T1CON)*8) + 0;

extern volatile __bit TMR2IE @ (((unsigned) &PIE1)*8) + 1;

extern volatile __bit TMR2IF @ (((unsigned) &PIR1)*8) + 1;

extern volatile __bit TMR2IP @ (((unsigned) &IPR1)*8) + 1;

extern volatile __bit TMR2ON @ (((unsigned) &T2CON)*8) + 2;

extern volatile __bit TMR3CS @ (((unsigned) &T3CON)*8) + 1;

extern volatile __bit TMR3IE @ (((unsigned) &PIE2)*8) + 1;

extern volatile __bit TMR3IF @ (((unsigned) &PIR2)*8) + 1;

extern volatile __bit TMR3IP @ (((unsigned) &IPR2)*8) + 1;

extern volatile __bit TMR3ON @ (((unsigned) &T3CON)*8) + 0;

extern volatile __bit TMR4IE @ (((unsigned) &PIE3)*8) + 3;

extern volatile __bit TMR4IF @ (((unsigned) &PIR3)*8) + 3;

extern volatile __bit TMR4IP @ (((unsigned) &IPR3)*8) + 3;

extern volatile __bit TMR4ON @ (((unsigned) &T4CON)*8) + 2;

extern volatile __bit TO @ (((unsigned) &RCON)*8) + 3;

extern volatile __bit TRISA0 @ (((unsigned) &TRISA)*8) + 0;

extern volatile __bit TRISA1 @ (((unsigned) &TRISA)*8) + 1;

extern volatile __bit TRISA2 @ (((unsigned) &TRISA)*8) + 2;

extern volatile __bit TRISA3 @ (((unsigned) &TRISA)*8) + 3;

extern volatile __bit TRISA4 @ (((unsigned) &TRISA)*8) + 4;

extern volatile __bit TRISA5 @ (((unsigned) &TRISA)*8) + 5;

extern volatile __bit TRISA6 @ (((unsigned) &TRISA)*8) + 6;

extern volatile __bit TRISA7 @ (((unsigned) &TRISA)*8) + 7;

extern volatile __bit TRISB0 @ (((unsigned) &TRISB)*8) + 0;

extern volatile __bit TRISB1 @ (((unsigned) &TRISB)*8) + 1;

extern volatile __bit TRISB2 @ (((unsigned) &TRISB)*8) + 2;

extern volatile __bit TRISB3 @ (((unsigned) &TRISB)*8) + 3;

extern volatile __bit TRISB4 @ (((unsigned) &TRISB)*8) + 4;

extern volatile __bit TRISB5 @ (((unsigned) &TRISB)*8) + 5;

extern volatile __bit TRISB6 @ (((unsigned) &TRISB)*8) + 6;

extern volatile __bit TRISB7 @ (((unsigned) &TRISB)*8) + 7;

extern volatile __bit TRISC0 @ (((unsigned) &TRISC)*8) + 0;

extern volatile __bit TRISC1 @ (((unsigned) &TRISC)*8) + 1;

extern volatile __bit TRISC2 @ (((unsigned) &TRISC)*8) + 2;

extern volatile __bit TRISC3 @ (((unsigned) &TRISC)*8) + 3;

extern volatile __bit TRISC4 @ (((unsigned) &TRISC)*8) + 4;

extern volatile __bit TRISC5 @ (((unsigned) &TRISC)*8) + 5;

extern volatile __bit TRISC6 @ (((unsigned) &TRISC)*8) + 6;

extern volatile __bit TRISC7 @ (((unsigned) &TRISC)*8) + 7;

extern volatile __bit TRISD0 @ (((unsigned) &TRISD)*8) + 0;

extern volatile __bit TRISD1 @ (((unsigned) &TRISD)*8) + 1;

extern volatile __bit TRISD2 @ (((unsigned) &TRISD)*8) + 2;

extern volatile __bit TRISD3 @ (((unsigned) &TRISD)*8) + 3;

extern volatile __bit TRISD4 @ (((unsigned) &TRISD)*8) + 4;

extern volatile __bit TRISD5 @ (((unsigned) &TRISD)*8) + 5;

extern volatile __bit TRISD6 @ (((unsigned) &TRISD)*8) + 6;

extern volatile __bit TRISD7 @ (((unsigned) &TRISD)*8) + 7;

extern volatile __bit TRISE0 @ (((unsigned) &TRISE)*8) + 0;

extern volatile __bit TRISE1 @ (((unsigned) &TRISE)*8) + 1;

extern volatile __bit TRISE2 @ (((unsigned) &TRISE)*8) + 2;

extern volatile __bit TRISE3 @ (((unsigned) &TRISE)*8) + 3;

extern volatile __bit TRISE4 @ (((unsigned) &TRISE)*8) + 4;

extern volatile __bit TRISE5 @ (((unsigned) &TRISE)*8) + 5;

extern volatile __bit TRISE6 @ (((unsigned) &TRISE)*8) + 6;

extern volatile __bit TRISE7 @ (((unsigned) &TRISE)*8) + 7;

extern volatile __bit TRISF0 @ (((unsigned) &TRISF)*8) + 0;

extern volatile __bit TRISF1 @ (((unsigned) &TRISF)*8) + 1;

extern volatile __bit TRISF2 @ (((unsigned) &TRISF)*8) + 2;

extern volatile __bit TRISF3 @ (((unsigned) &TRISF)*8) + 3;

extern volatile __bit TRISF4 @ (((unsigned) &TRISF)*8) + 4;

extern volatile __bit TRISF5 @ (((unsigned) &TRISF)*8) + 5;

extern volatile __bit TRISF6 @ (((unsigned) &TRISF)*8) + 6;

extern volatile __bit TRISF7 @ (((unsigned) &TRISF)*8) + 7;

extern volatile __bit TRISG0 @ (((unsigned) &TRISG)*8) + 0;

extern volatile __bit TRISG1 @ (((unsigned) &TRISG)*8) + 1;

extern volatile __bit TRISG2 @ (((unsigned) &TRISG)*8) + 2;

extern volatile __bit TRISG3 @ (((unsigned) &TRISG)*8) + 3;

extern volatile __bit TRISG4 @ (((unsigned) &TRISG)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) TRMT @ (((unsigned) &TXSTA1)*8) + 1;

extern volatile __bit TRMT1 @ (((unsigned) &TXSTA1)*8) + 1;

extern volatile __bit TRMT2 @ (((unsigned) &TXSTA2)*8) + 1;

extern volatile __bit TUN0 @ (((unsigned) &OSCTUNE)*8) + 0;

extern volatile __bit TUN1 @ (((unsigned) &OSCTUNE)*8) + 1;

extern volatile __bit TUN2 @ (((unsigned) &OSCTUNE)*8) + 2;

extern volatile __bit TUN3 @ (((unsigned) &OSCTUNE)*8) + 3;

extern volatile __bit TUN4 @ (((unsigned) &OSCTUNE)*8) + 4;

extern volatile __bit TX @ (((unsigned) &PORTC)*8) + 6;

extern volatile __bit TX1 @ (((unsigned) &PORTC)*8) + 6;

extern volatile __bit TX1IE @ (((unsigned) &PIE1)*8) + 4;

extern volatile __bit TX1IF @ (((unsigned) &PIR1)*8) + 4;

extern volatile __bit TX1IP @ (((unsigned) &IPR1)*8) + 4;

extern volatile __bit TX2 @ (((unsigned) &PORTG)*8) + 1;

extern volatile __bit TX2IE @ (((unsigned) &PIE3)*8) + 4;

extern volatile __bit TX2IF @ (((unsigned) &PIR3)*8) + 4;

extern volatile __bit TX2IP @ (((unsigned) &IPR3)*8) + 4;

extern volatile __bit TX8_92 @ (((unsigned) &TXSTA2)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) TX9 @ (((unsigned) &TXSTA1)*8) + 6;

extern volatile __bit TX91 @ (((unsigned) &TXSTA1)*8) + 6;

extern volatile __bit TX92 @ (((unsigned) &TXSTA2)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) TX9D @ (((unsigned) &TXSTA1)*8) + 0;

extern volatile __bit TX9D1 @ (((unsigned) &TXSTA1)*8) + 0;

extern volatile __bit TX9D2 @ (((unsigned) &TXSTA2)*8) + 0;

extern volatile __bit TXB0IE @ (((unsigned) &PIE3)*8) + 2;

extern volatile __bit TXB1IE @ (((unsigned) &PIE3)*8) + 3;

extern volatile __bit TXB2IE @ (((unsigned) &PIE3)*8) + 4;

extern volatile __bit TXBNIE @ (((unsigned) &PIE3)*8) + 4;

extern volatile __bit TXBNIF @ (((unsigned) &PIR3)*8) + 4;

extern volatile __bit TXBNIP @ (((unsigned) &IPR3)*8) + 4;

extern volatile __bit TXCKP @ (((unsigned) &BAUDCON1)*8) + 4;

extern volatile __bit TXCKP1 @ (((unsigned) &BAUDCON1)*8) + 4;

extern volatile __bit TXCKP2 @ (((unsigned) &BAUDCON2)*8) + 4;

extern volatile __bit TXD82 @ (((unsigned) &TXSTA2)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) TXEN @ (((unsigned) &TXSTA1)*8) + 5;

extern volatile __bit TXEN1 @ (((unsigned) &TXSTA1)*8) + 5;

extern volatile __bit TXEN2 @ (((unsigned) &TXSTA2)*8) + 5;

extern volatile __bit TXIE @ (((unsigned) &PIE1)*8) + 4;

extern volatile __bit TXIF @ (((unsigned) &PIR1)*8) + 4;

extern volatile __bit TXIP @ (((unsigned) &IPR1)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) UA @ (((unsigned) &SSP1STAT)*8) + 1;

extern volatile __bit UA1 @ (((unsigned) &SSP1STAT)*8) + 1;

extern volatile __bit UA2 @ (((unsigned) &SSP2STAT)*8) + 1;

extern volatile __bit ULPWUIN @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit VCFG0 @ (((unsigned) &ADCON1)*8) + 4;

extern volatile __bit VCFG01 @ (((unsigned) &ADCON1)*8) + 4;

extern volatile __bit VCFG1 @ (((unsigned) &ADCON1)*8) + 5;

extern volatile __bit VCFG11 @ (((unsigned) &ADCON1)*8) + 5;

extern volatile __bit VDIRMAG @ (((unsigned) &HLVDCON)*8) + 7;

extern volatile __bit VREFM @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit VREFP @ (((unsigned) &PORTA)*8) + 3;

extern volatile __bit W4E @ (((unsigned) &BAUDCON1)*8) + 1;

extern volatile __bit WAIT0 @ (((unsigned) &PR2)*8) + 4;

extern volatile __bit WAIT1 @ (((unsigned) &PR2)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) WCOL @ (((unsigned) &SSP1CON1)*8) + 7;

extern volatile __bit WCOL1 @ (((unsigned) &SSP1CON1)*8) + 7;

extern volatile __bit WCOL2 @ (((unsigned) &SSP2CON1)*8) + 7;

extern volatile __bit WM0 @ (((unsigned) &PR2)*8) + 0;

extern volatile __bit WM1 @ (((unsigned) &PR2)*8) + 1;

extern volatile __bit __attribute__((__deprecated__)) WR @ (((unsigned) &EECON1)*8) + 1;

extern volatile __bit WRE @ (((unsigned) &PORTE)*8) + 1;

extern volatile __bit WREN @ (((unsigned) &EECON1)*8) + 2;

extern volatile __bit WRERR @ (((unsigned) &EECON1)*8) + 3;

extern volatile __bit WUE1 @ (((unsigned) &BAUDCON1)*8) + 1;

extern volatile __bit WUE2 @ (((unsigned) &BAUDCON2)*8) + 1;

extern volatile __bit ZERO @ (((unsigned) &STATUS)*8) + 2;

extern volatile __bit nA2 @ (((unsigned) &SSP2STAT)*8) + 5;

extern volatile __bit nADDRESS2 @ (((unsigned) &SSP2STAT)*8) + 5;

extern volatile __bit nBOR @ (((unsigned) &RCON)*8) + 0;

extern volatile __bit nCS @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit nDONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit nMCLR @ (((unsigned) &PORTG)*8) + 5;

extern volatile __bit nPD @ (((unsigned) &RCON)*8) + 2;

extern volatile __bit nPOR @ (((unsigned) &RCON)*8) + 1;

extern volatile __bit nRBPU @ (((unsigned) &INTCON2)*8) + 7;

extern volatile __bit nRD @ (((unsigned) &PORTE)*8) + 0;

extern volatile __bit nRI @ (((unsigned) &RCON)*8) + 4;

extern volatile __bit nSS1 @ (((unsigned) &PORTF)*8) + 7;

extern volatile __bit nSS2 @ (((unsigned) &PORTD)*8) + 7;

extern volatile __bit nT1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit nT3SYNC @ (((unsigned) &T3CON)*8) + 2;

extern volatile __bit nTO @ (((unsigned) &RCON)*8) + 3;

extern volatile __bit nW2 @ (((unsigned) &SSP2STAT)*8) + 2;

extern volatile __bit nWR @ (((unsigned) &PORTE)*8) + 1;

extern volatile __bit nWRITE2 @ (((unsigned) &SSP2STAT)*8) + 2;

# 2008 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\adc.h"
union ADCResult
{
int lr;
char br[2];
};

char BusyADC (void);

void ConvertADC (void);

void CloseADC(void);

# 2026
int ReadADC(void);

# 2040
void OpenADC ( unsigned char ,
unsigned char ,
unsigned char );

# 2084
void SetChanADC(unsigned char );

# 2100
void SelChanConvADC( unsigned char );

# 38 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\ancomp.h"
void Close_ancomp( void );
void Open_ancomp(unsigned char config);

# 236 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\spi.h"
void OpenSPI1( unsigned char sync_mode,
unsigned char bus_mode,
unsigned char smp_phase );

signed char WriteSPI1( unsigned char data_out );

void getsSPI1( unsigned char *rdptr, unsigned char length );

void putsSPI1( unsigned char *wrptr );

unsigned char ReadSPI1( void );

# 441
void OpenSPI2( unsigned char sync_mode,
unsigned char bus_mode,
unsigned char smp_phase );

signed char WriteSPI2( unsigned char data_out );

void getsSPI2( unsigned char *rdptr, unsigned char length );

void putsSPI2( unsigned char *wrptr );

unsigned char ReadSPI2( void );

# 414 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\can2510.h"
void CAN2510Initialize(  unsigned int configuration,
 unsigned char brp,
 unsigned char interruptFlags,
 unsigned char SPI_syncMode,
 unsigned char SPI_busMode,
 unsigned char SPI_smpPhase );

signed char CAN2510Init(  unsigned long BufferConfig,
 unsigned long BitTimeConfig,
 unsigned char interruptEnables,
 unsigned char SPI_syncMode,
 unsigned char SPI_busMode,
 unsigned char SPI_smpPhase );

void CAN2510Enable( void );

void CAN2510Disable( void );

void CAN2510Reset( void );

void CAN2510SetMode(  unsigned char mode );

unsigned char CAN2510ReadMode( void );

unsigned char CAN2510ReadStatus( void );

unsigned char CAN2510ErrorState( void );

unsigned char CAN2510InterruptStatus( void );

void CAN2510InterruptEnable( unsigned char interruptFlags );

unsigned char CAN2510ByteRead(  unsigned char addr );

void CAN2510ByteWrite(  unsigned char addr,  unsigned char value );

void CAN2510SequentialRead(  unsigned char *DataArray,
 unsigned char CAN2510addr,
 unsigned char numbytes );

void CAN2510SequentialWrite(  unsigned char *DataArray,
 unsigned char CAN2510addr,
 unsigned char numbytes );

void CAN2510BitModify(  unsigned char address,
 unsigned char mask,
 unsigned char data );

void CAN2510SetSingleMaskStd(  unsigned char maskNum,  unsigned int mask );

void CAN2510SetSingleMaskXtd(  unsigned char maskNum,  unsigned long mask );

void CAN2510SetSingleFilterStd(  unsigned char filterNum,  unsigned int filter );

void CAN2510SetSingleFilterXtd(  unsigned char filterNum,  unsigned long filter );

signed char CAN2510SetMsgFilterStd(  unsigned char bufferNum,
 unsigned int mask,
 unsigned int *filters );

signed char CAN2510SetMsgFilterXtd(  unsigned char bufferNum,
 unsigned long mask,
 unsigned long *filters );

signed char CAN2510WriteStd(  unsigned int msgId,
 unsigned char msgPriority,
 unsigned char numBytes,
 unsigned char *data );

signed char CAN2510WriteXtd(  unsigned long msgId,
 unsigned char msgPriority,
 unsigned char numBytes,
 unsigned char *data );

void CAN2510LoadBufferStd(  unsigned char bufferNum,
 unsigned int msgId,
 unsigned char numBytes,
 unsigned char *data );

void CAN2510LoadBufferXtd(  unsigned char bufferNum,
 unsigned long msgId,
 unsigned char numBytes,
 unsigned char *data );

void CAN2510LoadRTRStd(  unsigned char bufferNum,
 unsigned int msgId,
 unsigned char numBytes );

void CAN2510LoadRTRXtd(  unsigned char bufferNum,
 unsigned long msgId,
 unsigned char numBytes );

void CAN2510SetBufferPriority(  unsigned char bufferNum,
 unsigned char bufferPriority );

void CAN2510SendBuffer(  unsigned char bufferNumber );

signed char CAN2510WriteBuffer(  unsigned char bufferNum );

unsigned char CAN2510DataReady(  unsigned char bufferNum );

unsigned char CAN2510DataRead(  unsigned char bufferNum,
 unsigned long *msgId,
 unsigned char *numBytes,
 unsigned char *data );

# 64 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\capture.h"
union capstatus
{

# 73
struct
{

# 77
unsigned Cap1OVF:1;

# 82
unsigned Cap2OVF:1;



unsigned Cap3OVF:1;

# 91
unsigned Cap4OVF:1;
unsigned Cap5OVF:1;

# 115
};

unsigned :8;

};

extern union capstatus CapStatus;

union CapResult
{
unsigned int lc;
char bc[2];
};

# 474
void OpenCapture1 ( unsigned char config);
unsigned int ReadCapture1 (void);
void CloseCapture1 (void);

# 484
void OpenCapture2 ( unsigned char config);
unsigned int ReadCapture2 (void);
void CloseCapture2 (void);

# 495
void OpenCapture3 ( unsigned char config);
unsigned int ReadCapture3 (void);
void CloseCapture3 (void);

# 507
void OpenCapture4 ( unsigned char config);
unsigned int ReadCapture4 (void);
void CloseCapture4 (void);

void OpenCapture5 ( unsigned char config);
unsigned int ReadCapture5 (void);
void CloseCapture5 (void);

# 385 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\compare.h"
void OpenCompare1(unsigned char config,unsigned int period);
void CloseCompare1(void);

# 392
void OpenCompare2(unsigned char config, unsigned int period);
void CloseCompare2(void);



void OpenCompare3(unsigned char config,unsigned int period);
void CloseCompare3(void);

# 403
void OpenCompare4(unsigned char config,unsigned int period);
void CloseCompare4(void);

void OpenCompare5(unsigned char config,unsigned int period);
void CloseCompare5(void);

# 36 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\EEP.h"
void Busy_eep ( void );
unsigned char Read_b_eep( unsigned int badd );
void Write_b_eep( unsigned int badd, unsigned char bdat );

# 2 "C:/Program Files (x86)/Microchip/xc8/v1.33/include\stddef.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 13
extern int errno;

# 65 "C:/Program Files (x86)/Microchip/xc8/v1.33/include\GenericTypeDefs.h"
typedef enum _BOOL { FALSE = 0, TRUE } BOOL;


typedef enum _BIT { CLEAR = 0, SET } BIT;

# 75
typedef signed int INT;
typedef signed char INT8;
typedef signed short int INT16;
typedef signed long int INT32;



 typedef signed long long INT64;



typedef unsigned int UINT;
typedef unsigned char UINT8;
typedef unsigned short int UINT16;

# 93
typedef unsigned long int UINT32;


 typedef unsigned long long UINT64;


typedef union
{
UINT8 Val;
struct
{
 UINT8 b0:1;
 UINT8 b1:1;
 UINT8 b2:1;
 UINT8 b3:1;
 UINT8 b4:1;
 UINT8 b5:1;
 UINT8 b6:1;
 UINT8 b7:1;
} bits;
} UINT8_VAL, UINT8_BITS;

typedef union
{
UINT16 Val;
UINT8 v[2] ;
struct 
{
UINT8 LB;
UINT8 HB;
} byte;
struct 
{
 UINT8 b0:1;
 UINT8 b1:1;
 UINT8 b2:1;
 UINT8 b3:1;
 UINT8 b4:1;
 UINT8 b5:1;
 UINT8 b6:1;
 UINT8 b7:1;
 UINT8 b8:1;
 UINT8 b9:1;
 UINT8 b10:1;
 UINT8 b11:1;
 UINT8 b12:1;
 UINT8 b13:1;
 UINT8 b14:1;
 UINT8 b15:1;
} bits;
} UINT16_VAL, UINT16_BITS;

# 187
typedef union
{
UINT32 Val;
UINT16 w[2] ;
UINT8 v[4] ;
struct 
{
UINT16 LW;
UINT16 HW;
} word;
struct 
{
UINT8 LB;
UINT8 HB;
UINT8 UB;
UINT8 MB;
} byte;
struct 
{
UINT16_VAL low;
UINT16_VAL high;
}wordUnion;
struct 
{
 UINT8 b0:1;
 UINT8 b1:1;
 UINT8 b2:1;
 UINT8 b3:1;
 UINT8 b4:1;
 UINT8 b5:1;
 UINT8 b6:1;
 UINT8 b7:1;
 UINT8 b8:1;
 UINT8 b9:1;
 UINT8 b10:1;
 UINT8 b11:1;
 UINT8 b12:1;
 UINT8 b13:1;
 UINT8 b14:1;
 UINT8 b15:1;
 UINT8 b16:1;
 UINT8 b17:1;
 UINT8 b18:1;
 UINT8 b19:1;
 UINT8 b20:1;
 UINT8 b21:1;
 UINT8 b22:1;
 UINT8 b23:1;
 UINT8 b24:1;
 UINT8 b25:1;
 UINT8 b26:1;
 UINT8 b27:1;
 UINT8 b28:1;
 UINT8 b29:1;
 UINT8 b30:1;
 UINT8 b31:1;
} bits;
} UINT32_VAL;



typedef union
{
UINT64 Val;
UINT32 d[2] ;
UINT16 w[4] ;
UINT8 v[8] ;
struct 
{
UINT32 LD;
UINT32 HD;
} dword;
struct 
{
UINT16 LW;
UINT16 HW;
UINT16 UW;
UINT16 MW;
} word;
struct 
{
 UINT8 b0:1;
 UINT8 b1:1;
 UINT8 b2:1;
 UINT8 b3:1;
 UINT8 b4:1;
 UINT8 b5:1;
 UINT8 b6:1;
 UINT8 b7:1;
 UINT8 b8:1;
 UINT8 b9:1;
 UINT8 b10:1;
 UINT8 b11:1;
 UINT8 b12:1;
 UINT8 b13:1;
 UINT8 b14:1;
 UINT8 b15:1;
 UINT8 b16:1;
 UINT8 b17:1;
 UINT8 b18:1;
 UINT8 b19:1;
 UINT8 b20:1;
 UINT8 b21:1;
 UINT8 b22:1;
 UINT8 b23:1;
 UINT8 b24:1;
 UINT8 b25:1;
 UINT8 b26:1;
 UINT8 b27:1;
 UINT8 b28:1;
 UINT8 b29:1;
 UINT8 b30:1;
 UINT8 b31:1;
 UINT8 b32:1;
 UINT8 b33:1;
 UINT8 b34:1;
 UINT8 b35:1;
 UINT8 b36:1;
 UINT8 b37:1;
 UINT8 b38:1;
 UINT8 b39:1;
 UINT8 b40:1;
 UINT8 b41:1;
 UINT8 b42:1;
 UINT8 b43:1;
 UINT8 b44:1;
 UINT8 b45:1;
 UINT8 b46:1;
 UINT8 b47:1;
 UINT8 b48:1;
 UINT8 b49:1;
 UINT8 b50:1;
 UINT8 b51:1;
 UINT8 b52:1;
 UINT8 b53:1;
 UINT8 b54:1;
 UINT8 b55:1;
 UINT8 b56:1;
 UINT8 b57:1;
 UINT8 b58:1;
 UINT8 b59:1;
 UINT8 b60:1;
 UINT8 b61:1;
 UINT8 b62:1;
 UINT8 b63:1;
} bits;
} UINT64_VAL;

# 339
typedef void VOID;

typedef char CHAR8;
typedef unsigned char UCHAR8;

typedef unsigned char BYTE;
typedef unsigned short int WORD;
typedef unsigned long DWORD;


typedef unsigned long long QWORD;
typedef signed char CHAR;
typedef signed short int SHORT;
typedef signed long LONG;


typedef signed long long LONGLONG;
typedef union
{
BYTE Val;
struct 
{
 BYTE b0:1;
 BYTE b1:1;
 BYTE b2:1;
 BYTE b3:1;
 BYTE b4:1;
 BYTE b5:1;
 BYTE b6:1;
 BYTE b7:1;
} bits;
} BYTE_VAL, BYTE_BITS;

typedef union
{
WORD Val;
BYTE v[2] ;
struct 
{
BYTE LB;
BYTE HB;
} byte;
struct 
{
 BYTE b0:1;
 BYTE b1:1;
 BYTE b2:1;
 BYTE b3:1;
 BYTE b4:1;
 BYTE b5:1;
 BYTE b6:1;
 BYTE b7:1;
 BYTE b8:1;
 BYTE b9:1;
 BYTE b10:1;
 BYTE b11:1;
 BYTE b12:1;
 BYTE b13:1;
 BYTE b14:1;
 BYTE b15:1;
} bits;
} WORD_VAL, WORD_BITS;

typedef union
{
DWORD Val;
WORD w[2] ;
BYTE v[4] ;
struct 
{
WORD LW;
WORD HW;
} word;
struct 
{
BYTE LB;
BYTE HB;
BYTE UB;
BYTE MB;
} byte;
struct 
{
WORD_VAL low;
WORD_VAL high;
}wordUnion;
struct 
{
 BYTE b0:1;
 BYTE b1:1;
 BYTE b2:1;
 BYTE b3:1;
 BYTE b4:1;
 BYTE b5:1;
 BYTE b6:1;
 BYTE b7:1;
 BYTE b8:1;
 BYTE b9:1;
 BYTE b10:1;
 BYTE b11:1;
 BYTE b12:1;
 BYTE b13:1;
 BYTE b14:1;
 BYTE b15:1;
 BYTE b16:1;
 BYTE b17:1;
 BYTE b18:1;
 BYTE b19:1;
 BYTE b20:1;
 BYTE b21:1;
 BYTE b22:1;
 BYTE b23:1;
 BYTE b24:1;
 BYTE b25:1;
 BYTE b26:1;
 BYTE b27:1;
 BYTE b28:1;
 BYTE b29:1;
 BYTE b30:1;
 BYTE b31:1;
} bits;
} DWORD_VAL;


typedef union
{
QWORD Val;
DWORD d[2] ;
WORD w[4] ;
BYTE v[8] ;
struct 
{
DWORD LD;
DWORD HD;
} dword;
struct 
{
WORD LW;
WORD HW;
WORD UW;
WORD MW;
} word;
struct 
{
 BYTE b0:1;
 BYTE b1:1;
 BYTE b2:1;
 BYTE b3:1;
 BYTE b4:1;
 BYTE b5:1;
 BYTE b6:1;
 BYTE b7:1;
 BYTE b8:1;
 BYTE b9:1;
 BYTE b10:1;
 BYTE b11:1;
 BYTE b12:1;
 BYTE b13:1;
 BYTE b14:1;
 BYTE b15:1;
 BYTE b16:1;
 BYTE b17:1;
 BYTE b18:1;
 BYTE b19:1;
 BYTE b20:1;
 BYTE b21:1;
 BYTE b22:1;
 BYTE b23:1;
 BYTE b24:1;
 BYTE b25:1;
 BYTE b26:1;
 BYTE b27:1;
 BYTE b28:1;
 BYTE b29:1;
 BYTE b30:1;
 BYTE b31:1;
 BYTE b32:1;
 BYTE b33:1;
 BYTE b34:1;
 BYTE b35:1;
 BYTE b36:1;
 BYTE b37:1;
 BYTE b38:1;
 BYTE b39:1;
 BYTE b40:1;
 BYTE b41:1;
 BYTE b42:1;
 BYTE b43:1;
 BYTE b44:1;
 BYTE b45:1;
 BYTE b46:1;
 BYTE b47:1;
 BYTE b48:1;
 BYTE b49:1;
 BYTE b50:1;
 BYTE b51:1;
 BYTE b52:1;
 BYTE b53:1;
 BYTE b54:1;
 BYTE b55:1;
 BYTE b56:1;
 BYTE b57:1;
 BYTE b58:1;
 BYTE b59:1;
 BYTE b60:1;
 BYTE b61:1;
 BYTE b62:1;
 BYTE b63:1;
} bits;
} QWORD_VAL;

# 113 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\flash.h"
extern void ReadFlash(unsigned long startaddr, unsigned int num_bytes, unsigned char *flash_array);

# 120
extern void EraseFlash(unsigned long startaddr, unsigned long endaddr);

extern void WriteBlockFlash(unsigned long startaddr, unsigned char num_blocks, unsigned char *flash_array);

extern void WriteBytesFlash(unsigned long startaddr, unsigned int num_bytes, unsigned char *flash_array);

# 244 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\i2c.h"
void OpenI2C1( unsigned char sync_mode, unsigned char slew );

# 264
unsigned char ReadI2C1( void );

# 279
signed char WriteI2C1( unsigned char data_out );

# 294
signed char getsI2C1( unsigned char *rdptr, unsigned char length );


signed char putsI2C1( unsigned char *wrptr );

# 305
signed char EEAckPolling1( unsigned char control );


signed char EEByteWrite1( unsigned char control,
unsigned char address,
unsigned char data );


signed int EECurrentAddRead1( unsigned char control );


signed char EEPageWrite1( unsigned char control,
unsigned char address,
unsigned char *wrptr );


signed int EERandomRead1( unsigned char control, unsigned char address );


signed char EESequentialRead1( unsigned char control,
unsigned char address,
unsigned char *rdptr,
unsigned char length );

# 600
void OpenI2C2( unsigned char sync_mode, unsigned char slew );

# 617
unsigned char ReadI2C2( void );

# 630
signed char WriteI2C2( unsigned char data_out );

# 643
signed char getsI2C2( unsigned char *rdptr, unsigned char length );

signed char putsI2C2( unsigned char *wrptr );

# 651
signed char EEAckPolling2( unsigned char control );

signed char EEByteWrite2( unsigned char control,
unsigned char address,
unsigned char data );

signed int EECurrentAddRead2( unsigned char control );

signed char EEPageWrite2( unsigned char control,
unsigned char address,
unsigned char *wrptr );

signed int EERandomRead2( unsigned char control, unsigned char address );

signed char EESequentialRead2( unsigned char control,
unsigned char address,
unsigned char *rdptr,
unsigned char length );

# 200 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\mwire.h"
void OpenMwire1( unsigned char sync_mode );


unsigned char ReadMwire1( unsigned char high_byte,
unsigned char low_byte );

# 219
signed char WriteMwire1( unsigned char data_out );

# 234
void getsMwire1( unsigned char *rdptr, unsigned char length );

# 257
void OpenMwire2( unsigned char sync_mode );

unsigned char ReadMwire2( unsigned char high_byte,
unsigned char low_byte );

# 273
signed char WriteMwire2( unsigned char data_out );

# 286
void getsMwire2( unsigned char *rdptr, unsigned char length );

# 126 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\portb.h"
void OpenPORTB( unsigned char config);

# 176
void OpenRB0INT( unsigned char config);

# 194
void OpenRB1INT( unsigned char config);

# 211
void OpenRB2INT( unsigned char config);

# 230
void OpenRB3INT( unsigned char config);

# 85 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\pwm.h"
union PWMDC
{
unsigned int lpwm;
char bpwm[2];
};

# 467
void OpenPWM1 ( char period);
void SetDCPWM1 ( unsigned int duty_cycle);

# 474
void SetOutputPWM1 ( unsigned char output_config,
unsigned char pwm_mode);

void ClosePWM1 (void);

# 485
void OpenPWM2 ( char period);
void SetDCPWM2( unsigned int duty_cycle);


void SetOutputPWM2 ( unsigned char output_config,
unsigned char pwm_mode);

void ClosePWM2 (void);

# 500
void OpenPWM3 ( char period);
void SetDCPWM3 ( unsigned int duty_cycle);

void SetOutputPWM3 ( unsigned char output_config,
unsigned char pwm_mode);

void ClosePWM3 (void);

# 514
void OpenPWM4 ( char period);
void SetDCPWM4 ( unsigned int duty_cycle);
void ClosePWM4 (void);

void OpenPWM5 ( char period);
void SetDCPWM5 ( unsigned int duty_cycle);
void ClosePWM5 (void);

# 16 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\reset.h"
char isMCLR(void);
void StatusReset(void);
char isPOR(void);
char isWU(void);


char isBOR(void);



char isWDTTO(void);
char isWDTWU(void);



char isLVD(void);

# 687 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\rtcc.h"
void Open_RTCC(void);
void Close_RTCC(void);
unsigned char update_RTCC(void);

# 97 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\sw_i2c.h"
void SWStopI2C ( void );
void SWStartI2C ( void );
void SWRestartI2C ( void );
void SWStopI2C ( void );

signed char SWAckI2C( void );
signed char Clock_test( void );
signed int SWReadI2C( void );
signed char SWWriteI2C(  unsigned char data_out );
signed char SWGetsI2C(  unsigned char *rdptr,  unsigned char length );
signed char SWPutsI2C(  unsigned char *wrptr );

# 84 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\sw_spi.h"
void OpenSWSPI(void);


char WriteSWSPI( char output);


void SetCSSWSPI(void);


void ClearCSSWSPI(void);

# 47 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\sw_uart.h"
void OpenUART(void);

unsigned char ReadUART(void);

void WriteUART( unsigned char);

void getsUART( char *, unsigned char);

void putsUART( char *);

# 79
extern void DelayRXBitUART (void);
extern void DelayRXHalfBitUART(void);
extern void DelayTXBitUART (void);

# 36 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\timers.h"
union Timers
{
unsigned int lt;
char bt[2];
};

# 118
void OpenTimer0 ( unsigned char config);
void CloseTimer0 (void);
unsigned int ReadTimer0 (void);
void WriteTimer0 ( unsigned int timer0);

# 236
void OpenTimer1 ( unsigned char config);
void CloseTimer1 (void);
unsigned int ReadTimer1 (void);
void WriteTimer1 ( unsigned int timer1);

# 325
void OpenTimer2 ( unsigned char config);
void CloseTimer2 (void);

# 391
void OpenTimer3 ( unsigned char config);
void CloseTimer3 (void);
unsigned int ReadTimer3 (void);
void WriteTimer3 ( unsigned int timer3);

# 541
void OpenTimer4 ( unsigned char config);
void CloseTimer4 (void);

# 1179
void SetTmrCCPSrc( unsigned char );

# 200 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\usart.h"
union USART1
{
unsigned char val;
struct
{
unsigned RX_NINE:1;
unsigned TX_NINE:1;
unsigned FRAME_ERROR:1;
unsigned OVERRUN_ERROR:1;
unsigned fill:4;
};
};
extern union USART1 USART1_Status;

void Open1USART ( unsigned char config, unsigned int spbrg);

# 244
char Read1USART (void);
void Write1USART ( char data);
void gets1USART ( char *buffer, unsigned char len);
void puts1USART ( char *data);
void putrs1USART ( const  char *data);

# 305
union USART2
{
unsigned char val;
struct
{
unsigned RX_NINE:1;
unsigned TX_NINE:1;
unsigned FRAME_ERROR:1;
unsigned OVERRUN_ERROR:1;
unsigned fill:4;
};
};
extern union USART2 USART2_Status;
void Open2USART ( unsigned char config, unsigned int spbrg);

# 333
char Read2USART (void);
void Write2USART ( char data);
void gets2USART ( char *buffer, unsigned char len);
void puts2USART ( char *data);
void putrs2USART ( const  char *data);

# 660
void baud1USART ( unsigned char baudconfig);

# 665
void baud2USART ( unsigned char baudconfig);

# 99 ".\xlcd.h"
void OpenXLCD( unsigned char);

# 104
void SetCGRamAddr( unsigned char);

# 109
void SetDDRamAddr( unsigned char);

# 114
unsigned char BusyXLCD(void);

# 119
unsigned char ReadAddrXLCD(void);

# 124
char ReadDataXLCD(void);

# 129
void WriteCmdXLCD( unsigned char);

# 134
void WriteDataXLCD( char);

# 144
void putsXLCD( char *);

# 149
void putrsXLCD(const char *);


extern void DelayFor18TCY(void);
extern void DelayPORXLCD(void);
extern void DelayXLCD(void);

# 13 "C:/Program Files (x86)/Microchip/xc8/v1.33/include/plib\delays.h"
void Delay1TCYx(unsigned char);

# 19
void Delay10TCYx(unsigned char);

# 25
void Delay100TCYx(unsigned char);

# 31
void Delay1KTCYx(unsigned char);

# 37
void Delay10KTCYx(unsigned char);

# 18 "C:/Program Files (x86)/Microchip/xc8/v1.33/include\pic18.h"
__attribute__((__unsupported__("The flash_write routine is no longer supported. Please use the peripheral library functions: WriteBytesFlash, WriteBlockFlash or WriteWordFlash"))) void flash_write(const unsigned char *, unsigned int, __far unsigned char *);


# 41
#pragma intrinsic(__nop)
extern void __nop(void);


# 146
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);
#pragma intrinsic(_delaywdt)
extern __nonreentrant void _delaywdt(unsigned long);
#pragma intrinsic(_delay3)
extern __nonreentrant void _delay3(unsigned char);

# 27 "C:/Program Files (x86)/Microchip/xc8/v1.33/include\stdlib.h"
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 65
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);

extern void abort(void);
extern void exit(int);
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);


extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 22 "C:/Program Files (x86)/Microchip/xc8/v1.33/include\string.h"
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 42
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 4 "C:/Program Files (x86)/Microchip/xc8/v1.33/include\ctype.h"
extern __bit isalpha(char);
extern __bit isupper(char);
extern __bit islower(char);
extern __bit isdigit(char);
extern __bit isxdigit(char);
extern __bit isspace(char);
extern __bit ispunct(char);
extern __bit isalnum(char);
extern __bit isprint(char);
extern __bit isgraph(char);
extern __bit iscntrl(char);


extern char toupper(char);
extern char tolower(char);

# 11 "ringbuf2.h"
struct rbuf {

# 25
char dat[96];


volatile short rix, wix;
volatile short ct;
int chan;
};

void rbuf_init(struct rbuf * rbptr, int );
void rbuf_ins(struct rbuf * rbptr, char c);
void rbuf_in_str(struct rbuf * rbptr, char *str);
void rbuf_in_bstr(struct rbuf * rbptr, unsigned char *str, unsigned long count);
char rbuf_extr(struct rbuf * rbptr );
short rbuf_hiwat(struct rbuf * rbptr );
short rbuf_lowat(struct rbuf * rbptr );
short rbuf_bct(struct rbuf * rbptr );
void rbuf_setup(struct rbuf * rbptr, int );

# 7 "lob.h"
far void show_lcd(void);
void clear_lcd(char mask);
void DisableSlaveSPI(void);
void EnableSlaveSPI(void);
char SEERead(unsigned int addr);
void SEEWrite(unsigned int addr, char data);


char save_prog(signed char progno, struct persprog* ppers);

# 417
static const unsigned int RPM_NONE = 0x0000;
static const unsigned int RPM_START = 0x0001;
static const unsigned int RPM_SHOTNUM = 0x0002;
static const unsigned int RPM_SHOTLOCN = 0x0004;
static const unsigned int RPM_SHOTSPEED = 0x0008;
static const unsigned int RPM_SHOTSPIN = 0x0010;
static const unsigned int RPM_SHOTFEED = 0x0020;
static const unsigned int RPM_EDITLOCN = 0x0040;
static const unsigned int RPM_EDITSPEED = 0x0080;
static const unsigned int RPM_EDITSPIN = 0x0100;
static const unsigned int RPM_EDITFEED = 0x0200;
static const unsigned int RPM_SHOTTABLES = 0x0400;


static const unsigned int RPM_DWNLDDRL = 0x0800;

# 543
struct t_parm {
const struct limit limits;
const char** prompt;
const char field_size;
const char field_locn;
const char text_size;
const char text_start;
const char line;
};

struct el04_loc {
uchar speed;
ushort top;
ushort bottom;
ushort elev;
signed short sweep;
signed char spin;
};

# 588
struct ee_hdr {
char vers[8];
ushort ops_size;
char npresets;
char parm_size;
char npersprog;
char pers_size;
char num_methods;
char num_locs;
char additional_locs;
char ndrills[3];


ushort elev_correction;
ushort sweep_correction;


char rsrved[9];

};


struct shot {
ushort top;
ushort bot;
ushort y;
ushort x;
ushort yLo;
ushort xLeft;
ushort feedrate;
ushort sweeprate;
};



struct rand_info {
char range;
char incr;
char start;
char max;
};

# 738
struct power_button {
uchar count;
uchar previous;
uchar current;
uchar previous_debounced;
uchar debounced;
};

# 775
struct moterr {
unsigned LoBat:1;
unsigned Reserved1:1;
unsigned Reserved2:1;
unsigned TopPeriod:1;
unsigned BotPeriod:1;
unsigned TopCurSense:1;
unsigned BotCurSense:1;
unsigned FeedCurSense:1;
unsigned SweepCurSense:1;
unsigned ElevCurSense:1;
unsigned TopCnt:1;
unsigned BotCnt:1;
unsigned Reserved:1;
unsigned SweepCnt:1;
unsigned ElevCnt:1;
};

# 15 "state_mach.h"
struct state_mach {
uchar *cur_state;
uchar *prev_state;


const uchar *pxtbl;

const uchar state_ct;
};

# 34
struct button_def {
long style ;
char *text ;
int id;
int x;
int y;
int w;
int h;
int flags;
};

# 8 "diag.h"
void dumprsDIAG(unsigned long ix, const char* cp);

void dumpsDIAG(unsigned long ix,char* cp);


void putrsDIAG(const char *data);

void putsDIAG(char *data);
void dumphex(unsigned char c);
void dump2port(unsigned uc);
void dumphex2port(unsigned char c);
void dumpaddr(unsigned int addr);
void dumplong(unsigned long addr);
void dumpshort(unsigned long addr);
unsigned long atoh(char *cptr);

# 2 "lobprog.h"
extern signed char program_ix;


# 112 "master.c"
#pragma config OSC=HSPLL
#pragma config BOREN=SBORDIS,BORV=2

#pragma config WDT=OFF,WDTPS=2048
#pragma config MCLRE=OFF
#pragma config CCP2MX=PORTC
#pragma config STVREN=ON
#pragma config LVP=OFF

#pragma config CP0=ON
#pragma config CP1=ON
#pragma config CP2=ON
#pragma config CP3=ON
#pragma config CP4=ON
#pragma config CP5=ON
#pragma config CP6=ON
#pragma config CP7=ON
#pragma config CPB=ON

# 136
extern unsigned long ee_progstart;


extern signed char ppparm_ix;
extern char curState;



extern const char line_start[];

extern signed short eladj;

extern char man_parm;
extern char preset_ix[16];
extern union parm manual;
extern union parm preset[16];




extern const struct el04_loc home_loc;
extern const struct el04_loc home_loc_CLUB;
extern const ushort base_speeds[][2];

extern long play_mode;


extern unsigned char preset_type;

extern char remote_enabled;




extern const unsigned short long preset_mask[];




extern const struct ee_hdr flash_header;

# 193
extern const char* lob_model;
extern const char* lob_version;
extern const char* homingmsg;
extern const char* battmsg;
extern const char* shutdnmsg;
extern const char* waitmsg;
extern char lcd_updated;
extern char homeshown;
extern union capstatus CapStatus;


extern unsigned char lcd_line[4][17];

extern const unsigned short base_feeds[16];
extern const unsigned short base_feeds_cont[16];
extern int batval;
extern int lastbatval;
extern ulong lastbata2d;
extern ulong LastBatAvg;


extern char dashes;
extern char pp_dashes;

# 222
extern const char* lowbatt_msg;




extern signed short elev_test_adjust;

# 233
extern const char speed_trans[];

extern char lob_test(char cmd);

# 241
extern char load_prog(signed char progno, struct persprog* ppers);

# 248
extern const struct el04_loc court_locs[][50];
extern const struct el04_loc court_locs_CLUB[][50];

extern char prog_chgd;
extern char priorState;
extern char nused;


extern void set_intensity(void);
extern signed char program_ix;

# 271
unsigned short dpb_thrash;
mini_variant elev_corr;
struct motor_status stat;
long top_pwm;
long bot_pwm;
long feed_pwm;
long accel_top;
long accel_bot;
long accel_feed;
int top_incr;
int bot_incr;
unsigned m_top_per;
unsigned d_top_per;
unsigned m_bot_per;
unsigned d_bot_per;
long d_feed_per;
unsigned top_t1;
unsigned top_t2;
unsigned last_top_t1;
unsigned last_top_t2;
unsigned bot_t1;
unsigned bot_t2;
char rem_feed_chg;

unsigned last_bot_t1;
unsigned last_bot_t2;

long feed_limit;
unsigned char top_limit;
unsigned char bot_limit;
unsigned char DoDebug;
unsigned long max_count, min_count, start_count;
int ball_feed;
unsigned feed_slow;
int main_ostate;
char SpiLock;
ulong last_feed_pwm;
volatile unsigned char BallElapsedTicks;
char BallTimerOn,FeedTimeoutOn,FeedEarlyOn,FirstShot;
char LargeSpdDrop;
volatile ulong BallElapsedHalfSec;
char timer4_cnt;
unsigned long DbgFeedType, DbgFeedPwm, DbgFeedPwm_d, DbgFeedTime, DbgTimerCnt;
unsigned long DbgBallTime, DbgSweepTime;

char ServeDiag;
struct moterr ErrorStat;

char ErrorShutDown;


char toggle_play;

# 350
unsigned SlvCmdDelay;

char DiagBuf[32];
char DiagBufOfs;
volatile struct power_button power;


char FlashBuf[64];
char SlaveCmd[32];
char SlaveCmdOfs;
char SlaveRes[32];
char SlaveResOfs;
char LastSlaveCmd;
char SlaveMotorStatus;

# 392
void set_serve(union parm* pp);
void varinit(void);
void nofunc (int code, long *args);
void kbdiag (int code, long *args);
void eeprom2flash(int code, long* args);
void poweroff(int code, long *args);
void lobmain(char key);

# 405
extern char lob_parm(char cmd, uchar *pix, signed char* pparm, unsigned short long mask);



unsigned char debounced_remote(void);
unsigned char debounced_remote_USART2(void);
void main(void);
void Setup(void);
void FillDiagBuf(void);
void exec_diag(void);
ulong FeedPwm2Sec(ulong feed);
void CalcLimits(ulong count, unsigned *SpdLimit);
int SpeedInRange(void);



void remote_diag(int code, long* args);
char check_keypad(void);

void dumpmem(int code, long *args);
void setmem(int code, long *args);
void flash(int code, long* args);
extern void FlashWr(void);
extern void FlashEr(void);
extern void FlashRd(void);
extern void lcdiag(int code, long *args);
void chartoa(const char c, char* cp, char ndig);
void spitest(int code, long *args);
void top_diag(int code, long *args);
void bot_diag(int code, long *args);
void feed_diag(int code, long *args);
void elev_diag(int code, long *args);
void sweep_diag(int code, long *args);
void stop_all(int code, long *args);
void chip_select(int code, long *args);
void ee_test(int code, long *args);
void a2d_diag(int code, long *arg);
void pwm_debug(int code, long *arg);
void slavecmd(int code, long *arg);
void CurShot_diag(int code, long *arg);
void NxtShot_diag(int code, long *arg);
void MtrResponse(int code, long *args);
void ForceShot(int code, long *args);
void SlvTimeOut(void);
void FeedMtrDone(void);
void StartFeed(void);
void StartFeedAtSpd(void);
void SetFeedImm(long feedpwm);
void StartFeedCont(long feedpwm);
void SetFeedRate(long feedpwm);
void StartTop(unsigned val);
void StartBot(unsigned val);
void SetFeedPwm(void);
void SetTopPwm(void);
void SetBotPwm(void);
void UpdTopPer(void);
void UpdBotPer(void);
void StartSweepRandom(int speed, int limit1, int limit2);
void StartElevRandom(int speed, int limit1, int limit2);
void HomeSweepMotor(void);
void SlowFeedMtr(int flag);
void StopFeedMtr(void);
void StopTopMtr(void);
void StopBotMtr(void);
void StopBidirMtrs(void);
void SndSlvMtrStatus(void);
int GetMtrResponse(void);
void PgaGain(int chan, char gain);
void PgaChan(int chan);
void ChipSelect(int dev);
void ChipReserve(int dev);
void ChipDeSelect(int dev);
void BuildCmd(int code, int cnt, long *args);
void abort_shot(void);
void CheckBattery(unsigned int val);
unsigned int BatteryAverage(unsigned int val);

struct cmd_entry {
unsigned cmd;
char code;
far void (*func)(int code, long *ary);


} const centry[]= {

# 497
{ 0x444d, 0, dumpmem },
{ 0x534d, 0, setmem },
{ 0x5357, 0, spitest },
{ 0x5352, 1, spitest },
{ 0x5131, 0, feed_diag },
{ 0x5132, 1, feed_diag },
{ 0x5133, 2, feed_diag },
{ 0x514C, 3, feed_diag },
{ 0x4C32, 3, feed_diag },
{ 0x5141, 4, feed_diag },
{ 0x5143, 5, feed_diag },
{ 0x5154, 6, feed_diag },
{ 0x5153, 7, feed_diag },
{ 0x5134, 8, feed_diag },
{ 0x514e, 9, feed_diag },
{ 0x5631, 0, top_diag },
{ 0x5632, 1, top_diag },
{ 0x5633, 2, top_diag },
{ 0x564c, 3, top_diag },
{ 0x4C33, 3, top_diag },
{ 0x5634, 4, top_diag },
{ 0x5641, 5, top_diag },
{ 0x5731, 0, bot_diag },
{ 0x5732, 1, bot_diag },
{ 0x5733, 2, bot_diag },
{ 0x574c, 3, bot_diag },
{ 0x4C34, 3, bot_diag },
{ 0x5734, 4, bot_diag },
{ 0x5741, 5, bot_diag },
{ 0x5354, 0, stop_all },
{ 0x4353, 0, chip_select },
{ 0x4552, 0, ee_test },
{ 0x4557, 1, ee_test },
{ 0x4554, 2, ee_test },
{ 0x4550, 3, ee_test },
{ 0x4553, 4, ee_test },
{ 0x4953, 0, pwm_debug },
{ 0x4443, 1, pwm_debug },
{ 0x5344, 2, pwm_debug },
{ 0x4144, 0, a2d_diag },
{ 0x4145, 1, a2d_diag },
{ 0x4153, 2, a2d_diag },
{ 0x4241, 3, a2d_diag },
{ 0x4146, 4, a2d_diag },
{ 0x4844, 6, top_diag },
{ 0x5843, 0, sweep_diag },
{ 0x5854, 1, sweep_diag },
{ 0x5943, 0, elev_diag },
{ 0x5954, 1, elev_diag },
{ 0x4358, 0, CurShot_diag },
{ 0x4359, 1, CurShot_diag },
{ 0x4354, 2, CurShot_diag },
{ 0x4342, 3, CurShot_diag },
{ 0x4346, 4, CurShot_diag },
{ 0x434e, 5, CurShot_diag },
{ 0x4349, 6, CurShot_diag },
{ 0x4348, 7, CurShot_diag },
{ 0x4356, 8, CurShot_diag },
{ 0x4331, 9, CurShot_diag },
{ 0x4e58, 0, NxtShot_diag },
{ 0x4e59, 1, NxtShot_diag },
{ 0x4e54, 2, NxtShot_diag },
{ 0x4e42, 3, NxtShot_diag },
{ 0x4e53, 4, NxtShot_diag },
{ 0x4d52, 0, MtrResponse },
{ 0x4653, 0, ForceShot },



{ 0x5831, 0x41, slavecmd},
{ 0x5832, 0x42, slavecmd},
{ 0x5833, 0x43, slavecmd},
{ 0x5841, 0x44, slavecmd},
{ 0x5848, 0x45, slavecmd},
{ 0x584C, 0x46, slavecmd},
{ 0x5850, 0x47, slavecmd},
{ 0x5853, 0x48, slavecmd},
{ 0x5856, 0x49, slavecmd},
{ 0x584f, 0x4a, slavecmd},
{ 0X5852, 0X4b, slavecmd},

{ 0x5931, 0x61, slavecmd},
{ 0x5932, 0x62, slavecmd},
{ 0x5933, 0x63, slavecmd},
{ 0x5941, 0x64, slavecmd},
{ 0x5948, 0x65, slavecmd},
{ 0x594C, 0x66, slavecmd},
{ 0x5950, 0x67, slavecmd},
{ 0x5953, 0x68, slavecmd},
{ 0x5956, 0x69, slavecmd},
{ 0x594f, 0x6a, slavecmd},
{ 0x5952, 0x6b, slavecmd},

{ 0x4453, 0x30, slavecmd},
{ 0x5353, 0x31, slavecmd},

{ 0x4f43, 0x35, slavecmd},
{ 0x4f53, 0x36, slavecmd},
{ 0x4b42, 0, kbdiag },
{ 0x4b43, 1, kbdiag },
{ 0x504f, 0, poweroff },
{ 0x4c54, 0x33, slavecmd},
{ 0x4d53, 0x34, slavecmd},

# 611
{ 0x0000, 0, nofunc }
};

# 619
unsigned long seconds;
volatile unsigned long ticks;
unsigned long batt_ticks;
unsigned char batt_cnt;
unsigned char BatAvgCnt;

# 633
unsigned short BatAvg[20];
unsigned long home_ticks;
unsigned long repeat;
unsigned short keyhold;
unsigned long odtix;
unsigned char msec5;



int TickIntCnt;
char cursor_state;

unsigned char cursor_tmr;

unsigned char dashes_tmr = 180;

# 657
const char ready[] = "\n\rREADY>";
const char InvCmd[] = "\n\rInvalid Command>";
const char InvArg[] = "\n\rInvalid Argument>";
const char crlf[] = "\n\r";
const char space[] = " ";
const char comma[] = ",";
const char ShutDown[] = "\n\rShut Down\n\r";

# 670
extern struct persprog act_program;
extern uchar loaded_progno;
extern char cur_st;
extern char prev_st;
char a2dChan;
char a2dChan2Dump;

# 689
const char a2dGain[] = {0,6,6,6,6,4,0};

# 695
char power_on;
char power_state;


long tmp;


char top_dir;
char bot_dir;
int top_drift;
int top_delta;

int top_last_delta;
int top_last_delta1;
unsigned TopSpdLimit[2];
int bot_drift;
int bot_delta;
int bot_delta1;
int bot_last_delta;
int bot_last_delta1;
unsigned BotSpdLimit[2];
unsigned top_mid;
int top_phase6_cnt;
int top_phase3_cnt;
unsigned bot_mid;
int bot_phase6_cnt;
int top_timer_cnt;
volatile int bot_timer_cnt;
void DelayFor18TCY(void) {
__nop();
__nop();
__nop();
__nop();
__nop();
__nop();
__nop();
__nop();
__nop();
__nop();
__nop();
__nop();
}




void DelayPORXLCD(void)
{
Delay1KTCYx(75);
}

void DelayXLCD(void)
{
Delay1KTCYx(10);
}

int bot_phase3_cnt;

struct {
unsigned Run:1;


unsigned phase1:1;
unsigned phase2:1;
unsigned phase3:1;
unsigned phase4:1;
unsigned phase5:1;
unsigned phase6:1;
unsigned phase7:1;
unsigned tick:1;
unsigned Hold:1;


unsigned Slow:1;
unsigned Cont:1;
unsigned Ok2Updt:1;
unsigned BatTest:1;
} top_stat, bot_stat, feed_stat;




ushort CurShotState, NextShotState;
struct shot CurShot,NextShot,LastShot;


unsigned char model_type;
unsigned char pp_maxloc;

# 788
const int accel_low[8][2] = {

0x10, 0x10,
0x80, 0x40,
0xa0, 0x80,
0x180, 0x100,
0x200, 0x200,
0x300, 0x400,
0x400, 0x1000,
0x1000, 0x5800,
};




const int accel_med[8][2] = {

0x10, 0x10,
0x80, 0x40,
0x100, 0x80,
0x300, 0x100,
0x800, 0x400,
0x1000, 0x1000,
0x1400, 0x2000,
0x1800, 0x5800,
};




const int accel_hi[8][2] = {

0x10, 0x80,
0x80, 0x80,
0x100, 0x80,
0x300, 0x100,
0x800, 0x800,
0x1400, 0x1000,
0x1800, 0x2000,
0x2000, 0x5800,
};




const int accel_xlow_d[8][2] = {

0x10, 0x10,
0x80, 0x40,
0x100, 0x100,
0x120, 0x400,
0x180, 0x800,
0x300, 0xc00,
0x400, 0x1000,
0x1000, 0x5800,
};




const int accel_low_d[8][2] = {

0x10, 0x10,
0x80, 0x40,
0x100, 0x80,
0x180, 0x100,
0x200, 0x200,
0x300, 0x400,
0x400, 0x1000,
0x1000, 0x5800,
};




const int accel_med_d[8][2] = {

0x10, 0x10,
0x80, 0x40,
0x100, 0x80,
0x300, 0x100,
0x800, 0x400,
0x1000, 0x400,
0x1400, 0x800,
0x1800, 0x5800,
};




const int accel_hi_d[8][2] = {

0x10, 0x10,
0x80, 0x40,
0x100, 0x80,
0x300, 0x100,
0x800, 0x100,
0x1400, 0x100,
0x1800, 0x800,
0x2000, 0x5800,
};
int accel_range[8][2];
int accel_range_bot[8][2];


int a2dValue[7];
char a2dtest;

# 937
const unsigned int CurSense[25-4+2][2] = {

104,110,
130,105,
157,100,
183,95,
209,90,
235,85,
261,80,
288,75,
314,70,
340,65,
366,60,
392,55,
419,50,
445,45,
471,40,
497,35,
513,30,
549,25,
576,20,
602,15,
628,10,
654,5,



884,0,

};


unsigned char CurSenseCt[2][23];




unsigned char BDM_CurSenseCt[3];
unsigned int BDM_TripPoint[3];
unsigned int BDM_TripTime[3];
unsigned char BAT_CurSenseCt;
unsigned int BAT_TripPoint;
unsigned int BAT_TripTime;
unsigned int BAT_lastval;

# 994
const ulong FeedStartTbl[][3] = {

0x6000, 0x6750, 0x5250,
0x4500, 0x5250, 0x4250,
0x4000, 0x4250, 0x3800,
0x3600, 0x3800, 0x3400,
0x3200, 0x3400, 0x3000,
0x3000, 0x3200, 0x2900,
0x2900, 0x3000, 0x2800,
0x2800, 0x2900, 0x2700,
0x2700, 0x2800, 0x2600,
0x2500, 0x2600, 0x2350,
0x2200, 0x2350, 0x2150,
0x2100, 0x2150, 0x2000,
0x1a00, 0x1d50, 0x1950,
0,0,0
};


char rc_qualified = 0;


char manual_horiz_decr = 0;


int ELEV_CORR_MIN;


int ball_feed_bottom;


char RemoteStringVar[10];
char RemoteString[68];

# 1032
unsigned char LargeSpdDropCnt = 0;



long MINPWM;



unsigned char speedmin;
unsigned char speedmax;
signed char spinmin;
signed char spinmax;
unsigned char RemoteDataCnt;
unsigned int RemotePgmMode;
unsigned char RemotePgmShot;
unsigned char RemotePgmLocn[6];
unsigned char RemotePgmSpeed[6];


signed char RemotePgmSpin[6];

unsigned char RemotePgmFeed[6];
unsigned char RemotePgmMethod[6];
char RemoteDataReceived = 0;
char UDrillShots;


void RemoteSaveDrill(void);


char BatLevelDisplay;
unsigned char BatLevelDisplayTmr;
int BatPercent;
extern ulong start_delay;
unsigned char PlayLEDTmr;
unsigned char PlayLEDPass;
extern long PlayModeBlink;

# 1079
struct rbuf di_inbuf;
struct rbuf di_outbuf;

# 1089
struct rbuf rm_inbuf;
struct rbuf rm_outbuf;

# 1132
void interrupt isr(void)

{
asm(" clrwdt");
if (INTCONbits.INT0IE) {
if(INTCONbits.INT0IF) {
INTCONbits.INT0IE = 1;
INTCONbits.INT0IF = 0;
}
}
if (INTCONbits.PEIE) {
if (INTCONbits.TMR0IF) {
TMR0L = 0xa8;
TMR0H = 0x61;
stat.TickInt = TRUE;
INTCONbits.TMR0IF = 0;
++TickIntCnt;
}
if (PIR1bits.CCP1IF) {
top_t1 = top_t2;
top_t2 = ReadCapture1();
m_top_per = top_t2 - top_t1;
++top_timer_cnt;
PIR1bits.CCP1IF = 0;
}
if (PIR2bits.CCP2IF) {
bot_t1 = bot_t2;
bot_t2 = ReadCapture2();
m_bot_per = bot_t2 - bot_t1;
++bot_timer_cnt;
PIR2bits.CCP2IF = 0;
}

# 1185
if (PIR3bits.TMR4IF) {
if (!timer4_cnt) {
++timer4_cnt;
if (!SpiLock && !a2dtest && (stat.a2dStarted == FALSE) && !(msec5 & 0x01U)) {
PgaGain(a2dChan,a2dGain[a2dChan]);
if (a2dChan == 0)
DelayFor18TCY();
ADCON0 = 1;
ADCON0bits.NOT_DONE = TRUE;
stat.a2dStarted = TRUE;
}
SetTopPwm();
if (PIR1bits.CCP1IF) {
top_t1 = top_t2;
top_t2 = ReadCapture1();
m_top_per = top_t2 - top_t1;
++top_timer_cnt;
PIR1bits.CCP1IF = 0;
}
SetBotPwm();
SetFeedPwm();
--timer4_cnt;
}
PIR3bits.TMR4IF = 0;
}
}
}




void UpdTopPer(void)
{
int top_delta1;

# 1225
INTCONbits.GIE = 0;
if ((top_delta == 0) && (m_top_per != d_top_per)) {
} else {



last_top_t1 = top_t1;
last_top_t2 = top_t2;
top_delta1 = top_delta;
top_last_delta1 = top_last_delta;
top_delta = 0;
top_last_delta = top_delta1;
top_stat.tick = 1;
top_timer_cnt = 0;

# 1245
if ((feed_stat.Run) || (feed_stat.Hold && ((feed_pwm >= (long)last_feed_pwm)||(feed_pwm > 0x2800000)))
|| ((feed_stat.Cont) && (play_mode & 8) && (play_mode & 1))
|| ((feed_stat.Cont) && (preset_type <= 1U) && (play_mode & 2) && (play_mode & 1)
&& (preset[preset_type].feed == 1))) {

# 1266
if (((play_mode & 2) && (preset_type == 2) && (LargeSpdDrop == 0))
&& (((top_last_delta1 - top_last_delta) > 0x080) || ((bot_last_delta1 - bot_last_delta) > 0x080))) {

++LargeSpdDropCnt;

if (LargeSpdDropCnt > 5) {

LargeSpdDrop = 1;
LargeSpdDropCnt = 0;
putrsDIAG("\n\rLargeSpdDrop_Z (unfiltered)");
}

} else {
LargeSpdDropCnt = 0;
}


if ((top_last_delta1 - top_last_delta) > ball_feed) {
LargeSpdDrop = 1;
putrsDIAG("\n\rLargeSpdDrop_Top (unfiltered)");
}

# 1292
if ((play_mode & 2) && (preset_type == 2)) {
if ((bot_last_delta1 - bot_last_delta) > ball_feed_bottom) {
LargeSpdDrop = 1;
putrsDIAG("\n\rLargeSpdDrop_Bot (unfiltered)");
}
}
} else LargeSpdDropCnt = 0;

}
INTCONbits.GIE = 1;

# 1326
}


void UpdBotPer(void)
{
INTCONbits.GIE = 0;
if ((bot_delta == 0) && (m_bot_per != d_bot_per)) {
} else {
last_bot_t1 = bot_t1;
last_bot_t2 = bot_t2;
bot_delta1 = bot_delta;
bot_last_delta1 = bot_last_delta;
bot_delta = 0;
bot_last_delta = bot_delta1;
bot_stat.tick = 1;
}

INTCONbits.GIE = 1;
}

void CalcTopPwm(void)
{
unsigned drift, drift1, ix;
int incr = 0;
int delta;
unsigned abs_delta, abs_delta1;
int rtop_last_delta, rtop_last_delta1;
int TooFast;
int SpdDir;

# 1362
if ((top_pwm > 0x2000000L) && (m_top_per >= 60000U)) {
ErrorStat.TopCnt = 1;
if (ErrorShutDown == 0) {
ErrorShutDown = 1;

}
return;
}



drift = 8;
if (m_top_per > 0x2000U) {
drift += (m_top_per - 0x2000) >> 9;
} else {
if (m_top_per < 0x1800U) drift = 1;
else
drift -= (0x2000U - m_top_per) >> 11;
}
top_drift = drift;
drift1 = drift << 1;
delta = d_top_per - m_top_per;
if (d_top_per > m_top_per) {
abs_delta = delta;
TooFast = 1;
} else {
abs_delta = 0 - delta;
TooFast = 0;
}
SpdDir = ((top_last_delta > top_last_delta1)?1:0);
abs_delta1 = (top_last_delta - top_last_delta1);
if (abs_delta1 & 0x8000) abs_delta1 = 0 - abs_delta1;

top_delta = delta;

if (top_stat.BatTest) return;
if ((d_top_per == 0U && top_pwm == 0L) || (feed_stat.Run && !feed_stat.Ok2Updt)) {


} else if (m_top_per != d_top_per) {
if (((top_pwm & 0x3ff0000L) < MINPWM) || (m_top_per == 0U)) top_pwm += accel_top;
else if (top_stat.Run && top_dir) {
delta = 0 - delta;
rtop_last_delta = 0 - top_last_delta;
rtop_last_delta1 = 0 - top_last_delta1;
if (top_stat.phase1) {
if (m_top_per < top_mid) {
top_stat.phase1 = 0;
top_stat.phase2 = 1;
top_stat.tick = 0;
incr = 0 - accel_top;

# 1416
} else {
incr = accel_top;
if ((top_pwm & 0x3ff0000) == 0x3ff0000) {
top_stat.phase1 = 0;
top_stat.phase3 = 1;
top_stat.tick = 0;

# 1425
}
}
} else if (top_stat.phase3 || top_stat.phase5) {

if ((top_pwm & 0x3ff0000L) == 0x3ff0000L) {
if ((rtop_last_delta1 - delta) < (int)drift1) {
if (++top_phase3_cnt > 2) {
top_stat.phase3 = 0;
top_stat.phase5 = 0;
top_stat.Run = 0;

# 1438
return;
}
} else
top_phase3_cnt = 0;
}
if (m_top_per < top_mid) {
top_stat.phase3 = 0;
top_stat.phase5 = 0;
top_stat.phase4 = 1;
incr = 0 - (accel_top >> 1);

# 1451
} else incr = (SpdDir)?(accel_top >> ((top_stat.phase3)?1:2)):accel_top;
} else if (top_stat.phase2) {
if (top_stat.tick) {
top_stat.tick = 0;
ix = rtop_last_delta1 - rtop_last_delta;
if (rtop_last_delta > rtop_last_delta1) ix = 0 - ix;
if ((ix) < (drift >> 1)) {
top_stat.phase2 = 0;
top_stat.phase6 = 1;
top_phase6_cnt = 0;

# 1464
return;
}
}
if (TooFast == 1) {
if (rtop_last_delta1 & 0x8000) {
if (delta < rtop_last_delta1) {
incr = 0 - accel_top;
} else if ((0-delta)>(int)drift1) {
incr = 0 - (accel_top >> 1);
} else if ((delta - rtop_last_delta1) > (int)drift) {
incr = 0 + (accel_top >> 1);
} else {
incr = 0;
top_stat.phase2 = 0;
top_stat.Run = 0;

# 1482
}
} else if ((rtop_last_delta1 - delta) < (int)drift1) {
top_stat.phase2 = 0;
top_stat.phase6 = 1;
top_phase6_cnt = 0;

# 1490
} else {
incr = 0 - (accel_top >> 1);
}
} else
if (abs_delta < drift1) {
if (abs_delta1 < (drift >> 2)) {
incr = 0;
top_stat.phase2 = 0;
top_stat.Run = 0;

# 1502
} else {
top_stat.phase2 = 0;
top_stat.phase6 = 1;
top_phase6_cnt = 0;

# 1509
}
} else if (!SpdDir) {

top_mid = d_top_per + (delta >> 1);
top_stat.phase2 = 0;
if (abs_delta > (drift << 5)) top_stat.phase3 = 1;
else top_stat.phase5 = 1;

# 1519
incr = accel_top >> 1;
} else if (abs_delta1 < drift) {
top_stat.phase2 = 0;
if (abs_delta < (drift << 5)) {
incr = 0;
top_stat.phase2 = 0;
top_stat.Run = 0;

# 1529
} else {
top_mid = d_top_per + (delta >> 1);
top_stat.phase3 = 1;

# 1535
incr = accel_top >> 1;
}
} else {
if (abs_delta < (drift << 5)) {
if (abs_delta1 < drift1)
incr = 0 - (accel_top >> 2);
else if (abs_delta1 < (drift1 + drift))
incr = 0 - (accel_top >> 1);
else
incr = 0 - accel_top;
} else
incr = 0 - accel_top;
}
} else if (top_stat.phase4) {
if (top_stat.tick) {
top_stat.tick = 0;
if (abs_delta1 < (drift >> 1)) {
top_stat.phase4 = 0;
top_stat.phase6 = 1;
top_phase6_cnt = 0;

# 1558
return;
}
}
if (TooFast == 1) {
if (!SpdDir) {
if (abs_delta < (drift << 5)) {
incr = 0;
top_stat.phase4 = 0;
top_stat.Run = 0;

# 1570
} else {
if (abs_delta1 > drift)
incr = 0 - (accel_top >> 1);
else incr = 0 - (accel_top >> 2);
}
} else if (abs_delta1 > (drift >> 2)) {
if ((abs_delta1 > drift1) || (abs_delta > (drift << 5)))
incr = 0 - accel_top;
else if (abs_delta > (drift << 5))
incr = 0 - accel_top;
else if (abs_delta1 > drift)
incr = 0 - (accel_top >> 1);
else incr = 0 - (accel_top >> 2);
} else {
if (abs_delta < drift1) {
incr = 0;
top_stat.phase4 = 0;
top_stat.phase6 = 1;
top_phase6_cnt = 0;

# 1592
} else {
incr = 0 - (accel_top >> 2);
}
}
} else {
if (SpdDir && (delta & 0x8000) && (abs_delta > (drift << 5))) {
incr = 0 - accel_top;
} else
if (!SpdDir) {
top_stat.phase4 = 0;
top_stat.phase6 = 1;
top_phase6_cnt = 0;

# 1607
return;
} else if ((abs_delta1 < drift) || (abs_delta < drift1)) {

top_stat.phase4 = 0;
top_stat.phase6 = 1;
top_phase6_cnt = 0;

# 1616
return;
} else {
incr = 0 - ((delta > (int)(drift1 >> 1))?accel_top:(accel_top>>1));
}
}
} else if (top_stat.phase6) {
if (top_stat.tick) {
top_stat.tick = 0;
if (++top_phase6_cnt >= 3) {
if ((TooFast==1) && !SpdDir) {
top_stat.phase6 = 0;
top_stat.Run = 0;

# 1632
return;
}
if (TooFast) {
if (SpdDir) {



if ((abs_delta < (drift >> 2)) && (abs_delta1 < (drift >> 22))) {

top_stat.phase6 = 0;
top_stat.Run = 0;

# 1646
return;
} else {

top_stat.phase6 = 0;
top_stat.phase4 = 1;
incr = 0 - accel_top;

# 1655
}
} else {
if (abs_delta < (drift << 5)) {
top_stat.phase6 = 0;
top_stat.Run = 0;

# 1663
return;
} else {

top_stat.phase6 = 0;
top_stat.phase4 = 1;
incr = 0 - accel_top;

# 1672
}
}
} else {
if (SpdDir && (abs_delta < (drift << 5)) && (abs_delta1 < (drift >> 1))) {

top_stat.phase6 = 0;
top_stat.Run = 0;

# 1682
return;
} else {
top_mid = d_top_per + delta - (delta >> 2);
top_stat.phase6 = 0;
top_stat.phase5 = 1;
incr = accel_top;

# 1691
}
}
}
} else {
return;
}
} else if (top_stat.phase7) {
if (top_stat.tick) {
top_stat.tick = 0;
top_stat.phase7 = 0;
top_stat.phase6 = 1;
top_phase6_cnt = 0;

# 1706
} else {
incr = accel_top >> 2;
if (TooFast)
incr = 0 - incr;
}
}
if ((top_pwm += incr) > 0x3ff0000L)
top_pwm = 0x3ff0000L;
}
}
INTCONbits.GIE = 0;
top_incr = incr;
INTCONbits.GIE = 1;
}

void SetTopPwm(void)
{
unsigned drift, drift1, ix;
int i;
int incr = 0;
int delta;

if (ErrorShutDown) return;



drift = 8;
if (m_top_per > 0x2000U) {
drift += (m_top_per - 0x2000U) >> 9;
} else {
if (m_top_per < 0x1800U) drift = 1;
else
drift -= (0x2000U - m_top_per) >> 11;
}
top_drift = drift;
drift1 = drift << 1;
delta = (int)(d_top_per - m_top_per);

if (top_stat.BatTest) return;
if ((d_top_per == 0U && top_pwm == 0L) || (feed_stat.Run && !feed_stat.Ok2Updt)) {


} else if (m_top_per != d_top_per) {
if (((top_pwm & 0x3ff0000L) < MINPWM) || (m_top_per == 0U)) top_pwm += accel_top;
else if (top_stat.Run && top_dir) {
if ((top_pwm += top_incr) > 0x3ff0000L)
top_pwm = 0x3ff0000L;
} else if (top_stat.Run) {
top_stat.tick = 0;
if (top_stat.phase1) {
if (m_top_per > top_mid) {
top_stat.phase1 = 0;
top_stat.phase2 = 1;
delta = delta >> 2;
if (delta > 500) delta = 500;
top_mid = d_top_per - delta;

# 1765
} else {
incr = accel_top;
}
if ((top_pwm -= incr) < MINPWM) top_pwm = MINPWM;



} else if (top_stat.phase2) {
if (m_top_per > top_mid) {
top_stat.phase2 = 0;
top_stat.phase3 = 1;

# 1779
}



} else if (top_stat.phase3) {
if (delta < 0) {
top_stat.Run = 0;
top_stat.phase3 = 0;

# 1790
} else if (top_last_delta > top_last_delta1) {
incr = accel_top;
if (delta < (int)(drift1 << 1)) {
top_stat.Run = 0;
top_stat.phase3 = 0;

# 1798
}
} else if ((top_last_delta1 - top_last_delta) < (int)(drift >> 1)) {
if (delta > (int)(drift << 5)) {
top_mid = m_top_per + (delta >> 3);
top_stat.phase3 = 0;
top_stat.phase1 = 1;
incr = accel_top;

# 1808
} else {
top_stat.Run = 0;
top_stat.phase3 = 0;

# 1814
}
} else if (delta < (int)drift1) {
top_stat.Run = 0;
top_stat.phase3 = 0;

# 1821
} else if (delta < (int)(drift << 5)) {
incr = 0 - (accel_top >> 2);
} else incr = 0 - (accel_top >> 2) - (accel_top >> 1);
}
if ((top_pwm -= incr) < MINPWM) top_pwm = MINPWM;




} else if (m_top_per < d_top_per) {
if ((delta > (int)drift) || (delta > top_last_delta)) {
for (i=0; i<8; i++) {
if (accel_range[i][0] < delta)
incr = accel_range[i][1];
}
if (delta > top_last_delta) {
incr = accel_top;
} else
if (incr > accel_top) incr = accel_top;
if ((top_pwm -= incr) < 0L) top_pwm = 0L;
}
} else {
delta = 0 - delta;
if ((top_pwm & 0x3ff0000L) == 0x3ff0000L) {
} else {
if (top_dir == 0) {
for (i=0; i<8; i++) {
accel_range[i][0] = accel_low[i][0];
accel_range[i][1] = accel_low[i][1];
}
top_dir = 1;
}
if (delta > (int)drift) {
if (BallTimerOn && (top_last_delta < top_last_delta1) && (delta > (int)(drift << 4))) incr = accel_top;
else
for (i=0; i<8; i++) {
if (accel_range[i][0] < delta)
incr = accel_range[i][1];
}
if (incr > accel_top) incr = accel_top;
if ((top_pwm += incr) > 0x3ff0000L)
top_pwm = 0x3ff0000L;
}
}
}
SetDCPWM4((unsigned int)((top_pwm & 0x3fc0000L) >> 16));
}
}

void CalcBotPwm(void)
{
unsigned drift, drift1, ix;
int incr = 0;
int delta;
unsigned abs_delta, abs_delta1;
int rbot_last_delta, rbot_last_delta1;
int TooFast;
int SpdDir;

# 1885
if ((bot_pwm > 0x2000000L) && (m_bot_per >= 60000U)) {
ErrorStat.BotCnt = 1;
if (ErrorShutDown == 0) {
ErrorShutDown = 1;


putrsDIAG((const char far *)"B\r\n");

}
return;
}



drift = 8;
if (m_bot_per > 0x2000U) {
drift += (m_bot_per - 0x2000U) >> 9;
} else {
if (m_bot_per < 0x1800U) drift = 1;
else
drift -= (0x2000U - m_bot_per) >> 11;
}
bot_drift = drift;
drift1 = drift << 1;
delta = d_bot_per - m_bot_per;
if (d_bot_per > m_bot_per) {
abs_delta = delta;
TooFast = 1;
} else {
abs_delta = 0 - delta;
TooFast = 0;
}
SpdDir = ((bot_last_delta > bot_last_delta1)?1:0);
abs_delta1 = (bot_last_delta - bot_last_delta1);
if (abs_delta1 & 0x8000) abs_delta1 = 0 - abs_delta1;

bot_delta = delta;

if (top_stat.BatTest) return;
if ((d_bot_per == 0U && bot_pwm == 0L) || (feed_stat.Run && !feed_stat.Ok2Updt)) {


} else if (m_bot_per != d_bot_per) {
if (((bot_pwm & 0x3ff0000L) < MINPWM) || (m_bot_per == 0U)) bot_pwm += accel_bot;
else if (bot_stat.Run && bot_dir) {
delta = 0 - delta;
rbot_last_delta = 0 - bot_last_delta;
rbot_last_delta1 = 0 - bot_last_delta1;
if (bot_stat.phase1) {
if (m_bot_per < bot_mid) {
bot_stat.phase1 = 0;
bot_stat.phase2 = 1;
bot_stat.tick = 0;
incr = 0 - accel_bot;

# 1942
} else {
incr = accel_bot;
if ((bot_pwm & 0x3ff0000L) == 0x3ff0000L) {
bot_stat.phase1 = 0;
bot_stat.phase3 = 1;
bot_stat.tick = 0;

# 1951
}
}
} else if (bot_stat.phase3 || bot_stat.phase5) {

if ((bot_pwm & 0x3ff0000L) == 0x3ff0000L) {
if ((rbot_last_delta1 - delta) < (int)drift1) {
if (++bot_phase3_cnt > 2) {
bot_stat.phase3 = 0;
bot_stat.phase5 = 0;
bot_stat.Run = 0;

# 1964
return;
}
} else
bot_phase3_cnt = 0;
}
if (m_bot_per < bot_mid) {
bot_stat.phase3 = 0;
bot_stat.phase5 = 0;
bot_stat.phase4 = 1;
incr = 0 - (accel_bot >> 1);

# 1977
} else incr = (SpdDir)?(accel_bot >> ((bot_stat.phase3)?1:2)):accel_bot;
} else if (bot_stat.phase2) {
if (bot_stat.tick) {
bot_stat.tick = 0;
ix = rbot_last_delta1 - rbot_last_delta;
if (rbot_last_delta > rbot_last_delta1) ix = 0 - ix;
if ((ix) < (drift >> 1)) {
bot_stat.phase2 = 0;
bot_stat.phase6 = 1;
bot_phase6_cnt = 0;

# 1990
return;
}
}
if (TooFast == 1) {
if (rbot_last_delta1 & 0x8000) {
if (delta < rbot_last_delta1) {
incr = 0 - accel_bot;
} else if ((0-delta)>(int)drift1) {
incr = 0 - (accel_bot >> 1);
} else if ((delta - rbot_last_delta1) > (int)drift) {
incr = 0 + (accel_bot >> 1);
} else {
incr = 0;
bot_stat.phase2 = 0;
bot_stat.Run = 0;

# 2008
}
} else if ((rbot_last_delta1 - delta) < (int)drift1) {
bot_stat.phase2 = 0;
bot_stat.phase6 = 1;
bot_phase6_cnt = 0;

# 2016
} else {
incr = 0 - (accel_bot >> 1);
}
} else
if (abs_delta < drift1) {
if (abs_delta1 < (drift >> 2)) {
incr = 0;
bot_stat.phase2 = 0;
bot_stat.Run = 0;

# 2028
} else {
bot_stat.phase2 = 0;
bot_stat.phase6 = 1;
bot_phase6_cnt = 0;

# 2035
}
} else if (!SpdDir) {

bot_mid = d_bot_per + (delta >> 1);
bot_stat.phase2 = 0;
if (abs_delta > (drift << 5)) bot_stat.phase3 = 1;
else bot_stat.phase5 = 1;

# 2045
incr = accel_bot >> 1;
} else if (abs_delta1 < drift) {
bot_stat.phase2 = 0;
if (abs_delta < (drift << 5)) {
incr = 0;
bot_stat.phase2 = 0;
bot_stat.Run = 0;

# 2055
} else {
bot_mid = d_bot_per + (delta >> 1);
bot_stat.phase3 = 1;

# 2061
incr = accel_bot >> 1;
}
} else {
if (abs_delta < (drift << 5)) {
if (abs_delta1 < drift1)
incr = 0 - (accel_bot >> 2);
else if (abs_delta1 < (drift1 + drift))
incr = 0 - (accel_bot >> 1);
else
incr = 0 - accel_bot;
} else
incr = 0 - accel_bot;
}
} else if (bot_stat.phase4) {
if (bot_stat.tick) {
bot_stat.tick = 0;
if (abs_delta1 < (drift >> 1)) {
bot_stat.phase4 = 0;
bot_stat.phase6 = 1;
bot_phase6_cnt = 0;

# 2084
return;
}
}
if (TooFast == 1) {
if (!SpdDir) {
if (abs_delta < (drift << 5)) {
incr = 0;
bot_stat.phase4 = 0;
bot_stat.Run = 0;

# 2096
} else {
if (abs_delta1 > drift)
incr = 0 - (accel_bot >> 1);
else incr = 0 - (accel_bot >> 2);
}
} else if (abs_delta1 > (drift >> 2)) {
if ((abs_delta1 > drift1) || (abs_delta > (drift << 5)))
incr = 0 - accel_bot;
else if (abs_delta > (drift << 5))
incr = 0 - accel_bot;
else if (abs_delta1 > drift)
incr = 0 - (accel_bot >> 1);
else incr = 0 - (accel_bot >> 2);
} else {
if (abs_delta < drift1) {
incr = 0;
bot_stat.phase4 = 0;
bot_stat.phase6 = 1;
bot_phase6_cnt = 0;

# 2118
} else {
incr = 0 - (accel_bot >> 2);
}
}
} else {
if (SpdDir && (delta & 0x8000) && (abs_delta > (drift << 5))) {
incr = 0 - accel_bot;
} else
if (!SpdDir) {
bot_stat.phase4 = 0;
bot_stat.phase6 = 1;
bot_phase6_cnt = 0;

# 2133
return;
} else if ((abs_delta1 < drift) || (abs_delta < drift1)) {

bot_stat.phase4 = 0;
bot_stat.phase6 = 1;
bot_phase6_cnt = 0;

# 2142
return;
} else {
incr = 0 - ((delta > (int)(drift1 >> 1))?accel_bot:(accel_bot>>1));
}
}
} else if (bot_stat.phase6) {
if (bot_stat.tick) {
bot_stat.tick = 0;
if (++bot_phase6_cnt >= 3) {
if ((TooFast==1) && !SpdDir) {
bot_stat.phase6 = 0;
bot_stat.Run = 0;

# 2158
return;
}
if (TooFast) {
if (SpdDir) {

if ((abs_delta < (drift >> 2)) && (abs_delta1 < (drift >> 22))) {
bot_stat.phase6 = 0;
bot_stat.Run = 0;

# 2169
return;
} else {

bot_stat.phase6 = 0;
bot_stat.phase4 = 1;
incr = 0 - accel_bot;

# 2178
}
} else {
if (abs_delta < (drift << 5)) {
bot_stat.phase6 = 0;
bot_stat.Run = 0;

# 2186
return;
} else {

bot_stat.phase6 = 0;
bot_stat.phase4 = 1;
incr = 0 - accel_bot;

# 2195
}
}
} else {
if (SpdDir && (abs_delta < (drift << 5)) && (abs_delta1 < (drift >> 1))) {

bot_stat.phase6 = 0;
bot_stat.Run = 0;

# 2205
return;
} else {
bot_mid = d_bot_per + delta - (delta >> 2);
bot_stat.phase6 = 0;
bot_stat.phase5 = 1;
incr = accel_bot;

# 2214
}
}
}
} else {
return;
}
} else if (bot_stat.phase7) {
if (bot_stat.tick) {
bot_stat.tick = 0;
bot_stat.phase7 = 0;
bot_stat.phase6 = 1;
bot_phase6_cnt = 0;

# 2229
} else {
incr = accel_bot >> 2;
if (TooFast)
incr = 0 - incr;
}
}
if ((bot_pwm += incr) > 0x3ff0000L)
bot_pwm = 0x3ff0000L;
}
}
INTCONbits.GIE = 0;
bot_incr = incr;
INTCONbits.GIE = 1;
}

void SetBotPwm(void)
{
unsigned drift, drift1, ix;
int i;
int incr = 0;
int delta;

if (ErrorShutDown) return;



drift = 8;
if (m_bot_per > 0x2000U) {
drift += (m_bot_per - 0x2000U) >> 9;
} else {
if (m_bot_per < 0x1800U) drift = 1;
else
drift -= (0x2000U - m_bot_per) >> 11;
}
bot_drift = drift;
drift1 = drift << 1;
delta = d_bot_per - m_bot_per;

if (top_stat.BatTest) return;
if ((d_bot_per == 0U && bot_pwm == 0L) || (feed_stat.Run && !feed_stat.Ok2Updt)) {


} else if (m_bot_per != d_bot_per) {
if (((bot_pwm & 0x3ff0000L) < MINPWM) || (m_bot_per == 0U)) bot_pwm += accel_bot;
else if (bot_stat.Run && bot_dir) {
if ((bot_pwm += bot_incr) > 0x3ff0000L)
bot_pwm = 0x3ff0000L;
} else if (bot_stat.Run) {
bot_stat.tick = 0;
if (bot_stat.phase1) {
if (m_bot_per > bot_mid) {
bot_stat.phase1 = 0;
bot_stat.phase2 = 1;
delta = delta >> 2;
if (delta > 500) delta = 500;
bot_mid = d_bot_per - delta;

# 2288
} else {
incr = accel_bot;
}
if ((bot_pwm -= incr) < MINPWM) bot_pwm = MINPWM;



} else if (bot_stat.phase2) {
if (m_bot_per > bot_mid) {
bot_stat.phase2 = 0;
bot_stat.phase3 = 1;

# 2302
}



} else if (bot_stat.phase3) {
if (delta < 0) {
bot_stat.Run = 0;
bot_stat.phase3 = 0;

# 2313
} else if (bot_last_delta > bot_last_delta1) {
incr = accel_bot;
if (delta < (int)(drift1 << 1)) {
bot_stat.Run = 0;
bot_stat.phase3 = 0;

# 2321
}
} else if ((bot_last_delta1 - bot_last_delta) < (int)(drift >> 1)) {
if (delta > (int)(drift << 5)) {
bot_mid = m_bot_per + (delta >> 3);
bot_stat.phase3 = 0;
bot_stat.phase1 = 1;
incr = accel_bot;

# 2331
} else {
bot_stat.Run = 0;
bot_stat.phase3 = 0;

# 2337
}
} else if (delta < (int)drift1) {
bot_stat.Run = 0;
bot_stat.phase3 = 0;

# 2344
} else if (delta < (int)(drift << 5)) {
incr = 0 - (accel_bot >> 2);
} else incr = 0 - (accel_bot >> 2) - (accel_bot >> 1);
}
if ((bot_pwm -= incr) < MINPWM) bot_pwm = MINPWM;




} else if (m_bot_per < d_bot_per) {
if ((delta > (int)drift) || (delta > bot_last_delta)) {
for (i=0; i<8; i++) {
if (accel_range_bot[i][0] < delta)
incr = accel_range_bot[i][1];
}
if (delta > bot_last_delta) {
incr = accel_bot;
} else
if (incr > accel_bot) incr = accel_bot;
if ((bot_pwm -= incr) < 0) bot_pwm = 0L;
}
} else {
delta = 0 - delta;
if ((bot_pwm & 0x3ff0000L) == 0x3ff0000L) {
} else {
if (bot_dir == 0) {
for (i=0; i<8; i++) {
accel_range_bot[i][0] = accel_low[i][0];
accel_range_bot[i][1] = accel_low[i][1];
}
bot_dir = 1;
}
if (delta > (int)drift) {
if (BallTimerOn && (bot_last_delta < bot_last_delta1) && (delta > (int)(drift << 4))) incr = accel_bot;
else
for (i=0; i<8; i++) {
if (accel_range_bot[i][0] < delta)
incr = accel_range_bot[i][1];
}
if (incr > accel_bot) incr = accel_bot;
if ((bot_pwm += incr) > 0x3ff0000L)
bot_pwm = 0x3ff0000L;
}
}
}
SetDCPWM5((unsigned int)((bot_pwm & 0x3fc0000L) >> 16));
}
}

void SetFeedPwm(void)
{
unsigned delta;

if (ErrorShutDown) return;

if ((feed_pwm & 0x3ff0000) != d_feed_per) {
if (feed_pwm > d_feed_per) {
if ((feed_pwm -= accel_feed) < d_feed_per)
feed_pwm = d_feed_per;
if (feed_pwm < 0)
feed_pwm = 0;
} else {
if ((feed_pwm += accel_feed) > d_feed_per)
feed_pwm = d_feed_per;
if (feed_pwm > 0x3ff0000)
feed_pwm = 0x3ff0000;
}

SetDCPWM3((unsigned int)((feed_pwm & 0x3ff0000) >> 16));
}
}

void SvcShots(void)
{
long arg;
static long feed_rate_hs, StartXTime;
long delta;

switch (CurShotState) {

case 0U:
break;
case 1:
DbgFeedType = 0;
DbgFeedPwm = 0;
DbgFeedPwm_d = 0;
DbgFeedTime = 0;
DbgBallTime = 0;
DbgSweepTime = -1L;

BallElapsedHalfSec = 0;
FeedTimeoutOn = 0;
FeedEarlyOn = 0;
StartXTime = 0;

# 2452
if (FirstShot) *(unsigned int *)&feed_stat = 0;
if (top_stat.Run || bot_stat.Run || feed_stat.Run || feed_stat.Hold) {

*(unsigned int*)&top_stat = 0;
*(unsigned int*)&bot_stat = 0;
if (!feed_stat.Cont) {
*(unsigned int*)&feed_stat = 0;

}



if (play_mode & 4) {
if (LastShot.top == CurShot.top) top_stat.Hold = 1;
if (LastShot.bot == CurShot.bot) bot_stat.Hold = 1;
}
}
feed_rate_hs = FeedPwm2Sec(last_feed_pwm) << 1;
if ((play_mode & 2) && (preset_type == 3) && !FirstShot) {


short lastx = (short)LastShot.x;
short curx = (short)CurShot.x;
if (lastx > curx) delta = lastx - curx;
else delta = curx - lastx;
delta = delta / 27;
delta = delta / 4;
if (delta < 2)
delta = 2;
else if (delta < 4)
delta += 1;
StartXTime = feed_rate_hs - delta;
if (StartXTime < 0) StartXTime = 0;


}
if ((StartXTime < 2) || !((play_mode & 2) && (preset_type == 3))) {
arg = CurShot.x;
BuildCmd('A', 1, &arg);
StartXTime = 0;
DbgSweepTime = 0;

putrsDIAG("\n\rBuildCmd(SC_X1)");

}
++CurShotState;

BallElapsedTicks = 205;
BallElapsedHalfSec = 0;
BallTimerOn = 1;

putrsDIAG("\n\rBallTimerOn = 1");




if (!(play_mode & 8)) {




LargeSpdDrop = 0;
putrsDIAG("\n\rLargeSpdDrop_A = 0");
}




if (m_top_per && m_bot_per && !FirstShot) {
if ((play_mode & 2) && (preset_type >= 2)) {
FeedTimeoutOn = 1;
if (feed_rate_hs == 4) {
d_feed_per = last_feed_pwm << 16;

}
} else if (play_mode & 4) {
FeedEarlyOn = 1;
}
}
if ((StartXTime < 2) || !((play_mode & 2) && (preset_type == 3)))
break;
case 2:

arg = CurShot.y + elev_corr.s;
putrsDIAG("\n\rarg = ");
dumplong(arg);
BuildCmd('a', 1, &arg);
++CurShotState;
break;
case 3:

# 2547
putrsDIAG("\n\rSHOT_STRTTOP:");
if ((play_mode & 2) && (preset_type == 2)) {
if (LargeSpdDrop == 1) {
CurShotState = 9;
break;
}
}



if (!top_stat.Hold)
StartTop(CurShot.top);
if (((play_mode & 2) && (preset_type == 3)) && (StartXTime >= 2)) {
if ((BallElapsedHalfSec >= (unsigned long)StartXTime)) {
arg = CurShot.x;
BuildCmd('A', 1, &arg);
StartXTime = 0;


DbgSweepTime = BallElapsedHalfSec;
}
}
++CurShotState;
break;
case 4:

# 2578
if (!bot_stat.Hold) {
StartBot(CurShot.bot);
}
if (FeedTimeoutOn || FeedEarlyOn) {

StartFeed();
if (FeedTimeoutOn) {
d_feed_per = last_feed_pwm << 16;

}
}
if ((StartXTime >= 2) && (play_mode & 2) && (preset_type == 3)) {
if ((BallElapsedHalfSec >= (unsigned long)StartXTime)) {
arg = CurShot.x;
BuildCmd('A', 1, &arg);
StartXTime = 0;
CurShotState = 7;


SlvCmdDelay = 10U;
DbgSweepTime = BallElapsedHalfSec;
} else {

# 2605
CurShotState = 10;
}
} else {
++CurShotState;
}
if (play_mode & 8) {

LastShot.top = CurShot.top;
LastShot.bot = CurShot.bot;
LastShot.x = CurShot.x;
LastShot.y = CurShot.y;
}
break;
case 5:



if ((play_mode & 2) && (preset_type == 2)) {
if (LargeSpdDrop == 1) {
CurShotState = 9;
break;
}
}

arg = 0;
BuildCmd('4', 0, &arg);
stat.WaitResp = 1;
++CurShotState;
SlvCmdDelay = 10U;
break;
case 6:



if ((play_mode & 2) && (preset_type == 2)) {
if (LargeSpdDrop == 1) {
CurShotState = 9;
break;
}
}

switch (GetMtrResponse()) {
case 2:
if (--SlvCmdDelay == 0U) {
SlvTimeOut();
CurShotState = 5;
}
break;
case 1:
if (!FirstShot &&(((play_mode & 2) && (preset_type >= 2)) || (play_mode & 4))) {
;
if (BallTimerOn == 0)
CurShotState = 8;
} else if (play_mode & ~0x11) {



if (FirstShot) {
StartFeedAtSpd();
}
else {
StartFeed();
}
} else {
StartFeedAtSpd();

}
FirstShot = 0;
CurShotState = 8;
break;
case 0:
SlvCmdDelay = 10U;
CurShotState = 7;
break;
case 3:
case 4:
case 5:
CurShotState = 9;
StopTopMtr();
StopFeedMtr();
StopBotMtr();
break;
}
break;
case 7:


if ((play_mode & 2) && (preset_type == 2)) {
if (LargeSpdDrop == 1) {
CurShotState = 9;
break;
}
}

if (--SlvCmdDelay == 0U) {
CurShotState = 5;

if (((play_mode & 2) && (preset_type >= 2)) || (play_mode & 4)) {
if (BallTimerOn == 0)
CurShotState = 8;
}
}
break;
case 8:
if (d_feed_per == 0 && last_feed_pwm == 0)
CurShotState = 0;
if (feed_stat.Slow || (feed_stat.Cont && !feed_stat.Hold && !feed_stat.Run)) {

# 2722
CurShotState = 9;




}
break;
case 9:

putrsDIAG("\n\rSHOT_DONE:");

# 2757
CurShotState = 0U;
LastShot.x = CurShot.x;
LastShot.y = CurShot.y;
LastShot.top = CurShot.top;
LastShot.bot = CurShot.bot;
break;
case 10:
if (BallTimerOn == 0) {
CurShotState = 9;
} else if ((BallElapsedHalfSec >= (unsigned long)StartXTime) || (BallTimerOn == 0)) {
arg = CurShot.x;
BuildCmd('A', 1, &arg);
CurShotState = 7;
SlvCmdDelay = 10U;


DbgSweepTime = BallElapsedHalfSec;
}
break;
case 30U:
arg = 0x6b0;
BuildCmd('f',1,&arg);
++CurShotState;
break;
case 31:

# 2788
arg = home_loc.sweep;

# 2793
BuildCmd('E', 1, &arg);
++CurShotState;
break;

case 32:

# 2804
arg = home_loc.elev;

# 2809
BuildCmd('e', 1, &arg);
++CurShotState;
break;
case 33:



if (CurShot.top == 0UL) {

StopTopMtr();
} else StartTop(CurShot.top);
++CurShotState;
break;
case 34:



if (CurShot.bot == 0UL) {

StopBotMtr();
} else StartBot(CurShot.bot);
++CurShotState;
break;
case 35:

arg = 0;
BuildCmd('4', 0, &arg);
stat.WaitResp = 1;
++CurShotState;
SlvCmdDelay = 10U;
break;
case 36:

switch (GetMtrResponse()) {
case 2:

if (--SlvCmdDelay == 0U) {
SlvTimeOut();
CurShotState = 35;
}
break;
case 1:

CurShotState = 0U;
break;
case 0:

SlvCmdDelay = 10U;
CurShotState = 37;
break;
case 3:
case 4:
case 5:
CurShotState = 0U;
StopTopMtr();
StopFeedMtr();
StopBotMtr();
break;
}
break;
case 37:
if (--SlvCmdDelay == 0U)
CurShotState = 35;
break;

case 17:

# 2890
if (FirstShot || top_stat.Run || bot_stat.Run || feed_stat.Run || feed_stat.Hold) {
*(unsigned int*)&top_stat = 0;
*(unsigned int*)&bot_stat = 0;
*(unsigned int*)&feed_stat = 0;
StopFeedMtr();
}



if (CurShot.y == CurShot.yLo) {
arg = CurShot.y + elev_corr.s;
BuildCmd('a', 1, &arg);

} else if((CurShot.y != CurShot.yLo) && (CurShot.x != CurShot.xLeft)) {
arg = CurShot.y + elev_corr.s;
BuildCmd('a', 1, &arg);


} else {
arg = CurShot.x;
BuildCmd('A', 1, &arg);
}
++CurShotState;
break;

case 18:

# 2920
if (!top_stat.Hold)
StartTop(CurShot.top);
++CurShotState;
break;
case 19:

# 2929
if (!bot_stat.Hold)
StartBot(CurShot.bot);
++CurShotState;
break;
case 20:

arg = 0;
BuildCmd('4', 0, &arg);
stat.WaitResp = 1;
++CurShotState;
SlvCmdDelay = 10U;
break;
case 21:

switch (GetMtrResponse()) {
case 2:
if (--SlvCmdDelay == 0U) {
SlvTimeOut();
CurShotState = 20;
}
break;
case 1:



if (CurShot.y == CurShot.yLo)
StartSweepRandom(CurShot.sweeprate, CurShot.x, CurShot.xLeft);

else if ((CurShot.y != CurShot.yLo) && (CurShot.x != CurShot.xLeft)) {
StartElevRandom(CurShot.sweeprate, CurShot.y, CurShot.yLo);

# 2966
CurShotState = 23;
putrsDIAG("\n\rOscillate Elevation");
break;
}

else
StartElevRandom(CurShot.sweeprate, CurShot.y, CurShot.yLo);
if (!FirstShot) {
StartFeedCont(CurShot.feedrate);
}
else {
SetFeedRate(CurShot.feedrate);
StartFeedAtSpd();
}
CurShotState = 26;
break;
case 0:
SlvCmdDelay = 10U;
CurShotState = 22;
break;
case 3:
case 4:
case 5:
CurShotState = 9;
StopTopMtr();
StopFeedMtr();
StopBotMtr();
break;
}
break;
case 22:
if (--SlvCmdDelay == 0U)
CurShotState = 20;
break;

case 23:

arg = 0;
BuildCmd('4', 0, &arg);
stat.WaitResp = 1;
++CurShotState;
SlvCmdDelay = 10U;
break;
case 24:

switch (GetMtrResponse()) {
case 2:
if (--SlvCmdDelay == 0U) {
SlvTimeOut();
CurShotState = 23;
}
break;
case 1:



case 0:
StartSweepRandom(CurShot.sweeprate, CurShot.x, CurShot.xLeft);
putrsDIAG("\n\rOscillate Sweep");
if (!FirstShot) {
StartFeedCont(CurShot.feedrate);
}
else {
SetFeedRate(CurShot.feedrate);
StartFeedAtSpd();
}
CurShotState = 26;
break;
case 3:
case 4:
case 5:
CurShotState = 9;
StopTopMtr();
StopFeedMtr();
StopBotMtr();
break;
}
break;
case 25:
if (--SlvCmdDelay == 0U)
CurShotState = 23;
break;


case 26:
if (FirstShot) {

if (!feed_stat.Hold) {
FirstShot = 0;
StartFeedCont(CurShot.feedrate);
CurShotState = 27;
}
} else CurShotState = 27;
break;
case 27:
break;
}


}



void Setup(void)
{

# 3076
int ix;

varinit();
memset((char *)&stat,0,sizeof(stat));
memset((char *)&top_stat, 0,sizeof(top_stat));
memset((char *)&bot_stat, 0,sizeof(bot_stat));
memset((char *)&feed_stat,0,sizeof(feed_stat));

memset((char *)&ErrorStat,0,sizeof(ErrorStat));
ErrorShutDown = 0;

TickIntCnt = 0;
BallElapsedTicks = 0;
BallElapsedHalfSec = 0;
BallTimerOn = 0;
FeedTimeoutOn = 0;
FeedEarlyOn = 0;
FirstShot = 0;
LargeSpdDrop = 0;
power_on = 0;
power_state = 3;
memset((char *)&LastShot,0, sizeof(LastShot));
memset((char *)&CurShot,0, sizeof(CurShot));
memset((char *)&NextShot,0,sizeof(NextShot));
CurShotState = 0U;
NextShotState = 0U;
DiagBufOfs = 0;
memset(DiagBuf,0,32);
SlaveCmdOfs = 0;
memset(SlaveCmd,0,32);
SlaveResOfs = 0;
memset(SlaveRes,0,32);

WDTCONbits.SWDTEN = 1;
LastSlaveCmd = 0;
SlaveMotorStatus = 0;
SpiLock = 0;

ServeDiag = 0;


PORTA = 0;
PORTB = 0;
PORTC = 0;
PORTD = 0;
PORTE = 0;
PORTF = 0;
PORTG = 0;




PORTAbits.RA5 = 1;
PORTAbits.RA4 = 1;
PORTBbits.RB4 = 1;
PORTCbits.RC0 = 1;
PORTDbits.RD6 = 1;
PORTDbits.RD7 = 1;

TRISA = 0xc1;
Delay1KTCYx(50);
asm(" clrwdt");

TRISB = 0x2f;
TRISC = 0x96;
TRISD = 0x3f;
TRISE = 0;
TRISF = 0xff;
TRISG = 0x24;

ADCON0 = 0;
ADCON1 = 0x0e;

# 3156
OpenSPI1(0b00000001, 0b00000000, 0b10000000);


set_intensity();
d_bot_per = 0U;
d_top_per = 0U;
m_bot_per = 0;
m_top_per = 0;
d_feed_per = 0;
bot_pwm = 0L;
top_pwm = 0L;
bot_incr = 0;
top_incr = 0;
feed_pwm = 0;
top_t1 = 0;
top_t2 = 0;
last_top_t1 = 0;
last_top_t2 = 0;
bot_t1 = 0;
bot_t2 = 0;

last_bot_t1 = 0;
last_bot_t2 = 0;

DoDebug = 0;
start_count = 0;
min_count = 0;
max_count = 0;
rbuf_init(&di_inbuf,2);
rbuf_init(&di_outbuf,2);

# 3191
T3CONbits.T3CCP2 = 0;
T3CONbits.T3CCP1 = 1;


OpenPWM4(0xff);
OpenPWM3(0xff);
OpenPWM5(0xff);
OpenTimer4(0b11111100 & 0b11001111 & 0b11111111);
timer4_cnt = 0;

SetDCPWM4(0);
SetDCPWM3(0);
SetDCPWM5(0);


OpenCapture1(0b11111111 & 0b10000110);
TRISCbits.TRISC2=1;
OpenTimer1(0b01111111 & 0b11110111 & 0b11111101 & 0b11111111);


OpenCapture2(0b11111111 & 0b10000110);
TRISCbits.TRISC1=1;


OpenTimer3(0b01111111 & 0b11111101 & 0b11111111);

T1CONbits.T1OSCEN=0;



T3CONbits.T3CCP2 = 0;
T3CONbits.T3CCP1 = 1;

# 3241
Open2USART (0b01111111 & 0b10111111 & 0b11111110 &
0b11111101 & 0b11111111 & 0b11111111, 129);
TRISGbits.TRISG1 = 0;
TRISGbits.TRISG2 = 1;


Open1USART(0b01111111 & 0b10111111 & 0b11111110 &
0b11111101 & 0b11111111 & 0b11101111, 129);
TRISCbits.TRISC6 = 0;
TRISCbits.TRISC7 = 1;

# 3257
ADCON2 = 0xBd;
a2dChan = 0;
a2dChan2Dump = 1;
ADCON0 = 1;
a2dtest = 0;


for (ix=0; ix<(25-4+1); ix++) {
CurSenseCt[0][ix] = 0;
CurSenseCt[1][ix] = 0;
}

# 3277
BDM_TripTime[0] = 3;


BDM_CurSenseCt[0] = 0;


BDM_TripPoint[1] = 393;
BDM_TripTime[1] = 3;



BDM_CurSenseCt[1] = 0;
BDM_TripPoint[2] = 245;
BDM_TripTime[2] = 15;
BDM_CurSenseCt[2] = 0;

BAT_CurSenseCt = 0;
BAT_TripTime = 25;


BAT_TripPoint = 512;

# 3304
TMR0L = 0xa8;
TMR0H = 0x61;
msec5 = 155;
seconds = 0;
ticks = 0;
repeat = 0U;
odtix = 0xffffffff;
OpenTimer0(0b11111111 & 0b10111111 & 0b11101111 & 0b11011111 & 0b11111111);


accel_feed = 0x480000;
accel_top = 0x5800;
accel_bot = 0x5800;
top_limit = 0x3ff;
bot_limit = 0x3ff;
feed_limit = 0x3ff;
last_feed_pwm = feed_limit;
feed_slow = 0;
ball_feed = 0;

ball_feed_bottom = 0;

top_phase6_cnt = 0;
top_phase3_cnt = 0;
bot_phase6_cnt = 0;
bot_phase3_cnt = 0;
top_timer_cnt = 0;
bot_timer_cnt = 0;

for (ix=0; ix<8; ix++) {
accel_range[ix][0] = accel_low[ix][0];
accel_range[ix][1] = accel_low[ix][1];
accel_range_bot[ix][0] = accel_low[ix][0];
accel_range_bot[ix][1] = accel_low[ix][1];
}


INTCONbits.PEIE = 1;
INTCONbits.GIE = 1;
INTCON2bits.INTEDG0 = 0;


;
;



OpenXLCD((unsigned char)(0b00111111 & 0b00111011));

;
}

# 3362
void debounce_power_button(void)
{
power.current = PORTBbits.INT0;
if (power.current == (uchar)power.previous) {

if (power.count >= (uchar)30) {

power.previous_debounced = power.debounced;
power.debounced = power.current;
} else {
}
} else {


if (dpb_thrash < 32768) dpb_thrash++;

# 3382
if ((power_state == 0) && (power.current == 1) && (power.count > 5) && (batt_cnt != 0)) {

BatLevelDisplay = 1;
lcd_updated = 1;

}

power.count = 0;
}
power.previous = power.current;
}

# 3399
void main(void)
{
char i;

char j;
char k;

unsigned long eecopy;
unsigned long tmp1,tmp2,tmp3;
long tmp5 = 0x30;
long *args = &tmp5;

# 3416
long sweep_offset;

long tmp4;
int TopDelta, BotDelta;
char c;



char key, rky, rky2;



char sum;


char startit;

# 3439
manual.speed = 50;
manual.elev = 10;;
manual.horiz = 0;;
manual.feed = 4;
manual.spin = 0;


for (i=0; i < 16; i++) {

preset[i].speed = 50;
preset[i].elev = 10;;
preset[i].horiz = 0;;
preset[i].twolnrw = 0;
preset[i].feed = 4;
preset[i].spin = 0;
preset[i].col = 0;
preset[i].row = 0;
preset[i].width = 0;
}


Setup();

# 3508
if(PORTBbits.RB1 && PORTBbits.RB3 && PORTBbits.RB2)
model_type = 4U;
else if(PORTBbits.RB1 && PORTBbits.RB3 && !PORTBbits.RB2)
model_type = 2U;
else if(PORTBbits.RB1 && !PORTBbits.RB3 && PORTBbits.RB2)
model_type = 0U;




else if(!PORTBbits.RB1 && PORTBbits.RB3 && !PORTBbits.RB2)
model_type = 1U;
else model_type = 2U;

# 3593
if (model_type == 2U) {
lob_model = " ELITE GRAND IV ";
pp_maxloc = 0;
lowbatt_msg = "Battery Depleted";
lob_version = "Version 1.226.00";
sweep_offset = 0xf0;

ELEV_CORR_MIN = -40;


MINPWM = 0x0ec0000L;


BDM_TripPoint[0] = 393;

}
else if (model_type == 0U) {
lob_model = " ELITE GRAND V  ";
pp_maxloc = 6;
lowbatt_msg = "Battery Depleted";
lob_version = "Version 1.226.00";
sweep_offset = 0xf0;

ELEV_CORR_MIN = -40;


MINPWM = 0x0ec0000L;


BDM_TripPoint[0] = 393;

}
else if (model_type == 1U) {
lob_model = "ELITE GRAND V LE";
pp_maxloc = 18;
lowbatt_msg = "Battery Depleted";
lob_version = "Version 1.226.00";
sweep_offset = 0xf0;

ELEV_CORR_MIN = -40;


MINPWM = 0x0ec0000L;


BDM_TripPoint[0] = 393;

}

# 3649
else if (model_type == 5U) {
lob_model = "    PHENOM 1    ";
pp_maxloc = 0;
lowbatt_msg = " Power Problem  ";
lob_version = "Version 1.226.00";
sweep_offset = 0x12a;

ELEV_CORR_MIN = -136;


MINPWM = 0x0d48000L;

# 3665
BDM_TripPoint[0] = 655;

}
else if (model_type == 3U) {
lob_model = "    PHENOM 2    ";
pp_maxloc = 18;
lowbatt_msg = " Power Problem  ";
lob_version = "Version 1.226.00";
sweep_offset = 0x12a;

ELEV_CORR_MIN = -136;


MINPWM = 0x0d48000L;

# 3684
BDM_TripPoint[0] = 655;

}

else if (model_type == 4U) {
lob_model = "ELITE GRAND V LE";
pp_maxloc = 18;
lowbatt_msg = "Battery Depleted";
lob_version = "Version 1.226.00";
sweep_offset = 0xf0;

ELEV_CORR_MIN = -40;


MINPWM = 0x0ec0000L;



BDM_TripPoint[0] = 393;



}



elev_corr.c[0] = SEERead((long)&flash_header.elev_correction - (long)&flash_header) & 0xff;
elev_corr.c[1] = SEERead(((long)&flash_header.elev_correction - (long)&flash_header) + 1)&0xff;

while(1) {
asm(" clrwdt");
if (bot_timer_cnt) {
INTCONbits.GIE = 0;
bot_timer_cnt = 0;
INTCONbits.GIE = 1;
UpdBotPer();
CalcBotPwm();
}
if (top_timer_cnt) {
INTCONbits.GIE = 0;
top_timer_cnt = 0;
INTCONbits.GIE = 1;
UpdTopPer();
CalcTopPwm();
}
if (stat.TickInt) {
if (repeat > 1U) repeat--;
keyhold++;
++ticks;
power.count++;
switch(ticks & 0x03) {
case 0:

if (ErrorShutDown != 0) {
if (ErrorShutDown == 1) {
stop_all(0, (long *)0);
if (ErrorStat.TopCnt)
;
if (ErrorStat.BotCnt)
;
ErrorShutDown = 2;
CurShotState = 0U;
}
break;
}




if (top_stat.Run || top_stat.Hold || feed_stat.Run || feed_stat.Hold || feed_stat.Cont ||
((CurShotState > (ushort)0U) && (CurShotState < (ushort)9))) {


if (ErrorShutDown) break;

# 3780
if ((feed_stat.Run) || (feed_stat.Hold && ((feed_pwm >= (long)last_feed_pwm)||(feed_pwm > 0x2800000)))
|| ((feed_stat.Cont) && (play_mode & 8) && (play_mode & 1))
|| ((feed_stat.Cont) && (preset_type <= 1U) && (play_mode & 2) && (play_mode & 1))) {

# 3793
if (LargeSpdDrop) {

# 3814
if (!((play_mode & 2) && (preset_type == 2))
&& ((BallElapsedHalfSec <= 1U) ||
((BallElapsedHalfSec == 2) && (BallElapsedTicks < (unsigned char)230)))) {



putrsDIAG("\n\r");
dumpshort(BallElapsedHalfSec);
dumpshort(BallElapsedTicks);

# 3836
if ((!(play_mode & 8)) && (!((play_mode & 2) && (preset_type <= 1U)))) {


LargeSpdDrop = 0;
putrsDIAG("\n\rLargeSpdDrop_B = 0");
}
} else {


*(unsigned int *)&top_stat = 0;
*(unsigned int *)&bot_stat = 0;
feed_stat.Ok2Updt = 0;

FeedMtrDone();
BallTimerOn = 0;

putrsDIAG("\n\rBallTimerOn = 0");

# 3863
DbgBallTime = BallElapsedHalfSec;



if (!((play_mode & 2) && (preset_type == 2))) {
LargeSpdDrop = 0;
putrsDIAG("\n\rLargeSpdDrop_C = 0");
}

}
}
}
}
if (bot_stat.Run || bot_stat.Hold || feed_stat.Run || feed_stat.Hold) {


if (ErrorShutDown) break;




}



if (feed_stat.Hold && !feed_stat.Cont) {


ulong feed_rate_hs = FeedPwm2Sec(last_feed_pwm) << 1;
ulong StartFeedTime;

# 3900
switch(feed_rate_hs) {
case 4:
StartFeedTime = 0;
break;
case 6:
StartFeedTime = 3;
break;
case 8:
StartFeedTime = 5;
break;
default:
StartFeedTime = feed_rate_hs - 3;
break;
}
if (FeedTimeoutOn && (BallElapsedHalfSec >= (feed_rate_hs - 1))) {



*(unsigned *)&top_stat = 0;
*(unsigned *)&bot_stat = 0;
feed_stat.Hold = 0;
feed_stat.Run = 1;

# 3927
if (!DbgFeedType) {
DbgFeedType = 1;
DbgFeedTime = BallElapsedHalfSec;
}
FeedTimeoutOn = 0;
FeedEarlyOn = 0;
} else if (FeedEarlyOn && SpeedInRange() && (BallElapsedHalfSec >= StartFeedTime)) {

# 3942
if (!DbgFeedType) {
DbgFeedType = 3;
DbgFeedTime = BallElapsedHalfSec;
}
FeedEarlyOn = 0;
if (feed_rate_hs < BallElapsedHalfSec)
tmp4 = 2;
else {
tmp4 = (feed_rate_hs - BallElapsedHalfSec) >> 1;
if (tmp4 < 2) tmp4 = 2;
}
d_feed_per = (ulong)base_feeds[tmp4] << 16;

# 3959
} else if ( !top_stat.Run && !bot_stat.Run ) {

# 3964
TopDelta = (top_last_delta>0)?top_last_delta:(0-top_last_delta);
BotDelta = (bot_last_delta>0)?bot_last_delta:(0-bot_last_delta);
if (( top_stat.Hold || (TopDelta < (top_drift<<5 )) ||
((top_pwm & 0x3ff0000L) == 0x3ff0000L) || ((top_pwm & 0x3ff0000L) <= MINPWM))
&& ( bot_stat.Hold || (BotDelta < (bot_drift<<5)) ||
((bot_pwm & 0x3ff0000L) == 0x3ff0000L) || ((bot_pwm & 0x3ff0000L) <= MINPWM)) ) {
DbgFeedPwm = feed_pwm;
feed_stat.Hold = 0;
feed_stat.Run = 1;
if (FeedTimeoutOn) {

} else if (BallTimerOn) {

# 3982
if (feed_rate_hs < BallElapsedHalfSec)
tmp4 = 2;
else {
tmp4 = (feed_rate_hs - BallElapsedHalfSec) >> 1;
if (tmp4 < 2) tmp4 = 2;
}
d_feed_per = (ulong)base_feeds[tmp4 - 2] << 16;




;
} else {
tmp4 = (feed_rate_hs - 4) >> 1;
if (tmp4 < 2) tmp4 = 2;
d_feed_per = (ulong)base_feeds[tmp4 - 2] << 16;




;
}
feed_stat.Ok2Updt = 1;
FeedTimeoutOn = 0;
FeedEarlyOn = 0;

# 4012
DbgFeedPwm_d = d_feed_per;
if (!DbgFeedType) {
DbgFeedType = 4;
DbgFeedTime = BallElapsedHalfSec;
}
}
}
}

# 4027
break;
case 1:
if (CurShotState != (ushort)0U) {
SvcShots();
}
break;
}
if (BallTimerOn) {
if (++BallElapsedTicks == 0U) {
BallElapsedTicks = (ulong)205;
++BallElapsedHalfSec;
}
}

while (TickIntCnt) {

INTCONbits.GIE = 0;
--TickIntCnt;

INTCONbits.GIE = 1;

if (++msec5 == 0U) {
msec5 = 155;
++seconds;

# 4060
if (DoDebug && start_count) {
INTCONbits.GIE = 0;
tmp1 = start_count;
tmp2 = min_count;
tmp3 = max_count;
INTCONbits.GIE = 1;
dumpaddr(tmp1);
dumplong(tmp2);
dumplong(tmp3);
}

}


if (++cursor_tmr == 0U) {
cursor_tmr = 210;
if (cursor_state == 0)
cursor_state = 1;
else
cursor_state = 0;
lcd_updated = 1;
}


if (dashes || pp_dashes) {
if (++dashes_tmr == 0U) {
dashes_tmr = 180;
dashes = 0;
pp_dashes = 0;
lcd_updated = 1;
}
}



if (BatLevelDisplay) {
if (++BatLevelDisplayTmr == 0U) {
BatLevelDisplayTmr = 0;;
BatLevelDisplay = 0;
lcd_updated = 1;
}
}



if (start_delay) {
if (++PlayLEDTmr == 0U) {
PlayLEDTmr = 170;;
if (PlayLEDPass < 40)
PlayLEDPass = PlayLEDPass + 1;
PlayLEDTmr = (2*PlayLEDPass) + 170;;


if (PlayModeBlink & 1) {
PlayModeBlink = PlayModeBlink & 0xfe;
}
else {

PlayModeBlink = PlayModeBlink | 1;
}
BuildCmd('3',1,&PlayModeBlink);
}
} else {
PlayLEDPass = 0;
PlayLEDTmr = 170;;
}


}


if (stat.WaitResp) {
ChipSelect(0);
c = ReadSPI1();

ChipDeSelect(0);
if ((SlaveResOfs != (char)0) || (c == (char)'R')) {
SlaveRes[SlaveResOfs++] = c;
if (SlaveResOfs >= 32) {
stat.WaitResp = 0;
;
} else if ((SlaveResOfs > 1) && (SlaveRes[1] <= SlaveResOfs)) {

stat.WaitResp = 0;
}
} else if (c == 21 || c == 6) {




stat.WaitResp = 0;
}
}

if (!a2dtest && (msec5 & 0x01)) {
if (stat.a2dStarted && (ADCON0bits.NOT_DONE == FALSE)) {
unsigned int val;
int i,j,chan;
val = (unsigned int)(a2dValue[a2dChan] = ((((int)ADRESH) & 0xff) << 8) | (((int)ADRESL) & 0xff));
ADCON0 = 0;
if (a2dChan == 0) {

# 4166
if (BatAvgCnt < 20) {
CheckBattery(val);

# 4184
}
BAT_lastval = val;

} else if ((a2dChan == 1) || (a2dChan == 2)) {

chan = a2dChan - 1;
if (val < CurSense[0][0]) {

if (CurSenseCt[chan][0]) {
for (i=4,j=0; i<=25; i++,j++) {
CurSenseCt[chan][j] = 0;
}
}
} else if (val >= CurSense[25-4+1][0]) {

;
stop_all(0,(long *)0);
;

if (chan)
ErrorStat.BotCurSense = 1;
else
ErrorStat.TopCurSense = 1;
if (ErrorShutDown == 0) ErrorShutDown = 1;

} else {
for (i=4,j=0; i<25; i++,j++) {
if (CurSense[j][0] <= val) {
++CurSenseCt[chan][j];
if (CurSenseCt[chan][j] >= CurSense[j][1]) {

;
stop_all(0,(long *)0);
;
;

if (chan)
ErrorStat.BotCurSense = 1;
else
ErrorStat.TopCurSense = 1;
if (ErrorShutDown == 0) ErrorShutDown = 1;

}
} else
CurSenseCt[chan][j] = 0;
}
}

} else if ((a2dChan == 3) || (a2dChan == 4) || (a2dChan == 5)) {

chan = a2dChan - 3;
if (val < BDM_TripPoint[chan]) {
BDM_CurSenseCt[chan] = 0;
} else if (++BDM_CurSenseCt[chan] > BDM_TripTime[chan]) {

;
stop_all(0,(long *)0);
;
;

if (chan == 0)
ErrorStat.SweepCurSense = 1;
else if (chan == 1)
ErrorStat.ElevCurSense = 1;
else if (chan == 2)
ErrorStat.FeedCurSense = 1;
if (ErrorShutDown == 0) ErrorShutDown = 1;

}
}
if (++a2dChan >= 7) a2dChan = 0;
stat.a2dStarted = 0;
}
}
asm(" clrwdt");
stat.TickInt = 0;
}

# 4268
if ((stat.WaitResp == 0U) && SlaveResOfs) {
if (SlaveResOfs == 1) {
;
}
else

for (c=0,sum=0; c<SlaveResOfs; c++) {
;
sum += SlaveRes[c];
}
if (LastSlaveCmd != (char)'4') {
for (c=(2+1); c<(SlaveResOfs-1); c++) {
;
}
} else {
if (sum == 0)
SlaveMotorStatus = SlaveRes[2+1];
}
LastSlaveCmd = 0;
SlaveResOfs = 0;
}

debounce_power_button();
switch (power_state) {
case 0:
main_ostate = power_state;
if ((power.debounced != (unsigned char)0) ||
(power.previous_debounced == (unsigned char)0)) {
break;
}
case 5:

play_mode & ((8)|(2)|(4));

stop_all(0,(long*)0);

# 4313
CurShot.x = home_loc.sweep;
CurShot.y = home_loc.elev;

# 4320
CurShot.top = 0;
CurShot.bot = 0;
strcpy(&lcd_line[0][0], lob_model);
strcpy(&lcd_line[1][0], lob_version);

lcd_line[1][14] = flash_header.vers[5];
lcd_line[1][15] = flash_header.vers[6];

# 4336
strcpy(&lcd_line[2][0], homingmsg);
strcpy(&lcd_line[3][0], waitmsg);

homeshown = 1;
lcd_updated = 1;
CurShotState = 30U; home_ticks = ticks;
home_ticks = ticks;
power_state = 2;
batt_cnt = 0;
break;
case 4:
BuildCmd('j',1,args);

BuildCmd('J',1,&sweep_offset);

if ((home_ticks+5) > ticks) break;
home_ticks = 0;
batt_ticks = 0;
;

# 4367
CurShot.x = home_loc.sweep;
CurShot.y = home_loc.elev;

# 4374
CurShot.top = 0x6000;
CurShot.bot = 0x6000;
CurShotState = 30U; home_ticks = ticks;
power_state = 1;
break;
case 1:
if (CurShotState == (ushort)0U) {
power_state = 0;


if (ErrorShutDown == 0) {
if (m_top_per == 0) {
ErrorStat.TopCnt = 1;
if (ErrorShutDown == 0)
ErrorShutDown = 1;
}
if (m_bot_per == 0) {
ErrorStat.BotCnt = 1;
if (ErrorShutDown == 0)
ErrorShutDown = 1;
}
}

}

break;
case 2:
if ((power.debounced == (unsigned char)0) &&
(power.previous_debounced != (unsigned char)0)) {

}
if (main_ostate != power_state){

main_ostate = power_state;
}
if ((CurShotState >= (ushort)30U)) break;
stop_all(0,(long*)0);
power_on = 0;
if (batt_cnt == 0) {
batt_cnt = 1;

strcpy(&lcd_line[2][0], shutdnmsg);

lcd_updated = 1;
batt_ticks = ticks + 230U;
}
if (batt_ticks && (batt_ticks > ticks) && !ErrorShutDown) break;
power_state = 3;
main_ostate = power_state;
break;
case 3:
if (power.debounced == (unsigned char)0)
;
if (main_ostate != power_state) {
dumplong(main_ostate);
;
}
main_ostate = power_state;
power_state = 0;
break;
default:
if (power.debounced == (unsigned char)0)
;
if (main_ostate != power_state) {
;
}
main_ostate = power_state;
break;
}
if ((power_on == 0) && (power_state != 2)) {
int glitch;
unsigned oval;
;
;


power.debounced = 1;
power.previous_debounced = 1;
power.count = 0;
power.current = 1;
power.previous = 1;
do {
poweroff(0,(long *)&tmp);
asm(" clrwdt");
WDTCONbits.SWDTEN = 1;


for (power.count=0; power.count < (unsigned char)(30+1); power.count++) {
debounce_power_button();
asm(" clrwdt");
Delay1KTCYx(35);
Delay1KTCYx(35);
Delay1KTCYx(35);
Delay1KTCYx(35);
}
INTCONbits.INT0IF=0;
} while (power.debounced == (unsigned char)1);

Setup();
eladj = 0;
elev_corr.s = (ushort)(SEERead((long)&flash_header.elev_correction - (long)&flash_header) & 0xff);
elev_corr.s |= (((ushort)SEERead(((long)&flash_header.elev_correction - (long)&flash_header) + 1)) << 8)& 0xff00;
BuildCmd('j',1,&tmp5);

BuildCmd('J',1,&sweep_offset);



putrsDIAG("\n\r\n\r\n\rWaking Up ...");
putrsDIAG("\n\rWakeUp elev_corr.s = ");
dumplong(elev_corr.s);

# 4493
;
power.count = 0;
;
;
;
;
;
set_intensity();
power.previous_debounced = 0;
power_on = 1;
power_state = 4;
home_ticks = ticks;
batt_ticks = 0;
cur_st = 1;
prev_st = -1;

# 4542
}

if (stat.HaveCmd)
exec_diag();
key = check_keypad();

if ((key == 0x03) && !(play_mode & 1) && (cur_st != 7)) {
start_delay = ticks + 2300L;
PlayModeBlink = play_mode;
}


if ((CurShotState >= (ushort)30U)) {
if (!homeshown) {
strcpy(&lcd_line[0][0], lob_model);
strcpy(&lcd_line[1][0], lob_version);

lcd_line[1][14] = flash_header.vers[5];
lcd_line[1][15] = flash_header.vers[6];



strcpy(&lcd_line[2][0], homingmsg);
strcpy(&lcd_line[3][0], waitmsg);
homeshown = 1;
lcd_updated = 1;
}
} else if (power_state == 0) {




if (batt_cnt == 0) {
lastbatval = 0;
lastbata2d = 0L;
BAT_lastval = 0;
batt_cnt++;
top_stat.BatTest = 1;
}
if (BAT_lastval && (batt_cnt < 11)) {
batval = a2dValue[0];



lastbata2d += batval;

BAT_lastval = 0;
if (batval < 530) batval = 0;
else if (batval > 630) batval = 100;
else batval -= 530;
lastbatval += batval;
batt_cnt++;
} else if (batt_cnt == 11) {
batval = lastbatval / 10;

BatPercent = batval;




LastBatAvg = BatteryAverage(batval);


if (top_stat.BatTest) {

# 4612
batt_ticks = ticks + 230U;

# 4617
}

if (top_stat.BatTest && (BatAvgCnt > 2)) {
top_stat.BatTest = 0;

# 4637
strcpy(&lcd_line[2][0], battmsg);
if (batval >= 90)
strcpy(&lcd_line[2][11], "Full");
if ((batval < 90) && (batval >= 70))
strcpy(&lcd_line[2][11], "High");
if ((batval < 70) && (batval >= 50))
strcpy(&lcd_line[2][10], "Medium");
if (batval < 50)
strcpy(&lcd_line[2][11], "Low!");
lcd_updated = 1;


}



batval = lastbata2d / 10;
batt_cnt = 1;
lastbatval = 0;
lastbata2d = 0L;
CheckBattery(batval);
}
} else {

}

# 4676
rky = debounced_remote();
rky2 = debounced_remote_USART2();


if (RemoteDataReceived) {

rky = rky2;



RemoteDataCnt = 0;

}


if (rky || RemoteDataReceived) {

# 4697
if (rky == 0x3F) {
strcpy (RemoteString,lob_version);
RemoteString[14] = flash_header.vers[5];
RemoteString[15] = flash_header.vers[6];
}

if (remote_enabled) {
dumphex(rky);


if (RemotePgmMode) {

if (rky == 0x53) {
RemotePgmMode = RPM_NONE;

RemoteString[0] = rky;
RemoteString[1] = 0x00;
}

else if (rky == 0x56) {
RemotePgmMode = RPM_SHOTTABLES;

for (i=0; i<=pp_maxloc-1; i++) {
for (j=0; court_locs[i][j].speed !=0; j++) {
while((!TXSTA2bits.TRMT));
Write2USART(i+1);
while((!TXSTA2bits.TRMT));
Write2USART(speed_trans[court_locs[i][j].speed/5]);
while((!TXSTA2bits.TRMT));
Write2USART(court_locs[i][j].spin + 170);
}
}

# 4741
while((!TXSTA2bits.TRMT));
Write2USART(0x00);
}


else if (rky == 0x54) {
RemoteString[0] = 0xf0;

RemoteString[1] = 0x00;
}

else if (RemotePgmMode == RPM_EDITLOCN) {
if (rky == 0x52) {
UDrillShots--;

for (i=RemotePgmShot; i < (6-1); i++) {


RemotePgmLocn[i] = RemotePgmLocn[i+1];

RemotePgmSpeed[i] = RemotePgmSpeed[i+1];
RemotePgmSpin[i] = RemotePgmSpin[i+1];
RemotePgmFeed[i] = RemotePgmFeed[i+1];
}
RemotePgmLocn[6-1] = 0;
RemotePgmMethod[6-1] = 0;




strcpy (RemoteString, "Shot Deleted");
}
else {
RemotePgmLocn[RemotePgmShot] = rky;

RemoteString[0] = rky;
RemoteString[1] = 0x00;
}
RemotePgmMode = RPM_START;
}
else if (RemotePgmMode == RPM_EDITSPEED) {

for (i=0;speed_trans[i] <= rky;i++) {
RemotePgmSpeed[RemotePgmShot] = i*5;
}
RemotePgmMode = RPM_START;
RemoteString[0] = rky;
RemoteString[1] = 0x00;
}
else if (RemotePgmMode == RPM_EDITSPIN) {

RemotePgmSpin[RemotePgmShot] = rky-170;
RemotePgmMode = RPM_START;
RemoteString[0] = rky;
RemoteString[1] = 0x00;
}
else if (RemotePgmMode == RPM_EDITFEED) {
RemotePgmFeed[RemotePgmShot] = rky;
RemotePgmMode = RPM_START;
RemoteString[0] = rky;
RemoteString[1] = 0x00;
}

# 4808
else if (RemotePgmMode == RPM_SHOTFEED) {

RemotePgmFeed[RemotePgmShot] = rky;
RemoteString[0] = rky;
RemoteString[1] = 0x00;
RemotePgmMode = RPM_START;
}

# 4820
else if (RemotePgmMode == RPM_SHOTSPIN) {

RemotePgmSpin[RemotePgmShot] = rky-170;


RemoteString[0] = rky;
RemoteString[1] = 1 + 1;
RemoteString[2] = 9;
RemoteString[3] = 1;
RemoteString[4] = 0x00;
RemoteDataCnt = 4;
RemotePgmMode = RPM_SHOTFEED;
}

# 4838
else if (RemotePgmMode == RPM_SHOTSPEED) {

for (i=0;speed_trans[i] <= rky;i++) {
RemotePgmSpeed[RemotePgmShot] = i*5;
}
spinmin = 3;
spinmax = -3;

# 4850
for (i=0; court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed !=0; i++) {
if (court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed == RemotePgmSpeed[RemotePgmShot]) {
if (court_locs[RemotePgmLocn[RemotePgmShot]-1][i].spin < spinmin) {
spinmin = court_locs[RemotePgmLocn[RemotePgmShot]-1][i].spin;
}
}
}
for (i=0; court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed !=0; i++) {
if (court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed == RemotePgmSpeed[RemotePgmShot]) {
if (court_locs[RemotePgmLocn[RemotePgmShot]-1][i].spin > spinmax) {
spinmax = court_locs[RemotePgmLocn[RemotePgmShot]-1][i].spin;
}
}
}

# 4882
RemoteString[0] = rky;
RemoteString[1] = spinmin+170;
RemoteString[2] = spinmax+170;
RemoteString[3] = 1;
RemoteString[4] = 0x00;
RemoteDataCnt = 4;
RemotePgmMode = RPM_SHOTSPIN;
}

# 4895
else if (RemotePgmMode == RPM_SHOTLOCN) {
if (rky == 0x52) {
UDrillShots--;

for (i=RemotePgmShot; i < (6-1); i++) {


RemotePgmLocn[i] = RemotePgmLocn[i+1];

RemotePgmSpeed[i] = RemotePgmSpeed[i+1];
RemotePgmSpin[i] = RemotePgmSpin[i+1];
RemotePgmFeed[i] = RemotePgmFeed[i+1];
}
RemotePgmLocn[6-1] = 0;
RemotePgmMethod[6-1] = 0;
RemotePgmMode = RPM_START;



strcpy (RemoteString, "Shot Deleted");
}
else {
RemotePgmLocn[RemotePgmShot] = rky - 0x01+1;
speedmin = 70;
speedmax = 25;

for (i=0; court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed !=0; i++) {
if (court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed < speedmin) {
speedmin = court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed;
}
}
for (i=0; court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed !=0; i++) {
if (court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed > speedmax) {
speedmax = court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed;
}
}

# 4945
RemoteString[0] = rky;
RemoteString[1] = speed_trans[speedmin/5];
RemoteString[2] = speed_trans[speedmax/5];
RemoteString[3] = 5;
RemoteString[4] = 0x00;
RemotePgmMode = RPM_SHOTSPEED;
}
}

# 4964
else if (RemotePgmMode == RPM_SHOTNUM) {

# 5025
if (rky == 0x55) {
for (i=0; i<=pp_maxloc-1; i++) {
RemoteString[i] = i+1;
}
RemoteString[i] = 0x00;
RemotePgmMode = RPM_SHOTLOCN;
}

else if (rky == 0x51) {


for (i=0,k=0; i<=pp_maxloc-1; i++) {
for (j=0; court_locs[i][j].speed !=0; j++) {
if ((court_locs[i][j].speed == RemotePgmSpeed[RemotePgmShot])
&& (court_locs[i][j].spin == RemotePgmSpin[RemotePgmShot])){
RemoteString[k] = i+1;
k++;
break;
}
}
}

# 5059
RemoteString[k] = 0x00;
RemoteDataCnt = k;
RemotePgmMode = RPM_EDITLOCN;
}
else if (rky == 0x4e) {
speedmin = 70;
speedmax = 25;

for (i=0; court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed !=0; i++) {
if (court_locs[RemotePgmLocn[RemotePgmShot]-1][i].spin == RemotePgmSpin[RemotePgmShot]) {
if (court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed < speedmin) {
speedmin = court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed;
}
}
}
for (i=0; court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed !=0; i++) {
if (court_locs[RemotePgmLocn[RemotePgmShot]-1][i].spin == RemotePgmSpin[RemotePgmShot]) {
if (court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed > speedmax) {
speedmax = court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed;
}
}
}

# 5097
RemoteString[0] = speed_trans[speedmin/5];
RemoteString[1] = speed_trans[speedmax/5];
RemoteString[2] = 5;
RemoteString[3] = 0x00;
RemotePgmMode = RPM_EDITSPEED;
}
else if (rky == 0x4f) {
spinmin = 3;
spinmax = -3;

for (i=0; court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed !=0; i++) {
if (court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed == RemotePgmSpeed[RemotePgmShot]) {
if (court_locs[RemotePgmLocn[RemotePgmShot]-1][i].spin < spinmin) {
spinmin = court_locs[RemotePgmLocn[RemotePgmShot]-1][i].spin;
}
}
}
for (i=0; court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed !=0; i++) {
if (court_locs[RemotePgmLocn[RemotePgmShot]-1][i].speed == RemotePgmSpeed[RemotePgmShot]) {
if (court_locs[RemotePgmLocn[RemotePgmShot]-1][i].spin > spinmax) {
spinmax = court_locs[RemotePgmLocn[RemotePgmShot]-1][i].spin;
}
}
}

# 5137
RemoteString[0] = spinmin+170;
RemoteString[1] = spinmax+170;
RemoteString[2] = 1;
RemoteString[3] = 0x00;
RemoteDataCnt = 3;
RemotePgmMode = RPM_EDITSPIN;
}
else if (rky == 0x50) {


RemoteString[0] = 1 + 1;
RemoteString[1] = 9;
RemoteString[2] = 1;
RemoteString[3] = 0x00;
RemoteDataCnt = 3;
RemotePgmMode = RPM_EDITFEED;
}
}

# 5169
else if (rky == 0x4c) {
key = 0x03;




RemoteString[0] = rky;
RemoteString[1] = 0x00;
}




else if (rky == 0x4b) {
load_prog(program_ix,&act_program);

j = 6;
for (i=0; i<6; i++) {

RemotePgmLocn[i] = act_program.shot[i];

if (RemotePgmLocn[i] == 0) {
j = i;
break;
} else {
RemoteString[i*4] = RemotePgmLocn[i];
}
}
UDrillShots = j;



for (i=0; i<j; i++) {
RemotePgmSpeed[i] = court_locs[(act_program.shot[i])-1][act_program.method[i]].speed;
RemoteString[i*4+1] = speed_trans[RemotePgmSpeed[i]/5];
}

for (i=0; i<j; i++) {
RemotePgmSpin[i] = court_locs[(act_program.shot[i])-1][act_program.method[i]].spin;
RemoteString[i*4+2] = RemotePgmSpin[i]+170;

}

for (i=0; i<j; i++) {
RemotePgmFeed[i] = act_program.feed[i];
RemoteString[i*4+3] = RemotePgmFeed[i];
}

# 5233
if (i == 0) {



RemoteString[0] = 0xff;
RemoteString[1] = 0x00;
RemoteDataCnt = 1;
} else {
RemoteString[i*4] = 0x00;
RemoteDataCnt = i*4;
}
RemotePgmMode = RPM_START;
}




else if (rky == 0x4a) {



RemoteSaveDrill();
strcpy (RemoteString, "Drill Saved to Machine");

}




else if ((rky >= 0x61) && (rky < (0x61+12))) {

program_ix = rky - 0x61;
strcpy (RemoteString, "Custom Drill ");



itoa (RemoteStringVar,(int)program_ix+1,10);
RemoteString[13] = RemoteStringVar[0];

if (program_ix < 9) {
RemoteString[14] = 0x00;
RemoteDataCnt = 14;
} else {
RemoteString[14] = RemoteStringVar[1];
RemoteString[15] = 0x00;
RemoteDataCnt = 15;
}
key = 0x05;
lcd_updated = 1;
load_prog(program_ix,&act_program);

curState = 2;
priorState = 5;
}

# 5292
else if ((rky >= 0x71) && (rky < (0x71+6))) {
strcpy (RemoteString, "Shot Selected");



RemotePgmShot = rky - 0x71;
if ((RemotePgmShot+1) > UDrillShots)
UDrillShots = RemotePgmShot+1;

# 5311
RemotePgmMode = RPM_SHOTNUM;
}




else if (rky == 0x4d){
RemotePgmMode = 0;
key = 0x05;
priorState = 5;
strcpy (RemoteString, "Exit User Drills");



}

# 5332
else if (rky == 0x57) {
RemoteString[0] = 0x57;
RemoteString[1] = 0x00;
while((!TXSTA2bits.TRMT));
Write2USART(RemoteString[0]);
while((!TXSTA2bits.TRMT));
Write2USART(RemoteString[1]);


for (i=0; i<30; i++) {
while (!(PIR3bits.RC2IF));
RemoteString[i] = Read2USART();
if (RemoteString[i] == 0) {

UDrillShots = (i-1)/4;
break;
}
}

for (i=0; i<UDrillShots; i++) {
RemotePgmLocn[i] = RemoteString[(i*4)+1];

for (j=0; speed_trans[j]<=RemoteString[(i*4)+2]; j++) {
RemotePgmSpeed[i] = j*5;
}

RemotePgmSpin[i] = RemoteString[(i*4)+3]-170;
RemotePgmFeed[i] = RemoteString[(i*4)+4];
}
RemoteSaveDrill();
RemotePgmMode = RPM_DWNLDDRL;
}

# 5370
else if (rky == 0x49){
RemotePgmMode = 0;

RemotePgmMode = RPM_START;
if (play_mode & 1)
key = 0x03;
strcpy (RemoteString,"User Program Mode");
if (!(play_mode & 4)) {
program_ix = 0;
key = 0x05;


}
j=0;
RemoteString[j] = 0x50;
RemoteString[++j] = 0x31;
load_prog(0,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0) {
RemoteString[j] = 0xaa;
}
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x32;
load_prog(1,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0) {
RemoteString[j] = 0xaa;
}
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x33;
load_prog(2,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0) {
RemoteString[j] = 0xaa;
}
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x34;
load_prog(3,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0) {
RemoteString[j] = 0xaa;
}
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x35;
load_prog(4,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0) {
RemoteString[j] = 0xaa;
}
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x36;
load_prog(5,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0) {
RemoteString[j] = 0xaa;
}
}


if (model_type == 4U || model_type == 3U) {
RemoteString[j] = 0x50;
RemoteString[++j] = 0x37;
load_prog(6,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0) {
RemoteString[j] = 0xaa;
}
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x38;
load_prog(7,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0) {
RemoteString[j] = 0xaa;
}
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x39;
load_prog(8,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0) {
RemoteString[j] = 0xaa;
}
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x3a;
load_prog(9,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0) {
RemoteString[j] = 0xaa;
}
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x3b;
load_prog(10,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0) {
RemoteString[j] = 0xaa;
}
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x3c;
load_prog(11,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0) {
RemoteString[j] = 0xaa;
}
}

}




RemoteString[j] = 0x00;


RemoteDataCnt = j;

load_prog(program_ix,&act_program);
}


else {
RemotePgmMode = 0;
strcpy (RemoteString, "Clear Program Mode");
}
}

# 5543
else if (rky == 0x31) {

key = 0x03;

if (play_mode & 1)
strcpy (RemoteString, "Pause");
else {
strcpy (RemoteString, "Play");

start_delay = 0;

}




} else if (rky == 0x46) {

if (play_mode & 1) {
lobmain(0x03);
play_mode &= 0x10;
}
key = 0x2e;


} else if (rky == 0x47) {
if ((play_mode & 1) && (!(play_mode & 8)))
key = 0x03;
if (!(play_mode & 8)) {
key = 0x06;

strcpy (RemoteString,"Manual Play");

} else {
man_parm = 3U;




if (manual.horiz == 3)
manual_horiz_decr = 1;
if (manual.horiz == -3)
manual_horiz_decr = 0;
if (manual_horiz_decr)




lob_parm(0x2b,(uchar*)&man_parm,(signed char *)&manual,(ushort)(1U|(1U << 1U) |(1U << 5U)|(1U << 2U)));
else
lob_parm(0x04,(uchar*)&man_parm,(signed char *)&manual,(ushort)(1U|(1U << 1U) |(1U << 5U)|(1U << 2U)));



set_serve(&manual);




itoa (RemoteStringVar,manual.horiz,10);

strcpy (RemoteString, "Angle: ");
if (manual.horiz > 0)
strcat (RemoteString, "+");
strcat (RemoteString, RemoteStringVar);

}

} else if (rky == 0x33) {
if ((play_mode & 1) && (!(play_mode & 2) || ((play_mode & 2) && (preset_type != 0))))
key = 0x03;



if (!(play_mode & 2)) {

preset_type = 0;

key = 0x02;

strcpy (RemoteString,"Sweep Play");

} else {



if ((play_mode & 2) && (preset_type == 0)) {
preset_ix[preset_type] = 6;
lob_parm(0x04,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);


strcpy (RemoteString, "Row: ");
if (preset[0].col == 0)
strcpy (RemoteStringVar, "A");
else if (preset[0].col == 1)
strcpy (RemoteStringVar, "Random");
else if (preset[0].col == 2)
strcpy (RemoteStringVar, "C");
else if (preset[0].col == 3)
strcpy (RemoteStringVar, "B");
strcat (RemoteString, RemoteStringVar);
} else {
preset_type = 0;
strcpy (RemoteString,"Sweep Play");
}


}
} else if (rky == 0x45) {
if ((play_mode & 1) && (!(play_mode & 2) || ((play_mode & 2) && (preset_type != 1U))))
key = 0x03;



if (!(play_mode & 2)) {

preset_type = 1U;

key = 0x02;

strcpy (RemoteString,"Depth Play");

} else {



if ((play_mode & 2) && (preset_type == 1U)) {
preset_ix[preset_type] = 7;
lob_parm(0x04,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);

# 5677
itoa(RemoteStringVar,preset[1U].row+1,10);

strcpy (RemoteString, "Line: ");
strcat (RemoteString, RemoteStringVar);
} else {
preset_type = 1U;
strcpy (RemoteString,"Depth Play");
}


}
} else if (rky == 0x39) {
if ((play_mode & 1) && (!(play_mode & 2) || ((play_mode & 2) && (preset_type != 3))))
key = 0x03;
preset_type = 3;

strcpy (RemoteString,"Random Play");


if (!(play_mode & 2)) {
key = 0x02;
} else if (play_mode & 1) {

preset_ix[preset_type] = 7;
lob_parm(0x04,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);
} else {
preset_ix[preset_type] = 7;
lob_parm(0x04,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);
}

} else if (rky == 0x34) {
if ((play_mode & 1) && (!(play_mode & 2) || ((play_mode & 2) && (preset_type != 2))))
key = 0x03;



if (!(play_mode & 2)) {

preset_type = 2;

key = 0x02;

strcpy (RemoteString,"2-Line Play");

} else {



if ((play_mode & 2) && (preset_type == 2)) {
preset_ix[preset_type] = 8;
lob_parm(0x04,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);


strcpy (RemoteString, "Width: ");
if (preset[2].width == 0)
strcpy (RemoteStringVar, "Wide");
else if (preset[2].width == 1)
strcpy (RemoteStringVar, "Medium");
else if (preset[2].width == 2)
strcpy (RemoteStringVar, "Narrow");
strcat (RemoteString, RemoteStringVar);
} else {
preset_type = 2;
strcpy (RemoteString,"2-Line Play");
}


}

} else if (rky == 0x32) {
if (play_mode & 1)
key = 0x03;

# 5758
if ((play_mode & 1) && ((play_mode & 2) && ((preset_type >= 4))))

toggle_play = 1;
if (play_mode & 2) {
if (preset_type == 4) {
preset_type = 5;

strcpy (RemoteString,"Power Baseliner Drill");

}
else if (preset_type == 5) {
preset_type = 6;

strcpy (RemoteString,"All-Courter Drill");

}


else if (preset_type == 6 && ((model_type == 2U) || (model_type == 5U))) {

# 5795
preset_type = 13;
strcpy (RemoteString,"Moonballer Drill");

}
else if (preset_type == 6) {
preset_type = 7;

strcpy (RemoteString,"Approach Drill");

}
else if (preset_type == 7) {
preset_type = 8;

strcpy (RemoteString,"Attack/Defend Drill");

}
else if (preset_type == 8) {
preset_type = 9;

strcpy (RemoteString,"Forehand Plus Drill");

}

# 5831
else if (preset_type == 9) {
preset_type = 10;

strcpy (RemoteString,"Beginner Drill");

}
else if (preset_type == 10) {
preset_type = 11;

strcpy (RemoteString,"Intermediate Drill");

}
else if (preset_type == 11) {
preset_type = 12;

strcpy (RemoteString,"Advanced Drill");

}
else if (preset_type == 12) {
preset_type = 13;

strcpy (RemoteString,"Moonballer Drill");

}
else if (preset_type == 13) {
preset_type = 14;

strcpy (RemoteString,"Slicer Drill");

}
else if (preset_type == 14) {
preset_type = 15;

strcpy (RemoteString,"Lefty Drill");

}

else {
preset_type = 4;

strcpy (RemoteString,"Grinder Drill");

}
} else {
preset_type = 4;
key = 0x02;

strcpy (RemoteString,"Grinder Drill");

}


} else if (rky == 0x35) {
if ((play_mode & 4) && (curState == 4)) {
ppparm_ix = 0U;
key = 0x04;

} else if (play_mode & 2) {



if (preset_type < 3) {

preset_ix[preset_type] = 0U;
lob_parm(0x04,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);
set_serve(&preset[preset_type]);




itoa(RemoteStringVar,speed_trans[preset[preset_type].speed/5],10);

strcpy (RemoteString, "Speed: ");
strcat (RemoteString, RemoteStringVar);

}


} else if (play_mode & 8){

man_parm = 0U;


lob_parm(0x04,(uchar*)&man_parm,(signed char *)&manual,(ushort)(1U|(1U << 1U) |(1U << 5U)|(1U << 2U)));

set_serve(&manual);

# 5922
itoa(RemoteStringVar,speed_trans[manual.speed/5],10);

strcpy (RemoteString, "Speed: ");
strcat (RemoteString, RemoteStringVar);

}


} else if (rky == 0x37) {
if ((play_mode & 4) && (curState == 4)) {
ppparm_ix = 0U;
key = 0x2b;

} else if (play_mode & 2) {



if (preset_type < 3) {

preset_ix[preset_type] = 0U;
lob_parm(0x2b,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);
set_serve(&preset[preset_type]);




itoa(RemoteStringVar,speed_trans[preset[preset_type].speed/5],10);

strcpy (RemoteString, "Speed: ");
strcat (RemoteString, RemoteStringVar);

}


} else if (play_mode & 8){

man_parm = 0U;


lob_parm(0x2b,(uchar*)&man_parm,(signed char *)&manual,(ushort)(1U|(1U << 1U)|(1U << 5U)|(1U << 2U)));

set_serve(&manual);




itoa(RemoteStringVar,speed_trans[manual.speed/5],10);

strcpy (RemoteString, "Speed: ");
strcat (RemoteString, RemoteStringVar);

}


} else if (rky == 0x41) {
if ((play_mode & 4) && (curState == 4)) {
ppparm_ix = 2U;
key = 0x04;

} else if (play_mode & 2) {



if (preset_type < 3) {

preset_ix[preset_type] = 2U;
lob_parm(0x04,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);
set_serve(&preset[preset_type]);




itoa(RemoteStringVar,preset[preset_type].spin,10);

strcpy (RemoteString, "Spin: ");
if (preset[preset_type].spin > 0)
strcat (RemoteString, "+");
strcat (RemoteString, RemoteStringVar);

}


} else if (play_mode & 8){

man_parm = 2U;


lob_parm(0x04,(uchar*)&man_parm,(signed char *)&manual,(ushort)(1U|(1U << 1U)|(1U << 5U)|(1U << 2U)));

set_serve(&manual);



itoa(RemoteStringVar,manual.spin,10);

strcpy (RemoteString, "Spin: ");
if (manual.spin > 0)
strcat (RemoteString, "+");
strcat (RemoteString, RemoteStringVar);

}


} else if (rky == 0x42) {
if ((play_mode & 4) && (curState == 4)) {
ppparm_ix = 2U;
key = 0x2b;

} else if (play_mode & 2) {



if (preset_type < 3) {

preset_ix[preset_type] = 2U;
lob_parm(0x2b,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);
set_serve(&preset[preset_type]);




itoa(RemoteStringVar,preset[preset_type].spin,10);

strcpy (RemoteString, "Spin: ");
if (preset[preset_type].spin > 0)
strcat (RemoteString, "+");
strcat (RemoteString, RemoteStringVar);

}


} else if (play_mode & 8){

man_parm = 2U;


lob_parm(0x2b,(uchar*)&man_parm,(signed char *)&manual,(ushort)(1U|(1U << 1U) |(1U << 5U)|(1U << 2U)));

set_serve(&manual);




itoa(RemoteStringVar,manual.spin,10);

strcpy (RemoteString, "Spin: ");
if (manual.spin > 0)
strcat (RemoteString, "+");
strcat (RemoteString, RemoteStringVar);

}


} else if (rky == 0x36) {
if ((play_mode & 4) && (curState == 4)) {
ppparm_ix = 5U;
key = 0x04;

} else if (play_mode & 2) {

preset_ix[preset_type] = 5U;
lob_parm(0x04,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);
rem_feed_chg = 1;

strcpy (RemoteString, "Feed: ");
if(preset[preset_type].feed == 1) {
strcpy (RemoteStringVar, "Random");
strcat (RemoteString, RemoteStringVar);
}
else {



itoa(RemoteStringVar,preset[preset_type].feed,10);

strcat (RemoteString, RemoteStringVar);
}



} else if (play_mode & 8){

man_parm = 5U;


lob_parm(0x04,(uchar*)&man_parm,(signed char *)&manual,(ushort)(1U|(1U << 1U) |(1U << 5U)|(1U << 2U)));


strcpy (RemoteString, "Feed: ");
if(manual.feed == 1)
strcpy (RemoteStringVar, "Random");



else itoa(RemoteStringVar,manual.feed,10);

strcat (RemoteString, RemoteStringVar);

}


} else if (rky == 0x38) {
if ((play_mode & 4) && (curState == 4)) {
ppparm_ix = 5U;
key = 0x2b;

} else if (play_mode & 2) {

preset_ix[preset_type] = 5U;
lob_parm(0x2b,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);
rem_feed_chg = 1;

strcpy (RemoteString, "Feed: ");
if(preset[preset_type].feed == 1)
strcpy (RemoteStringVar, "Random");
else



itoa(RemoteStringVar,preset[preset_type].feed,10);

strcat (RemoteString, RemoteStringVar);



} else if (play_mode & 8){

man_parm = 5U;


lob_parm(0x2b,(uchar*)&man_parm,(signed char *)&manual,(ushort)(1U|(1U << 1U) |(1U << 5U)|(1U << 2U)));


strcpy (RemoteString, "Feed: ");
if(manual.feed == 1)
strcpy (RemoteStringVar, "Random");



else itoa(RemoteStringVar,manual.feed,10);

strcat (RemoteString, RemoteStringVar);

}




} else if (rky == 0x43) {
if (play_mode & 4) {



elev_test_adjust = 0;


} else if ((play_mode & 2) && (preset_type == 0)) {

preset_ix[preset_type] = 6U;




lob_parm(0x04,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);




strcpy (RemoteString, "Row: ");
if (preset[0].col == 0)
strcpy (RemoteStringVar, "A");
else if (preset[0].col == 1)
strcpy (RemoteStringVar, "Random");
else if (preset[0].col == 2)
strcpy (RemoteStringVar, "C");
else if (preset[0].col == 3)
strcpy (RemoteStringVar, "B");
strcat (RemoteString, RemoteStringVar);

# 6208
} else if ((play_mode & 2) && (preset_type == 2)) {


preset_ix[preset_type] = 4U;




lob_parm(0x04,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);




strcpy (RemoteString, "Row: ");
if (preset[2].twolnrw == 0)
strcpy (RemoteStringVar, "A");
else if (preset[2].twolnrw == 1)
strcpy (RemoteStringVar, "Random");
else if (preset[2].twolnrw == 2)
strcpy (RemoteStringVar, "C");
else if (preset[2].twolnrw == 3)
strcpy (RemoteStringVar, "B");
strcat (RemoteString, RemoteStringVar);

} else if (play_mode & 8) {
man_parm = 1U;


lob_parm(0x04,(uchar*)&man_parm,(signed char *)&manual,(ushort)(1U|(1U << 1U) |(1U << 5U)|(1U << 2U)));

set_serve(&manual);

strcpy (RemoteString, "Elev: ");



itoa(RemoteStringVar,manual.elev,10);

strcat (RemoteString, RemoteStringVar);

} else if (cur_st == 7) {
key = 0x04;
}


} else if (rky == 0x44) {
if (play_mode & 4) {



elev_test_adjust = 0;


} else if ((play_mode & 2) && (preset_type == 0)) {

preset_ix[preset_type] = 6U;




lob_parm(0x2b,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);




strcpy (RemoteString, "Row: ");
if (preset[0].col == 0)
strcpy (RemoteStringVar, "A");
else if (preset[0].col == 1)
strcpy (RemoteStringVar, "Random");
else if (preset[0].col == 2)
strcpy (RemoteStringVar, "C");
else if (preset[0].col == 3)
strcpy (RemoteStringVar, "B");
strcat (RemoteString, RemoteStringVar);

# 6291
} else if ((play_mode & 2) && (preset_type == 2)) {


preset_ix[preset_type] = 4U;




lob_parm(0x2b,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);




strcpy (RemoteString, "Row: ");
if (preset[2].twolnrw == 0)
strcpy (RemoteStringVar, "A");
else if (preset[2].twolnrw == 1)
strcpy (RemoteStringVar, "Random");
else if (preset[2].twolnrw == 2)
strcpy (RemoteStringVar, "C");
else if (preset[2].twolnrw == 3)
strcpy (RemoteStringVar, "B");
strcat (RemoteString, RemoteStringVar);

} else if (play_mode & 8) {
man_parm = 1U;


lob_parm(0x2b,(uchar*)&man_parm,(signed char *)&manual,(ushort)(1U|(1U << 1U) |(1U << 5U)|(1U << 2U)));

set_serve(&manual);

strcpy (RemoteString, "Elev: ");



itoa(RemoteStringVar,manual.elev,10);

strcat (RemoteString, RemoteStringVar);

} else if (cur_st == 7) {
key = 0x2b;

strcpy (RemoteString,lcd_line[0]);
strcat (RemoteString,"\n");
strcat (RemoteString,lcd_line[1]);
strcat (RemoteString,"\n");
strcat (RemoteString,lcd_line[2]);
strcat (RemoteString,"\n");
strcat (RemoteString,lcd_line[3]);

}
}


else if (rky == 0x48) {
strcpy (RemoteString,lcd_line[0]);
strcat (RemoteString,"\n");
strcat (RemoteString,lcd_line[1]);
strcat (RemoteString,"\n");
strcat (RemoteString,lcd_line[2]);
strcat (RemoteString,"\n");
strcat (RemoteString,lcd_line[3]);
}


else if (rky == 0x49) {
if ((model_type == 2U) || (model_type == 5U)) {
strcpy (RemoteString, "Upgrade Available Contact\rLobster Sports");
} else {
CurShot.top = 0x6000;
CurShot.bot = 0x6000;
StartTop(CurShot.top);
StartBot(CurShot.bot);
RemotePgmMode = 0;
program_ix = 0;

RemotePgmMode = RemotePgmMode | RPM_START;
if (play_mode & 1)
key = 0x03;


program_ix = 0;
key = 0x05;



priorState = 5;

j=0;
RemoteString[j] = 0x50;
RemoteString[++j] = 0x31;
load_prog(0,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0)
RemoteString[j] = 0xaa;
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x32;
load_prog(1,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0)
RemoteString[j] = 0xaa;
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x33;
load_prog(2,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0)
RemoteString[j] = 0xaa;
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x34;
load_prog(3,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0)
RemoteString[j] = 0xaa;
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x35;
load_prog(4,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0)
RemoteString[j] = 0xaa;
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x36;
load_prog(5,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0)
RemoteString[j] = 0xaa;
}


if (model_type == 4U || model_type == 3U) {
RemoteString[j] = 0x50;
RemoteString[++j] = 0x37;
load_prog(6,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0)
RemoteString[j] = 0xaa;
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x38;
load_prog(7,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0)
RemoteString[j] = 0xaa;
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x39;
load_prog(8,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0)
RemoteString[j] = 0xaa;
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x3a;
load_prog(9,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0)
RemoteString[j] = 0xaa;
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x3b;
load_prog(10,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0)
RemoteString[j] = 0xaa;
}

RemoteString[j] = 0x50;
RemoteString[++j] = 0x3c;
load_prog(11,&act_program);

for (i=0, j++; i<6; i++, j++) {
RemoteString[j] = act_program.shot[i];
if (RemoteString[j] == 0)
RemoteString[j] = 0xaa;
}

}




RemoteString[j] = 0x00;


RemoteDataCnt = j;

load_prog(0,&act_program);
}
}

else if (rky == 0x56) {
RemotePgmMode = RPM_SHOTTABLES;

for (i=0; i<=pp_maxloc-1; i++) {
for (j=0; court_locs[i][j].speed !=0; j++) {
while((!TXSTA2bits.TRMT));
Write2USART(i+1);
while((!TXSTA2bits.TRMT));
Write2USART(speed_trans[court_locs[i][j].speed/5]);
while((!TXSTA2bits.TRMT));
Write2USART(court_locs[i][j].spin + 170);
}
}

# 6542
while((!TXSTA2bits.TRMT));
Write2USART(0x00);
}

# 6559
}
}

# 6567
if (power_state != 4) {
lobmain(key);

# 6575
if (RemoteDataReceived) {
RemoteDataReceived = 0;

# 6584
if (RemotePgmMode == RPM_SHOTTABLES) {

RemotePgmMode = RPM_START;
}

else if (RemotePgmMode == RPM_DWNLDDRL) {
RemotePgmMode = RPM_START;
}

else {


if (cur_st == 7) {
strcpy (RemoteString,lcd_line[0]);
strcat (RemoteString,"\n");
strcat (RemoteString,lcd_line[1]);
strcat (RemoteString,"\n");
strcat (RemoteString,lcd_line[2]);
strcat (RemoteString,"\n");
strcat (RemoteString,lcd_line[3]);
}

else if (!(strlen (RemoteString))) {
strcpy (RemoteString, "Not Available");
}
if (RemoteDataCnt) {
for (i=0; i<=RemoteDataCnt; i++) {
while((!TXSTA2bits.TRMT));
Write2USART(RemoteString[i]);
}
}
else {
puts2USART (RemoteString);
}
}

strcpy (RemoteString, "\0");

# 6627
}


if (toggle_play) {
lobmain(0x02);
lobmain(0x03);
toggle_play = 0;
}
}

# 6645
if ((key > 6) && (key < 34) && ((model_type == 2U) || (model_type == 5U))) {

startit = 0;
switch (key) {

case 7:


if ((play_mode & 1) && (play_mode & 2) && (preset_type >= 4))
startit = 1;

# 6665
if (preset_type == 4)
preset_type = 13;
else preset_type = 4;


if (!(play_mode & 2)) {
key = 0x02;
}
if (startit == 1)
goto keepplaying;
goto skiptwoline;
case 9:


if ((play_mode & 1) && (play_mode & 2) && (preset_type >= 4))
startit = 1;

# 6691
if (preset_type == 5)
preset_type = 14;
else preset_type = 5;


if (!(play_mode & 2)) {
key = 0x02;
}
if (startit == 1)
goto keepplaying;
goto skiptwoline;
case 8:


if ((play_mode & 1) && (play_mode & 2) && (preset_type >= 4))
startit = 1;

# 6717
if (preset_type == 6)
preset_type = 15;
else preset_type = 6;


if (!(play_mode & 2)) {
key = 0x02;
}
if (startit == 1)
goto keepplaying;
goto skiptwoline;
case 20:
if ((play_mode & 2) && (preset_type == 3) && (play_mode & 1)) {
startit = 1;
goto keepplaying;
} else
preset_type = 3;
goto skiptwoline;
case 19:

# 6744
if ((play_mode & 2) && (preset_type == 0)) {
preset_ix[preset_type] = 6;
lob_parm(0x04,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);
if (play_mode & 1) {
startit = 1;
goto keepplaying;
}
} else
preset_type = 0;
goto skiptwoline;
case 21:
if ((play_mode & 2) && (preset_type == 1U)) {
preset_ix[preset_type] = 7;
lob_parm(0x04,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);
if (play_mode & 1) {
startit = 1;
goto keepplaying;
}
} else
preset_type = 1U;
goto skiptwoline;
case 31:
case 33:
case 32:
if ((play_mode & 2) && (preset_type == 2) && (play_mode & 1)) {
preset_ix[preset_type] = 8;
startit = 1;
goto keepplaying;
} else {
preset_type = 2;
}

skiptwoline:
play_mode &= ~1;
BuildCmd('3',1,&play_mode);
keepplaying:
lobmain(key);
lobmain(key);



if (startit) {
if (start_delay) {
PlayLEDPass = 0;
PlayLEDTmr = 170;;
start_delay = ticks + 2300L;
PlayModeBlink = play_mode;
}
lobmain(0x03);
} else start_delay = 0;

break;
}
}

# 6809
if ((key > 6) && (key <= 0x24) && (model_type == 4U || model_type == 3U)) {


startit = 0;
switch (key) {
case 0x24:


if ((play_mode & 1) && ((play_mode & 2) && ((preset_type >= 4))))

startit = 1;
if (play_mode & 2) {
if (preset_type == 4) {
preset_type = 5;
}
else if (preset_type == 5) {
preset_type = 6;
}
else if (preset_type == 6) {
preset_type = 7;
}
else if (preset_type == 7) {
preset_type = 8;
}
else if (preset_type == 8) {
preset_type = 9;
}

# 6850
else if (preset_type == 9) {
preset_type = 10;
}
else if (preset_type == 10) {
preset_type = 11;
}
else if (preset_type == 11) {
preset_type = 12;
}
else if (preset_type == 12) {
preset_type = 13;
}
else if (preset_type == 13) {
preset_type = 14;
}
else if (preset_type == 14) {
preset_type = 15;
}

else {
preset_type = 4;
}
} else {
preset_type = 4;
key = 0x02;
}
if (startit == 1)
goto continue_playing;
goto skip2line;
case 0x0c:
if ((play_mode & 2) && (preset_type == 3) && (play_mode & 1)) {
startit = 1;
goto continue_playing;
} else
preset_type = 3;
goto skip2line;
case 0x18:

# 6895
if ((play_mode & 2) && (preset_type == 0)) {
preset_ix[preset_type] = 6;
lob_parm(0x04,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);
if (play_mode & 1) {
startit = 1;
goto continue_playing;
}
} else {
preset_type = 0;
}
goto skip2line;
case 0x1e:
if ((play_mode & 2) && (preset_type == 1U)) {
preset_ix[preset_type] = 7;
lob_parm(0x04,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);
if (play_mode & 1) {
startit = 1;
goto continue_playing;
}
} else
preset_type = 1U;
goto skip2line;
case 0x12:
if ((play_mode & 2) && (preset_type == 2)) {
preset_ix[preset_type] = 8;
lob_parm(0x04,(uchar *)&preset_ix[preset_type],&(preset[preset_type].value[0]),preset_mask[preset_type]);
if (play_mode & 1) {
startit = 1;
goto continue_playing;
}
} else
preset_type = 2;
skip2line:
play_mode &= ~1;
BuildCmd('3',1,&play_mode);
continue_playing:
lobmain(key);
lobmain(key);



if (startit) {
if (start_delay) {
PlayLEDPass = 0;
PlayLEDTmr = 170;;
start_delay = ticks + 2300L;
PlayModeBlink = play_mode;
}
lobmain(0x03);
} else start_delay = 0;

break;
}
}


}
}

unsigned long last_received = 0;

unsigned char debounced_remote(void)
{
unsigned char rc = 0;

if (RCSTA1bits.OERR) {
RCSTA1bits.CREN = 0;
RCSTA1bits.CREN = 1;
putrsDIAG("Overrun error cleared.\n");
}
if ((PIR1bits.RCIF)) {
rc = Read1USART();
if ((ticks - last_received) < 15U) {
rc = 0;
}
last_received = ticks;
}
return(rc);
}


unsigned char debounced_remote_USART2(void)
{
unsigned char rc = 0;


if (RCSTA2bits.OERR) {
RCSTA2bits.CREN = 0;
RCSTA2bits.CREN = 1;
putrsDIAG("\n\rUSART2 Overrun error cleared.");
}
if ((PIR3bits.RC2IF)) {
rc = Read2USART();

if (rc == 0x5a) {
rc_qualified = 1;
rc = 0;
}
else if (rc_qualified != 1) {
rc = 0;
}
else {
rc_qualified = 0;
RemoteDataReceived = 1;
}
}
return(rc);
}


void RemoteSaveDrill (void)
{ char i;
char j;

prog_chgd = 1;
for (i=0; i<UDrillShots; i++) {
act_program.shot[i] = RemotePgmLocn[i];
act_program.feed[i] = RemotePgmFeed[i];

for (j=0; court_locs[RemotePgmLocn[i]-1][j].speed !=0; j++) {
if ((court_locs[RemotePgmLocn[i]-1][j].speed == RemotePgmSpeed[i])
&& (court_locs[RemotePgmLocn[i]-1][j].spin == RemotePgmSpin[i])){
RemotePgmMethod[i] = j;
break;
}
}

# 7030
act_program.method[i] = RemotePgmMethod[i];
}
for (i=UDrillShots; i<6; i++) {
act_program.shot[i] = 0;
act_program.method[i] = 0;
act_program.feed[i] = 4;
}
save_prog(program_ix,&act_program);

priorState = 5;
}

# 7049
void nofunc (int code, long *args)

{ }

void FillDiagBuf()
{
char c;
int ct = rbuf_bct(&di_inbuf);
while (ct--) {
c = rbuf_extr(&di_inbuf);
if (!stat.HaveCmd && !stat.InCmd) {
rbuf_ins(&di_outbuf, c);
c = toupper(c);
if (c == 13 || c == 10) {
c = 0;
stat.HaveCmd = 1;
}
if (c == (char)',') c = ' ';
if (c == 8) {
if (DiagBufOfs)
--DiagBufOfs;
} else if (c == 27) {
DiagBufOfs = 0;
} else
DiagBuf[DiagBufOfs++] = c;
DiagBuf[DiagBufOfs] = 0;
if (DiagBufOfs >= (32 + 1)) {
stat.HaveCmd = 1;
stat.CmdErr = 1;
}
}
}
}

# 7092
unsigned char *parse_next(unsigned char *cp, unsigned char delim, unsigned long *ulp)
{
unsigned char *np;

if (cp) {
np = (unsigned char *)strchr((char *)cp, delim);
if (np) {
*np++ = 0;
if (ulp) {
*ulp = atoh((char *)cp);
}
} else if (*cp) {
if (ulp)
*ulp = atoh((char *)cp);
}
}
return(np);
}




void exec_diag(void)
{

char i, j, k;
long jj = 0;
unsigned cmd;
unsigned char *cptr = &DiagBuf[2];
long argary[8];

cmd = ((unsigned)DiagBuf[0] << 8) + (unsigned)DiagBuf[1];
if (*cptr == ' ') ++cptr;

for (i=0; centry[i].cmd; i++) {

if (centry[i].cmd == cmd){
stat.InCmd = 1;
if (stat.CmdErr)
;
else {

for (j=0; j< 8; j++)
argary[j] = 0;
for (j=0; j<8; j++) {
cptr = parse_next(cptr,' ',(unsigned long *)&argary[j]);
if ((int)strlen((char *)cptr) == 0) break;
}
centry[i].func (centry[i].code, &argary[0]);
}
break;
}
}
if (!centry[i].cmd)
putrsDIAG (InvCmd);
DiagBufOfs = 0;
stat.CmdErr = 0;
stat.HaveCmd = 0;
stat.InCmd = 0;
putrsDIAG (ready);
}



void dumpmem(int code, long *args)
{
unsigned long ix;
int ix1;

ix = args[0];
for (ix1=0; ix1<(int)0x80; ix1++) {
if ((ix1 & 0x0f) == 0)
dumpaddr(ix);
else if ((ix1 & 3) == 0) {
rbuf_ins(&di_outbuf, ' ');
}
dumphex(*(unsigned char *)ix++);
}
putrsDIAG(crlf);
}



void setmem(int code, long *args)
{
unsigned char *cptr = (unsigned char *)args[0];
*cptr = args[1];
}

# 7304
void spitest(int code, long *args)
{
unsigned char data, status;
switch (code) {
case 0:
ChipSelect(args[0]);
if (WriteSPI1((char)args[1]))
putrsDIAG("\n\rWRITE COLLISION\n\r");
ChipDeSelect(args[0]);
break;
case 1:
ChipSelect(args[0]);

# 7321
data = ReadSPI1();
ChipDeSelect(args[0]);
putrsDIAG(crlf);
dumphex(data);
break;
}
}


void a2d_diag(int code, long *args)
{
unsigned long val;
int i;

switch (code) {
case 0:
a2dtest = 0;
for (i=0; i<7; i++) {
dumpaddr(i);
dumplong(a2dValue[i]);
dumphex(a2dGain[i]);
}
break;
case 1:
a2dtest = 1;
PgaGain(args[0], args[1]);
ADCON0 = 0x01;
ADCON0bits.NOT_DONE = TRUE;
dumpaddr(args[0]);
while (ADCON0bits.NOT_DONE == TRUE);
val = ADRESH;
val = (val & 0xff) << 8;
val |= ((unsigned int)ADRESL) & 0xff;
a2dValue[args[0]] = (int)val;
ADCON0 = 0;
dumplong(val);
dumphex(args[1]);
break;
case 2:
if (args[0] == 8) {
int i,j;
for (i=4, j=0; i<=25; i++,j++) {
dumpshort(CurSenseCt[0][j]);
}
}
a2dChan2Dump = args[0];
break;
case 3:
dumplong(BAT_lastval);
break;
case 4:
if (args[0])
BDM_TripPoint[2] = (unsigned int)args[0];
if (args[1])
BDM_TripTime[2] = (unsigned int)args[1];
break;
}
}

# 7392
void DisableSlaveSPI(void)
{
char c, c1;

c = 21;
while ((c == 21) || (c1 == 21)) {
BuildCmd('5',0,(long *)0);
Delay1KTCYx(5);
ChipSelect(0);
c = ReadSPI1();
ChipDeSelect(0);
Delay1KTCYx(5);
ChipSelect(0);
c1 = ReadSPI1();
ChipDeSelect(0);
if ((c == 21) || (c1 == 21)) {
putrsDIAG("\nNAK");
}
}
}

void EnableSlaveSPI(void)
{
char c;
BuildCmd('6',0,(long *)0);
Delay1KTCYx(5);
ChipSelect(0);
c = ReadSPI1();
ChipDeSelect(0);
}

char SEERead(unsigned int addr)
{
char data;

ChipReserve(1);
PORTDbits.RD6 = 1;
PORTDbits.RD6 = 0;
WriteSPI1(0x03);
WriteSPI1((addr >> 8) & 0xff);
WriteSPI1(addr & 0xff);
data = ReadSPI1();
PORTDbits.RD6 = 1;
ChipDeSelect(1);

# 7441
return data;
}

void SEEWrite(unsigned int addr, char data)
{
char status;

ChipReserve(1);
PORTDbits.RD6 = 1;
status = 1;
while (status & 1) {
PORTDbits.RD6 = 0;
WriteSPI1(0x05);
status = ReadSPI1();
PORTDbits.RD6 = 1;
}
PORTDbits.RD6 = 0;
WriteSPI1(0x06);
PORTDbits.RD6 = 1;
PORTDbits.RD6 = 0;
WriteSPI1(0x01);
WriteSPI1(0);
PORTDbits.RD6 = 1;
status = 1;
while (status & 1) {
PORTDbits.RD6 = 0;
WriteSPI1(0x05);
status = ReadSPI1();
PORTDbits.RD6 = 1;
}
PORTDbits.RD6 = 0;
WriteSPI1(0x06);
PORTDbits.RD6 = 1;
PORTDbits.RD6 = 0;
WriteSPI1(0x02);
WriteSPI1((addr >> 8) & 0xff);
WriteSPI1(addr & 0xff);
WriteSPI1(data);
PORTDbits.RD6 = 1;
status = 1;
while (status & 1) {
PORTDbits.RD6 = 0;
WriteSPI1(0x05);
status = ReadSPI1();
PORTDbits.RD6 = 1;
}
PORTDbits.RD6 = 0;
WriteSPI1(0x06);
PORTDbits.RD6 = 1;
PORTDbits.RD6 = 0;
WriteSPI1(0x01);
WriteSPI1(0x8c);
Delay1KTCYx(1);
PORTDbits.RD6 = 1;
status = 1;
while (status & 1) {
PORTDbits.RD6 = 0;
WriteSPI1(0x05);
status = ReadSPI1();
PORTDbits.RD6 = 1;
}
status = 1;
while (status & 1) {
PORTDbits.RD6 = 0;
WriteSPI1(0x05);
status = ReadSPI1();
PORTDbits.RD6 = 1;
}
ChipDeSelect(1);
}


void ee_test(int code, long *args)
{
unsigned int addr;
unsigned char data, status,status1,status2,status3;

DisableSlaveSPI();
switch (code) {
case 0:
addr = args[0];
data = SEERead(addr);
putrsDIAG(crlf);
dumphex(data);
putrsDIAG(crlf);
break;
case 1:
addr = args[0];
data = (char)args[1];
SEEWrite(addr,data);
break;
case 2:
addr = args[0];
data = (char)args[1];
ChipReserve(1);
PORTDbits.RD6 = 1;
status = 1;
while (status & 1) {
PORTDbits.RD6 = 0;
WriteSPI1(0x05);
status = ReadSPI1();
PORTDbits.RD6 = 1;
}
status1 = status;
PORTDbits.RD6 = 0;
WriteSPI1(0x06);
PORTDbits.RD6 = 1;
PORTDbits.RD6 = 0;
WriteSPI1(0x01);
WriteSPI1(0);
PORTDbits.RD6 = 1;
status = 1;
while (status & 1) {
PORTDbits.RD6 = 0;
WriteSPI1(0x05);
status = ReadSPI1();
PORTDbits.RD6 = 1;
}
PORTDbits.RD6 = 0;
WriteSPI1(0x06);
PORTDbits.RD6 = 1;
PORTDbits.RD6 = 0;
WriteSPI1(0x02);
WriteSPI1((addr >> 8) & 0xff);
WriteSPI1(addr & 0xff);
WriteSPI1(data);
PORTDbits.RD6 = 1;
status = 1;
while (status & 1) {
PORTDbits.RD6 = 0;
WriteSPI1(0x05);
status = ReadSPI1();
PORTDbits.RD6 = 1;
}
status2 = status;
PORTDbits.RD6 = 0;
WriteSPI1(0x06);
PORTDbits.RD6 = 1;
PORTDbits.RD6 = 0;
WriteSPI1(0x01);
WriteSPI1(0x8c);
Delay1KTCYx(1);
PORTDbits.RD6 = 1;
status = 1;
while (status & 1) {
PORTDbits.RD6 = 0;
WriteSPI1(0x05);
status = ReadSPI1();
PORTDbits.RD6 = 1;
}
status3 = status;
status = 1;
while (status & 1) {
PORTDbits.RD6 = 0;
WriteSPI1(0x05);
status = ReadSPI1();
PORTDbits.RD6 = 1;
}
ChipDeSelect(1);
EnableSlaveSPI();
dumplong(status1);
dumplong(status2);
dumplong(status3);
dumplong(status);
return;
case 3:
addr = args[0];
ChipReserve(1);
PORTDbits.RD6 = 1;
status = 1;
while (status & 1) {
PORTDbits.RD6 = 0;
WriteSPI1(0x05);
status = ReadSPI1();
PORTDbits.RD6 = 1;
}
status1 = status;
PORTDbits.RD6 = 0;
WriteSPI1(0x06);
PORTDbits.RD6 = 1;
PORTDbits.RD6 = 0;
WriteSPI1(0x01);
if (addr == 0)
WriteSPI1(0);
else
WriteSPI1(0x8c);
PORTDbits.RD6 = 1;
ChipDeSelect(1);
break;
case 4:

ChipReserve(1);
PORTDbits.RD6 = 1;
status = 1;
while (status & 1) {
PORTDbits.RD6 = 0;
WriteSPI1(0x05);
status = ReadSPI1();
PORTDbits.RD6 = 1;
}
ChipDeSelect(1);
dumplong(status);
break;
}
EnableSlaveSPI();
}
void ChipDeSelect(int dev)
{
switch (dev) {
case 0:
PORTCbits.RC0 = 1;
break;
case 1:
PORTDbits.RD6 = 1;
break;
case 2:
PORTDbits.RD7 = 1;
break;
case 3:
PORTBbits.RB4 = 1;
break;
default:
break;
}
SpiLock = 0;

}


void ChipSelect(int dev)
{
SpiLock = 1;

PORTBbits.RB4 = 1;
PORTCbits.RC0 = 1;
PORTDbits.RD6 = 1;
PORTDbits.RD7 = 1;

switch (dev) {
case 0:
PORTCbits.RC0 = 0;
break;
case 1:
PORTDbits.RD6 = 0;
break;
case 2:
PORTDbits.RD7 = 0;
break;
case 3:
PORTBbits.RB4 = 0;
break;
default:
break;
}

}


void ChipReserve(int dev)
{
SpiLock = 1;

PORTBbits.RB4 = 1;
PORTCbits.RC0 = 1;
PORTDbits.RD6 = 1;
PORTDbits.RD7 = 1;
}



void chip_select(int code, long *args)
{
ChipSelect(args[0]);
}


void PgaGain(int chan, char gain)
{
ChipSelect(2);
WriteSPI1(0x40);
WriteSPI1(gain);
ChipDeSelect(2);
ChipSelect(2);
WriteSPI1(0x41);
WriteSPI1(chan);
ChipDeSelect(2);
}


void PgaChan(int chan)
{
ChipSelect(2);
WriteSPI1(0x41);
WriteSPI1(chan);
ChipDeSelect(2);
}

# 7743
void SlowFeedMtr(int flag)
{
if (flag)
;
else
;
feed_stat.Run = FALSE;
if (!feed_stat.Cont) {
d_feed_per = (unsigned long)feed_slow << 16;

feed_pwm = (unsigned long)feed_slow << 16;
SetDCPWM3(feed_pwm >> 16);
}
if (flag) {
if (!feed_stat.Cont)
feed_stat.Slow = TRUE;
feed_stat.Hold = FALSE;
} else {
feed_stat.Hold = TRUE;
feed_stat.Slow = FALSE;
}
}

void FeedMtrDone(void)
{
feed_stat.Hold = FALSE;
feed_stat.Run = FALSE;
if (!feed_stat.Cont) {



d_feed_per = (unsigned long)feed_slow << 16;


feed_stat.Slow = TRUE;
feed_pwm = (unsigned long)feed_slow << 16;
SetDCPWM3(feed_pwm >> 16);
}
}


void StopFeedMtr(void)
{
unsigned *ptr = (unsigned *)&feed_stat;

*ptr = 0;
feed_pwm = d_feed_per = 0;
SetDCPWM3(feed_pwm << 2);
}



void abort_shot(void)
{
*(unsigned int*)&top_stat = 0;
*(unsigned int*)&bot_stat = 0;
*(unsigned int*)&feed_stat = 0;
CurShotState = 0U;
StopFeedMtr();
StopBidirMtrs();

putrsDIAG("\n\rabort_shot");

}


void StopTopMtr(void)
{
unsigned *ptr = (unsigned *)&top_stat;
top_pwm = 0L;
d_top_per = 0;
SetDCPWM4(top_pwm << 2);
*ptr = 0;
}


void StopBotMtr(void)
{
unsigned *ptr = (unsigned *)&bot_stat;
bot_pwm = 0L;
d_bot_per = 0;
SetDCPWM5(bot_pwm << 2);
*ptr = 0;
}


void StopBidirMtrs(void)
{
slavecmd('2', 0);
}

void StartSweepRandom(int speed, int limit_r, int limit_l)
{
long arg[2];
arg[0] = (long)speed;
arg[1] = ((long)limit_l << 16) | ((long)limit_r & 0xffff);
slavecmd('K',&arg[0]);
}

void StartElevRandom(int speed, int limit_top, int limit_bot)
{
long arg[2];
arg[0] = (long)speed;
arg[1] = ((long)limit_bot << 16) | ((long)limit_top & 0xffff);
slavecmd('k',&arg[0]);
}



void sweep_diag(int code, long *args)
{
switch (code) {
case 0:
BDM_TripPoint[0] = args[0];
break;
case 1:
BDM_TripTime[0] = args[0];
break;
}
}



void elev_diag(int code, long *args)
{
switch (code) {
case 0:
BDM_TripPoint[1] = args[0];
break;
case 1:
BDM_TripTime[1] = args[0];
break;
}
}


void CurShot_diag(int code, long *args)
{
switch (code) {
case 0:
CurShot.x = args[0];
BuildCmd('A', 1, args);
break;
case 1:
CurShot.y = args[0];
args[0] += elev_corr.s;
BuildCmd('a', 1, args);
break;
case 2:
StartTop(CurShot.top);
break;
case 3:
StartBot(CurShot.bot);
break;
case 4:

SetFeedRate(feed_limit);
StartFeed();
break;
case 5:
StartFeedCont(args[0] & 0x3ff);
break;
case 6:
CurShot.top = 0x6000;
CurShot.bot = 0x6000;

# 7918
CurShot.x = home_loc.sweep;
CurShot.y = home_loc.elev;

# 7925
CurShotState = 30U;
break;
case 7:
CurShot.top = 0x5000;
CurShot.bot = 0x5000;
CurShot.x = 0x175;
CurShot.y = 100;

CurShot.xLeft = 0;
CurShot.yLo = 100;
CurShot.feedrate = 0x3ff;
CurShot.sweeprate = 0x1ff;
CurShotState = 17;
break;
case 8:
CurShot.top = 0x5000;
CurShot.bot = 0x5000;
CurShot.x = 0x175;
CurShot.y = 100;
CurShot.xLeft = 0x175;
CurShot.yLo = 10;
CurShot.feedrate = 0x3ff;
CurShot.sweeprate = 0x1ff;
CurShotState = 17;
break;
case 9:

SetFeedRate(feed_limit);
StartFeed();
CurShot.top = args[0];
CurShot.bot = args[0];

# 7966
CurShot.x = home_loc.sweep;
CurShot.y = home_loc.elev;

# 7973
CurShotState = 1;
break;
}
}

void NxtShot_diag(int code, long *args)
{
switch (code) {
case 0:
NextShot.x = args[0];
break;
case 1:
NextShot.y = args[0];
break;
case 2:
NextShot.top = args[0];
break;
case 3:
NextShot.bot = args[0];
break;
case 4:
CurShot.x = NextShot.x;
CurShot.y = NextShot.y;
CurShot.top = NextShot.top;
CurShot.bot = NextShot.bot;
CurShotState = 1;
NextShot.x = 0;
NextShot.y = 0;
NextShot.top = 0;
NextShot.bot = 0;
break;
}
}

void MtrResponse(int code, long *args)
{
if (stat.WaitResp == FALSE) {
dumphex((char)SlaveMotorStatus);
}
}


void SndSlvMtrStatus(void)
{
BuildCmd('4', 0, (long *)0);
stat.WaitResp = TRUE;
}




int GetMtrResponse(void)
{



int rc;
if ((LastSlaveCmd == (char)'4') && stat.WaitResp) rc = 2;
else if (SlaveMotorStatus) {
switch (SlaveMotorStatus & 0x0c) {
case 0:
rc = 0;
break;
case 4:
rc = 3;

ErrorStat.SweepCnt = 1;

;
break;
case 8:
rc = 4;

ErrorStat.ElevCnt = 1;

;
break;
case 0x0c:
rc = 5;

ErrorStat.SweepCnt = 1;
ErrorStat.ElevCnt = 1;

;
break;
}

if (rc)
if (ErrorShutDown == 0) ErrorShutDown = 1;

} else rc = 1;
return (rc);

}

# 8083
void SetFeedRate(long feedpwm)
{
last_feed_pwm = feedpwm;
if (d_feed_per) {
d_feed_per = feedpwm << 16;

}
}

void StartFeed(void)
{
unsigned *ptr = (unsigned *)&feed_stat;

if (ErrorShutDown) return;



putrsDIAG("\n\rStartFeed");


;
d_feed_per = last_feed_pwm << 16;

ball_feed = ((d_top_per < 0x2000U)?0x180:0x200) + ((d_top_per - 0x1000U) >> 7);

ball_feed_bottom = ((d_bot_per < 0x2000U)?0x180:0x200) + ((d_bot_per - 0x1000U) >> 7);


putrsDIAG("\n\rball_feed = ");
dumplong(ball_feed);

if (feed_stat.Cont) {
*ptr = 0;
feed_stat.Cont = TRUE;
} else *ptr = 0;
if (d_feed_per) {
feed_stat.Hold = TRUE;
}
}

void StartFeedAtSpd(void)
{

putrsDIAG("\n\rStartFeedAtSpd");

ball_feed = ((d_top_per < 0x2000U)?0x180:0x200) + ((d_top_per - 0x1000U) >> 7);

ball_feed_bottom = ((d_bot_per < 0x2000U)?0x180:0x200) + ((d_bot_per - 0x1000U) >> 7);


putrsDIAG("\n\rball_feed = ");
dumplong(ball_feed);



if (last_feed_pwm) {
feed_stat.Hold = 1;
}

}


void SetFeedImm(long feedpwm)
{

if (ErrorShutDown) return;


putrsDIAG("\n\rSetFeedImm");

if (d_feed_per) {
d_feed_per = feedpwm << 16;

}
last_feed_pwm = feedpwm;
}

void StartFeedCont(long feedpwm)
{

if (ErrorShutDown) return;


putrsDIAG("\n\rStartFeedCont");
ball_feed = ((d_top_per < 0x2000U)?0x180:0x200) + ((d_top_per - 0x1000U) >> 7);

ball_feed_bottom = ((d_bot_per < 0x2000U)?0x180:0x200) + ((d_bot_per - 0x1000U) >> 7);


putrsDIAG("\n\rball_feed = ");
dumplong(ball_feed);


d_feed_per = feedpwm << 16;

last_feed_pwm = feedpwm;
feed_stat.Hold = FALSE;
feed_stat.Run = FALSE;
feed_stat.Cont = TRUE;


}



void feed_diag(int code, long *args)
{
switch (code) {
case 1:
StopFeedMtr();
break;
case 0:

SetFeedRate(feed_limit);
StartFeed();
break;
case 2:
SetFeedPwm();
putrsDIAG(crlf);
;
break;
case 3:
if (args[0] > 0x3ff) args[0] = 0x3ff;
feed_limit = args[0] & 0x3ff;
break;
case 4:
accel_feed = args[0];
break;
case 5:
BDM_TripPoint[2] = args[0];
break;
case 6:
BDM_TripTime[2] = args[0];
break;
case 8:
feed_slow = args[0];
case 7:

FeedMtrDone();
break;
case 9:
SetFeedImm(args[0]);
break;
}
}

void StartTop(unsigned val){
unsigned delta;
int ix;


if (ErrorShutDown) return;

# 8241
if ((val > 0x6000) || (val < 0x1a00)) {
stop_all(0,(long*)0);
ErrorStat.TopPeriod = 1;
ErrorShutDown = 1;
return;
}
INTCONbits.GIE = 0;
if (m_top_per == 0U) {
delta = 6000U - val;
top_dir = 1;
} else if (m_top_per > val) {
delta = m_top_per - val;
top_dir = 1;
} else {
delta = val - m_top_per;
top_dir = 0;
}
if (m_top_per && delta > 500U) {
top_stat.phase2 = FALSE;
top_stat.phase1 = TRUE;
if (top_dir) {
if (delta > 0x1000U) {
if (val > 0x3000U)
top_mid = val + 0xb00U + ((0x4000U - delta) >> 5) + ((0x4000U - delta) >> 4);
else
top_mid = val + 0x900U + ((0x4000U - delta) >> 5);
} else {
top_mid = m_top_per - (delta >> 2);
}
} else {
top_mid = m_top_per + (delta >> 4);
;
;
}
for (ix=0; ix<8; ix++) {
accel_range[ix][0] = accel_hi[ix][0];
accel_range[ix][1] = accel_hi[ix][1];
}
top_stat.Run = TRUE;
} else if (m_top_per != 0U && delta > 2000U) {
for (ix=0; ix<8; ix++) {
accel_range[ix][0] = (top_dir)?accel_hi[ix][0]:accel_hi_d[ix][0];
accel_range[ix][1] = (top_dir)?accel_hi[ix][1]:accel_hi_d[ix][1];
}
} else if (m_top_per != 0U && delta > 1000U) {
for (ix=0; ix<8; ix++) {
accel_range[ix][0] = (top_dir)?accel_med[ix][0]:accel_med_d[ix][0];
accel_range[ix][1] = (top_dir)?accel_med[ix][1]:accel_med_d[ix][1];
}
} else if (m_top_per != 0U && delta > 400U) {
for (ix=0; ix<8; ix++) {
accel_range[ix][0] = (top_dir)?accel_low[ix][0]:accel_low_d[ix][0];
accel_range[ix][1] = (top_dir)?accel_low[ix][1]:accel_low_d[ix][1];
}
} else {
for (ix=0; ix<8; ix++) {
accel_range[ix][0] = (top_dir)?accel_low[ix][0]:accel_xlow_d[ix][0];
accel_range[ix][1] = (top_dir)?accel_low[ix][1]:accel_xlow_d[ix][1];
}
}

d_top_per = val;

if (feed_stat.Run) {

SlowFeedMtr(0);
SetTopPwm();

}
INTCONbits.GIE = 1;
CalcLimits(val, &TopSpdLimit[0]);
}



void top_diag(int code, long *args)
{
unsigned delta,ix;

switch (code) {
case 1:
StopTopMtr();
break;
case 0:
StartTop((unsigned)args[0]);
break;
case 2:

SetTopPwm();

# 8338
putrsDIAG((const char *)"\n\rtop_t2=");
dumplong(last_top_t2);
putrsDIAG((const char *)" top_t1=");
dumplong(last_top_t1);
putrsDIAG((const char *)" period=");
dumplong(last_top_t2 - last_top_t1);
putrsDIAG((const char *)" dperiod=");

dumpaddr(d_top_per);
dumplong(top_pwm);
break;
case 3:
top_limit = (unsigned)args[0];
break;
case 4:
UpdTopPer();

# 8362
putrsDIAG((const char *)"\n\rperiod=");
dumplong(last_top_t2 - last_top_t1);
putrsDIAG((const char *)" delta=");
dumplong(top_last_delta);
putrsDIAG((const char *)" last_delta=");
dumplong(top_last_delta1);
putrsDIAG((const char *)" dperiod=");

dumplong(d_top_per);
dumplong(top_pwm);
break;
case 5:
accel_top = (unsigned)args[0];
break;
case 6:
top_stat.Hold = (unsigned)args[0];
bot_stat.Hold = (unsigned)args[1];
break;
}
}

void StartBot(unsigned val){
unsigned delta;
int ix;


if (ErrorShutDown) return;

# 8394
if ((val > 0x6000) || (val < 0x1a00)) {
stop_all(0,(long*)0);
ErrorStat.BotPeriod = 1;
ErrorShutDown = 1;
return;
}
INTCONbits.GIE = 0;
if (m_bot_per == 0U) {
delta = 6000U - val;
bot_dir = 1;
} else if (m_bot_per > val) {
delta = m_bot_per - val;
bot_dir = 1;
} else {
delta = val - m_bot_per;
bot_dir = 0;
}
if (m_bot_per && delta > 500U) {
bot_stat.phase2 = FALSE;
bot_stat.phase1 = TRUE;
if (bot_dir) {
if (delta > 0x1000U) {
if (val > 0x3000U)
bot_mid = val + 0xb00U + ((0x4000U - delta) >> 5) + ((0x4000U - delta) >> 4);
else
bot_mid = val + 0x900U + ((0x4000U - delta) >> 5);
} else {
bot_mid = m_bot_per - (delta >> 2);
}
} else {
bot_mid = m_bot_per + (delta >> 4);
;
;
}
for (ix=0; ix<8; ix++) {
accel_range_bot[ix][0] = accel_hi[ix][0];
accel_range_bot[ix][1] = accel_hi[ix][1];
}
bot_stat.Run = TRUE;
} else if (m_bot_per != 0U && delta > 2000U) {
for (ix=0; ix<8; ix++) {
accel_range_bot[ix][0] = (bot_dir)?accel_hi[ix][0]:accel_hi_d[ix][0];
accel_range_bot[ix][1] = (bot_dir)?accel_hi[ix][1]:accel_hi_d[ix][1];
}
} else if (m_bot_per != 0U && delta > 1000U) {
for (ix=0; ix<8; ix++) {
accel_range_bot[ix][0] = (bot_dir)?accel_med[ix][0]:accel_med_d[ix][0];
accel_range_bot[ix][1] = (bot_dir)?accel_med[ix][1]:accel_med_d[ix][1];
}
} else if (m_bot_per != 0U && delta > 400U) {
for (ix=0; ix<8; ix++) {
accel_range_bot[ix][0] = (bot_dir)?accel_low[ix][0]:accel_low_d[ix][0];
accel_range_bot[ix][1] = (bot_dir)?accel_low[ix][1]:accel_low_d[ix][1];
}
} else {
for (ix=0; ix<8; ix++) {
accel_range_bot[ix][0] = (bot_dir)?accel_low[ix][0]:accel_xlow_d[ix][0];
accel_range_bot[ix][1] = (bot_dir)?accel_low[ix][1]:accel_xlow_d[ix][1];
}
}

d_bot_per = val;

if (feed_stat.Run) {

SlowFeedMtr(0);
SetBotPwm();

}
INTCONbits.GIE = 1;
CalcLimits(val, &BotSpdLimit[0]);
}



void bot_diag(int code, long *args)
{
unsigned delta,ix;
switch (code) {
case 1:
StopBotMtr();
break;
case 0:
StartBot((unsigned)args[0]);
break;
case 2:
UpdBotPer();
SetBotPwm();
dumpaddr(m_bot_per);
dumplong(d_bot_per);
dumplong(bot_pwm);
break;
case 3:
bot_limit = (unsigned)args[0];
break;
case 4:
UpdBotPer();
dumpaddr(m_bot_per);
dumplong(bot_pwm);
break;
case 5:
accel_bot = args[0];
break;
}
}



void stop_all(int code, long *args)
{
if (DoDebug) {
start_count = 0;
min_count = 0;
max_count = 0;
}
StopTopMtr();
StopFeedMtr();
StopBotMtr();
StopBidirMtrs();
CurShotState = 0U;
}

void pwm_debug(int code, long *args)
{
switch (code) {
case 0:
INTCONbits.GIE = 0;
max_count = m_bot_per;
min_count = m_bot_per;
INTCONbits.GIE = 1;
break;
case 1:
dumpaddr(start_count);
dumplong(min_count);
dumplong(max_count);
break;
case 2:
DoDebug = 1;
break;
default:
break;
}
}

void slavecmd(int code, long *args)
{
variant y;

char c = (char)code;
switch (c) {
case 'a':
args[0] += elev_corr.s;


case 'A':
case 'D':
case 'd':
case 'F':
case 'f':
case 'H':
case 'h':
case 'I':
case 'i':
case 'J':
case 'j':
case '3':
case 'E':
case 'e':
BuildCmd(code, 1, args);
break;
case 'k':
y.l = args[1];
y.s[0] += elev_corr.s;
y.s[1] += elev_corr.s;
args[1] = y.l;
case 'K':
BuildCmd(code, 2, args);
break;
case '0':
BuildCmd(code, 1, args);
stat.WaitResp = TRUE;
break;
case 'B':
case 'b':
case 'C':
case 'c':
case '2':
case '5':
case '6':
BuildCmd(code, 0, args);
break;
case 'G':
case 'g':
case '4':

BuildCmd(code, 0, args);

stat.WaitResp = TRUE;
break;
case '1':
BuildCmd(code, 2, args);
break;
}
}



void BuildCmd(int code, int cnt, long *args)
{
unsigned long val;
unsigned char checksum;
char *cptr;
int i;
char c;



if (ErrorShutDown && (code != (int)'2')) {
return;
}




SlaveCmdOfs = 0;
checksum = 0;
checksum = SlaveCmd[SlaveCmdOfs++] = 'S';
checksum += (SlaveCmd[SlaveCmdOfs++] = (cnt+1) << 2);
checksum += (SlaveCmd[SlaveCmdOfs++] = code);
while (cnt) {
--cnt;
val = *args++;
for (i=0; i<4; i++) {
checksum += (SlaveCmd[SlaveCmdOfs++] = val & 0xff);
val >>= 8;
}
}
SlaveCmd[SlaveCmdOfs++] = 0 - checksum;
LastSlaveCmd = (char)code;

cptr = &SlaveCmd[0];
;
for (i=0; i<SlaveCmd[1]; i++) {
c = *cptr;

# 8643
;
ChipSelect(0);
WriteSPI1(*cptr++);
ChipDeSelect(0);

# 8652
Delay1KTCYx(3);

}
;
ChipSelect(0);
c = ReadSPI1();

# 8663
;
ChipDeSelect(0);
if (code == (int)'4')
SlaveMotorStatus = 0x03;
}


void SlvTimeOut(void)
{
SlaveResOfs = 0;
stat.WaitResp = FALSE;
}



void remote_diag(int code, long* args)

{
putrsDIAG("\r\n");
do {
while (!(PIR1bits.RCIF));
dumphex(Read1USART());
} while ((PIR1bits.RCIF));
}



void kbdiag (int code, long *args)

{
unsigned char uc, i;
unsigned char col;
static volatile unsigned short loop;

switch (code) {
case 0:
putrsDIAG(lob_model);
dumphex(args[0]);
putrsDIAG(space);
PORTE = args[0]^0xff;
uc = PORTD & 0x3f;
dumphex(uc);
break;
case 1:
putrsDIAG(lob_model);
for (i=0,col=1; (col&0xff); col<<=1,i++) {

PORTE = col^0xff;
uc = PORTD & 0x3f;
if (uc != 0x3fU) break;




}
if (i == 8U) {
putrsDIAG("No key.");
break;
}
i *= 6;
uc ^= 0x3f;
for (loop=1; uc; uc>>=1,loop++)
;
dumphex(i+loop-2);
break;
}
putrsDIAG(crlf);
}




void poweroff(int code, long *args)
{




if (power.count == 0)



save_prog(loaded_progno,&act_program);
PORTA=0;
;
(SSP1CON1 &=0xDF);
RCSTA1&=0b01001111,TXSTA1bits.TXEN=0,PIE1&=0b11001111;
RCSTA2&=0b01001111,TXSTA2bits.TXEN=0,PIE3&=0b11001111;
ClosePWM4();
ClosePWM3();
ClosePWM5();
CloseTimer4();
CloseCapture1();
CloseTimer1();
CloseCapture2();
CloseTimer3();
ADCON0 = 0;
CloseTimer1();
CloseTimer0();

# 8769
PORTA=0;
PORTB=0;
PORTC=0;
PORTD=0;
PORTE=0;
PORTF=0;
PORTG=0;
TRISA=0x00;
TRISB=0x01;
TRISC=0x00;
TRISD=0x00;
TRISE=0x00;
TRISF=0x00;
TRISG=0x00;

WDTCONbits.SWDTEN = 0;
INTCONbits.GIE = 0;
INTCONbits.PEIE = 0;
INTCONbits.INT0IF = 0;
INTCONbits.INT0IE = 1;
asm(" sleep");
__nop();
INTCONbits.INT0IF = 0;
INTCONbits.INT0IE = 0;
}

ulong FeedPwm2Sec(ulong feed)
{
int i;

if (!feed) return 0;
for (i=0; i<14; i++) {
if ((ulong)base_feeds_cont[i] <= feed)
return (i+2);
}
return (6);

}

void CalcLimits(ulong count, unsigned *SpdLimit)
{
int i;

for (i=0; FeedStartTbl[i][0]; i++) {
if (count == FeedStartTbl[i][0]) {
*SpdLimit++ = FeedStartTbl[i][1];
*SpdLimit = FeedStartTbl[i][2];
break;
}
}
}

int SpeedInRange()
{
if ((m_top_per <= TopSpdLimit[0]) && (m_top_per >= TopSpdLimit[1])
&& (m_bot_per <= BotSpdLimit[0]) && (m_bot_per >= BotSpdLimit[1]))
return 1;
else return 0;

}

void ForceShot(int code, long* args)
{
LargeSpdDrop = 1;
}

void CheckBattery(unsigned int val)
{
if (val <= BAT_TripPoint) {
if (++BAT_CurSenseCt >= BAT_TripTime) {
;

# 8845
stop_all(0,(long*)0);
;
;
;
BAT_CurSenseCt = BAT_TripTime;

ErrorStat.LoBat = 1;
if (ErrorShutDown == 0) ErrorShutDown = 1;

}
} else BAT_CurSenseCt = 0;
}

unsigned int BatteryAverage(unsigned int val)
{
int i, j;
unsigned int BatAvgVal = 0;
unsigned int minVal, maxVal;

if (BatAvgCnt < 20) {
BatAvg[BatAvgCnt++] = val;
} else {
for (i=0; i<19; i++)
BatAvg[i] = BatAvg[i+1];
BatAvg[19] = val;
}
if (BatAvgCnt < 4) {
maxVal = 0;
for (i=0; i<BatAvgCnt; i++)
if (BatAvg[i] > maxVal) maxVal = BatAvg[i];
BatAvgVal = maxVal;
} else {
for (i=0; i<BatAvgCnt; i++) BatAvgVal += BatAvg[i];
BatAvgVal = BatAvgVal / BatAvgCnt;
minVal = BatAvgVal - BatAvgVal / 10;
maxVal = BatAvgVal + BatAvgVal / 10;
for (i=0,BatAvgVal=0,j=0; i<BatAvgCnt; i++) {
if ((BatAvg[i] >= minVal) && (BatAvg[i] <= maxVal)) {
BatAvgVal += BatAvg[i];
++j;
}
}
if (!j) {
for (i=0,BatAvgVal=0,j=0; i<BatAvgCnt; i++) {
if (BatAvg[i] >= minVal) {
BatAvgVal += BatAvg[i];
++j;
}
}
}
if (j) BatAvgVal = BatAvgVal / j;
}
return BatAvgVal;
}
